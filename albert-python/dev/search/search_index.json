{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Albert Python","text":""},{"location":"#overview","title":"Overview","text":"<p>Albert Python is the official Albert Invent Software Development Kit (SDK) for Python that provides a comprehensive and easy-to-use interface for interacting with the Albert Platform. The SDK allows Python developers to write software that interacts with various platform resources, such as inventories, projects, companies, tags, and many more.</p> <p>It provides:</p> <ul> <li>Typed Resource Models via Pydantic for entities like <code>Project</code>, <code>InventoryItem</code>, <code>Company</code>, and more.</li> <li>Resource Collections with CRUD and search methods for each model (e.g., <code>client.projects</code>, <code>client.inventory</code>).</li> <li>Multiple Authentication options: static token, OAuth2 client credentials, or browser-based SSO.</li> <li>Automatic Pagination and configurable logging.</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Install the package:</p> <pre><code>pip install albert\n</code></pre> <p>Get all projects:</p> <pre><code>from albert import Albert\n\n# Initialize with a static JWT token\nclient = Albert.from_token(\n    base_url=\"https://app.albertinvent.com\",\n    token=\"YOUR_JWT_TOKEN\"\n)\n\nfor project in client.projects.get_all(max_items=10):\n    print(project.name)\n</code></pre>"},{"location":"#next-steps","title":"Next Steps","text":"<ul> <li>Learn core concepts: see Concepts</li> <li>Explore Authentication methods: see Authentication</li> <li>Explore detailed references: see Albert</li> </ul>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"CHANGELOG/#unreleased","title":"[Unreleased]","text":""},{"location":"CHANGELOG/#120-2025-07-25","title":"[1.2.0] - 2025-07-25","text":""},{"location":"CHANGELOG/#changed","title":"Changed","text":"<ul> <li>Default limit for all search() functions set to 1000 items per page</li> </ul>"},{"location":"CHANGELOG/#fixed","title":"Fixed","text":"<ul> <li>Removed page_size parameter from all get_all() and search() functions for consistency</li> </ul>"},{"location":"CHANGELOG/#113-2025-07-23","title":"[1.1.3] - 2025-07-23","text":""},{"location":"CHANGELOG/#added","title":"Added","text":"<ul> <li> <p>New activity tracking functionality ([#244] by @ventura-rivera)</p> </li> <li> <p>Initial release of Analytical Reports (analyticalreports) module ([#250] by @lkubie)</p> </li> </ul>"},{"location":"CHANGELOG/#fixed_1","title":"Fixed","text":"<ul> <li>Allow DataTemplate creation with inline parameters ([#248] by @prasad-albert)</li> </ul>"},{"location":"CHANGELOG/#101-2025-07-21","title":"[1.0.1] - 2025-07-21","text":""},{"location":"CHANGELOG/#fixed_2","title":"Fixed","text":"<ul> <li>Corrected base URL extraction for Client Credentials auth.</li> </ul>"},{"location":"CHANGELOG/#100-2025-07-21","title":"[1.0.0] - 2025-07-21","text":""},{"location":"CHANGELOG/#added_1","title":"Added","text":"<ul> <li>Unified AuthManager system:</li> <li>SSO via <code>AlbertSSOClient</code> and <code>Albert.from_sso(...)</code></li> <li>Client Credentials via <code>AlbertClientCredentials</code> and <code>Albert.from_client_credentials(...)</code></li> <li>Static Token via <code>Albert.from_token(...)</code> or <code>ALBERT_TOKEN</code> environment variable</li> <li><code>max_items</code> and <code>page_size</code> parameters added to all <code>get_all()</code> and <code>search()</code> methods for consistent, iterator-friendly pagination</li> <li>Support for <code>resource.hydrate()</code> to upgrade partial search results into fully hydrated resources</li> <li>Introduced <code>get_or_create(...)</code> method for safe idempotent creation</li> </ul>"},{"location":"CHANGELOG/#changed_1","title":"Changed","text":"<ul> <li>Deprecated <code>client_credentials</code> and <code>token</code> parameters in <code>Albert(...)</code>, replaced by <code>auth_manager</code></li> <li><code>create()</code> methods no longer perform existence checks and now raise an error if the entity already exists</li> <li>Deprecated all <code>list()</code> methods in favor of:</li> <li><code>get_all()</code> for detailed (hydrated) resources</li> <li><code>search()</code> for partial (unhydrated) resources</li> <li>Renamed <code>BatchDataCollection.get()</code> \u2192 <code>get_by_id()</code></li> <li>Renamed <code>NotesCollection.list()</code> \u2192 <code>get_by_parent_id()</code></li> <li>Renamed <code>tags.get_by_tag()</code> \u2192 <code>get_by_name()</code></li> <li>Renamed all <code>collection.collection_exists()</code> \u2192 <code>collection.exists()</code></li> <li>Renamed <code>InventoryInformation</code> model to:</li> <li><code>TaskInventoryInformation</code></li> <li><code>PropertyDataInventoryInformation</code></li> <li>Renamed <code>templates</code> module to <code>custom_templates</code></li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing to Albert Python SDK","text":"<p>Thanks for your interest in contributing to the Albert Python SDK! We aim to make it as easy as possible to get started and see your changes released quickly.</p>"},{"location":"CONTRIBUTING/#quickstart","title":"\ud83d\ude80 Quickstart","text":"<ol> <li> <p>Clone the repository:</p> <pre><code>git clone https://github.com/your-username/albert-python.git\ncd albert-python\n</code></pre> </li> <li> <p>Run the setup script (installs all dependencies and hooks):</p> <pre><code>./setup.sh\n</code></pre> </li> <li> <p>Create a new branch for your work:</p> <pre><code>git checkout -b my-awesome-feature\n</code></pre> </li> <li> <p>Make your changes, then commit. Pre-commit hooks and linting will run automatically.</p> </li> <li>Push your branch and open a Pull Request against <code>main</code>.</li> </ol> <p>Your contribution could ship in days or weeks -- welcome aboard! \ud83d\ude80</p>"},{"location":"CONTRIBUTING/#dynamic-versioning","title":"Dynamic Versioning","text":"<p>The package version is defined in the <code>src/albert/__init__.py</code> file and read dynamically when building distributions.</p>"},{"location":"CONTRIBUTING/#code-style","title":"Code Style","text":"<p>This project uses ruff for both formatting and linting. Formatting and linting rules are enforced in the CI process.</p> <p>To check (or fix) your code formatting, you can run the commands,</p> <pre><code># Check\nuv run ruff format . --check\n\n# Fix\nuv run ruff format .\n</code></pre> <p>To check (or fix) your code linting, you can run the commands</p> <pre><code># Check\nuv run ruff check .\n\n# Fix\nuv run ruff check . --fix\n</code></pre> <p>For VSCode users, there is also base workspace settings defined in <code>.vscode/settings.json</code> that enable automatic fomatting and import sorting on-save using the Ruff for VSCode extension.</p>"},{"location":"CONTRIBUTING/#commit-guidelines","title":"Commit Guidelines","text":"<p>We use the Conventional Commits format:</p> <pre><code>type(scope)!: summary\n</code></pre> <ul> <li><code>type</code>: one of <code>feat</code>, <code>fix</code>, <code>refactor</code>, <code>chore</code>, <code>docs</code>, <code>test</code>, <code>style</code>, <code>build</code>, <code>ci</code>, <code>perf</code>, <code>revert</code></li> <li><code>scope</code>: optional, a module or feature name (e.g., <code>auth</code>, <code>session</code>)</li> <li><code>!</code>: optional, indicates a breaking change</li> <li><code>summary</code>: short and clear \u2014 think \u201cwhen applied, the SDK will\u2026\u201d</li> </ul>"},{"location":"CONTRIBUTING/#examples","title":"Examples","text":"<pre><code>feat(auth): support token refresh\nfix!: remove deprecated param handling\ndocs: clarify local dev setup\n</code></pre> <p>This keeps commit history readable and enables changelog automation.</p>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":""},{"location":"CONTRIBUTING/#using-numpy-style-docstrings","title":"Using Numpy-Style Docstrings","text":"<p>All public methods and classes in this repository should follow the Numpy-style docstring format. This ensures consistency and compatibility with <code>mkdocstrings</code> for automated documentation generation.</p>"},{"location":"CONTRIBUTING/#example","title":"Example","text":"<pre><code>class Cas:\n    \"\"\"\n    Represents a CAS entity.\n\n    Attributes\n    ----------\n    number : str\n        The CAS number.\n    name : str, optional\n        The name of the CAS.\n    \"\"\"\n\n    def from_string(cls, *, number: str) -&gt; \"Cas\":\n        \"\"\"\n        Creates a Cas object from a string.\n\n        Parameters\n        ----------\n        number : str\n            The CAS number.\n\n        Returns\n        -------\n        Cas\n            The Cas object created from the string.\n        \"\"\"\n        return cls(number=number)\n</code></pre> <p>When contributing new classes or methods, ensure all public members have properly formatted Numpy-style docstrings.</p>"},{"location":"CONTRIBUTING/#adding-new-classes","title":"Adding New Classes","text":"<p>To add coverage for a new microservice, you can add a page by doing the following:</p> <ol> <li> <p>in the <code>docs/</code> folder make a new markdown file following the pattern of the others.     For example:</p> <pre><code># cas.md\n\n::: albert.collections.cas\n</code></pre> </li> <li> <p>In <code>mkdocs.yml</code> add a link to the <code>nav</code> section (Alphabetically Sorted) following the existing pattern.</p> </li> </ol>"},{"location":"CONTRIBUTING/#testing-documentation-locally","title":"Testing Documentation Locally","text":"<p>Before pushing documentation changes, verify that everything is rendering correctly.</p>"},{"location":"CONTRIBUTING/#1-install-dependencies-if-not-already-installed","title":"1. Install dependencies (if not already installed)","text":"<pre><code>uv sync\n</code></pre>"},{"location":"CONTRIBUTING/#2-build-and-serve-the-documentation-locally","title":"2. Build and serve the documentation locally","text":"<pre><code>uv run mkdocs serve\n</code></pre>"},{"location":"CONTRIBUTING/#3-open-http1270018000-or-specified-address-in-your-browser-and-navigate-through-the-docs-to-confirm-that","title":"3. Open http://127.0.0.1:8000/ (or specified address) in your browser and navigate through the docs to confirm that","text":"<ul> <li>All references and links are resolving correctly.</li> <li>Docstrings are properly formatted.</li> <li>No missing or broken sections exist.</li> </ul>"},{"location":"CONTRIBUTING/#deploying-documentation","title":"Deploying Documentation","text":"<p>The documentation is automatically built and deployed to GitHub Pages when a pull request is merged into main.</p>"},{"location":"CONTRIBUTING/#how-it-works","title":"How It Works","text":"<ol> <li>A PR is merged into main.</li> <li> <p>CircleCI runs the deploy_docs job, which:</p> <ul> <li>Builds the latest version of the documentation using mkdocs build --clean.</li> <li>Pushes the built docs to the gh-pages branch.</li> <li>GitHub Pages automatically serves the latest docs</li> </ul> </li> </ol>"},{"location":"CONTRIBUTING/#manually-triggering-a-docs-deployment","title":"Manually Triggering a Docs Deployment","text":"<p>If needed, you can manually re-deploy the docs by running:</p> <pre><code>git checkout main\ngit pull origin main\nuv run mkdocs build --clean\ngit push origin gh-pages\n</code></pre>"},{"location":"CONTRIBUTING/#creating-a-release","title":"Creating a Release","text":"<ol> <li>Ensure the version in <code>src/albert/__init__.py</code> is updated to the desired release version</li> <li>Go to the Releases section of the repository</li> <li>Click \"Draft a new release\"</li> <li>Create a new tag matching the version in <code>__init__.py</code> (e.g., if <code>__init__.py</code> has <code>__version__ = \"0.3.0\"</code>, use tag <code>v0.3.0</code>)</li> <li>Click \"Generate release notes\" and review/edit as needed</li> <li>Publish the release</li> </ol> <p>The release will automatically trigger the CircleCI workflow to:</p> <ul> <li>Build and publish the package to PyPI</li> <li>Build and deploy the documentation</li> </ul> <p>Note: Only designated Albert team members have permissions to create releases.</p>"},{"location":"albert/","title":"Albert Client","text":""},{"location":"albert/#albert.Albert","title":"albert.Albert","text":"<pre><code>Albert(\n    *,\n    base_url: str | None = None,\n    token: str | None = None,\n    auth_manager: AlbertClientCredentials\n    | AlbertSSOClient\n    | None = None,\n    retries: int | None = None,\n    session: AlbertSession | None = None,\n)\n</code></pre> <p>Main client for interacting with the Albert API.</p> <p>This class manages authentication and access to API resource collections. It supports token-based, SSO, and client credentials authentication via a unified interface.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The base URL of the Albert API. If not provided, the URL from <code>auth_manager</code> is used when available, otherwise the <code>ALBERT_BASE_URL</code> environment variable or \"https://app.albertinvent.com\".</p> <code>None</code> <code>token</code> <code>str</code> <p>A static token for authentication. If provided, it overrides any <code>auth_manager</code>. Defaults to the \"ALBERT_TOKEN\" environment variable.</p> <code>None</code> <code>auth_manager</code> <code>AlbertClientCredentials | AlbertSSOClient</code> <p>An authentication manager for OAuth2-based authentication flows. Ignored if <code>token</code> is provided.</p> <code>None</code> <code>retries</code> <code>int</code> <p>Maximum number of retries for failed HTTP requests.</p> <code>None</code> <code>session</code> <code>AlbertSession</code> <p>A fully configured session instance. If provided, <code>base_url</code>, <code>token</code>, and <code>auth_manager</code> are all ignored.</p> <code>None</code> <p>Attributes:</p> Name Type Description <code>session</code> <code>AlbertSession</code> <p>The internal session used for authenticated requests.</p> <code>projects</code> <code>ProjectCollection</code> <p>Access to project-related API methods.</p> <code>tags</code> <code>TagCollection</code> <p>Access to tag-related API methods.</p> <code>inventory</code> <code>InventoryCollection</code> <p>Access to inventory-related API methods.</p> <code>companies</code> <code>CompanyCollection</code> <p>Access to company-related API methods.</p> Helpers <ul> <li><code>from_token</code> \u2014 Create a client using a static token.</li> <li><code>from_sso</code> \u2014 Create a client using interactive browser-based SSO login.</li> <li><code>from_client_credentials</code> \u2014 Create a client using OAuth2 client credentials.</li> </ul> <p>Methods:</p> Name Description <code>from_token</code> <p>Create an Albert client using a static token for authentication.</p> <code>from_sso</code> <p>Create an Albert client using interactive OAuth2 SSO login.</p> <code>from_client_credentials</code> <p>Create an Albert client using client credentials authentication.</p> Source code in <code>src/albert/client.py</code> <pre><code>def __init__(\n    self,\n    *,\n    base_url: str | None = None,\n    token: str | None = None,\n    auth_manager: AlbertClientCredentials | AlbertSSOClient | None = None,\n    retries: int | None = None,\n    session: AlbertSession | None = None,\n):\n    if auth_manager and base_url and base_url != auth_manager.base_url:\n        raise ValueError(\"`base_url` must match the URL used by the auth manager.\")\n\n    resolved_base_url = (\n        base_url\n        or (auth_manager.base_url if auth_manager else None)\n        or default_albert_base_url()\n    )\n\n    self.session = session or AlbertSession(\n        base_url=resolved_base_url,\n        token=token or os.getenv(\"ALBERT_TOKEN\"),\n        auth_manager=auth_manager,\n        retries=retries,\n    )\n</code></pre>"},{"location":"albert/#albert.Albert.session","title":"session","text":"<pre><code>session = session or AlbertSession(\n    base_url=resolved_base_url,\n    token=token or getenv(\"ALBERT_TOKEN\"),\n    auth_manager=auth_manager,\n    retries=retries,\n)\n</code></pre>"},{"location":"albert/#albert.Albert.projects","title":"projects","text":"<pre><code>projects: ProjectCollection\n</code></pre>"},{"location":"albert/#albert.Albert.activities","title":"activities","text":"<pre><code>activities: ActivityCollection\n</code></pre>"},{"location":"albert/#albert.Albert.attachments","title":"attachments","text":"<pre><code>attachments: AttachmentCollection\n</code></pre>"},{"location":"albert/#albert.Albert.tags","title":"tags","text":"<pre><code>tags: TagCollection\n</code></pre>"},{"location":"albert/#albert.Albert.inventory","title":"inventory","text":"<pre><code>inventory: InventoryCollection\n</code></pre>"},{"location":"albert/#albert.Albert.companies","title":"companies","text":"<pre><code>companies: CompanyCollection\n</code></pre>"},{"location":"albert/#albert.Albert.lots","title":"lots","text":"<pre><code>lots: LotCollection\n</code></pre>"},{"location":"albert/#albert.Albert.units","title":"units","text":"<pre><code>units: UnitCollection\n</code></pre>"},{"location":"albert/#albert.Albert.cas_numbers","title":"cas_numbers","text":"<pre><code>cas_numbers: CasCollection\n</code></pre>"},{"location":"albert/#albert.Albert.data_columns","title":"data_columns","text":"<pre><code>data_columns: DataColumnCollection\n</code></pre>"},{"location":"albert/#albert.Albert.data_templates","title":"data_templates","text":"<pre><code>data_templates: DataTemplateCollection\n</code></pre>"},{"location":"albert/#albert.Albert.un_numbers","title":"un_numbers","text":"<pre><code>un_numbers: UnNumberCollection\n</code></pre>"},{"location":"albert/#albert.Albert.users","title":"users","text":"<pre><code>users: UserCollection\n</code></pre>"},{"location":"albert/#albert.Albert.locations","title":"locations","text":"<pre><code>locations: LocationCollection\n</code></pre>"},{"location":"albert/#albert.Albert.lists","title":"lists","text":"<pre><code>lists: ListsCollection\n</code></pre>"},{"location":"albert/#albert.Albert.notebooks","title":"notebooks","text":"<pre><code>notebooks: NotebookCollection\n</code></pre>"},{"location":"albert/#albert.Albert.notes","title":"notes","text":"<pre><code>notes: NotesCollection\n</code></pre>"},{"location":"albert/#albert.Albert.custom_fields","title":"custom_fields","text":"<pre><code>custom_fields: CustomFieldCollection\n</code></pre>"},{"location":"albert/#albert.Albert.reports","title":"reports","text":"<pre><code>reports: ReportCollection\n</code></pre>"},{"location":"albert/#albert.Albert.report_templates","title":"report_templates","text":"<pre><code>report_templates: ReportTemplateCollection\n</code></pre>"},{"location":"albert/#albert.Albert.roles","title":"roles","text":"<pre><code>roles: RoleCollection\n</code></pre>"},{"location":"albert/#albert.Albert.worksheets","title":"worksheets","text":"<pre><code>worksheets: WorksheetCollection\n</code></pre>"},{"location":"albert/#albert.Albert.tasks","title":"tasks","text":"<pre><code>tasks: TaskCollection\n</code></pre>"},{"location":"albert/#albert.Albert.custom_templates","title":"custom_templates","text":"<pre><code>custom_templates: CustomTemplatesCollection\n</code></pre>"},{"location":"albert/#albert.Albert.parameter_groups","title":"parameter_groups","text":"<pre><code>parameter_groups: ParameterGroupCollection\n</code></pre>"},{"location":"albert/#albert.Albert.parameters","title":"parameters","text":"<pre><code>parameters: ParameterCollection\n</code></pre>"},{"location":"albert/#albert.Albert.property_data","title":"property_data","text":"<pre><code>property_data: PropertyDataCollection\n</code></pre>"},{"location":"albert/#albert.Albert.product_design","title":"product_design","text":"<pre><code>product_design: ProductDesignCollection\n</code></pre>"},{"location":"albert/#albert.Albert.storage_locations","title":"storage_locations","text":"<pre><code>storage_locations: StorageLocationsCollection\n</code></pre>"},{"location":"albert/#albert.Albert.pricings","title":"pricings","text":"<pre><code>pricings: PricingCollection\n</code></pre>"},{"location":"albert/#albert.Albert.files","title":"files","text":"<pre><code>files: FileCollection\n</code></pre>"},{"location":"albert/#albert.Albert.workflows","title":"workflows","text":"<pre><code>workflows: WorkflowCollection\n</code></pre>"},{"location":"albert/#albert.Albert.btdatasets","title":"btdatasets","text":"<pre><code>btdatasets: BTDatasetCollection\n</code></pre>"},{"location":"albert/#albert.Albert.btmodelsessions","title":"btmodelsessions","text":"<pre><code>btmodelsessions: BTModelSessionCollection\n</code></pre>"},{"location":"albert/#albert.Albert.btmodels","title":"btmodels","text":"<pre><code>btmodels: BTModelCollection\n</code></pre>"},{"location":"albert/#albert.Albert.btinsights","title":"btinsights","text":"<pre><code>btinsights: BTInsightCollection\n</code></pre>"},{"location":"albert/#albert.Albert.substances","title":"substances","text":"<pre><code>substances: SubstanceCollection\n</code></pre>"},{"location":"albert/#albert.Albert.links","title":"links","text":"<pre><code>links: LinksCollection\n</code></pre>"},{"location":"albert/#albert.Albert.batch_data","title":"batch_data","text":"<pre><code>batch_data: BatchDataCollection\n</code></pre>"},{"location":"albert/#albert.Albert.storage_classes","title":"storage_classes","text":"<pre><code>storage_classes: StorageClassesCollection\n</code></pre>"},{"location":"albert/#albert.Albert.hazards","title":"hazards","text":"<pre><code>hazards: HazardsCollection\n</code></pre>"},{"location":"albert/#albert.Albert.from_token","title":"from_token","text":"<pre><code>from_token(*, base_url: str | None, token: str) -&gt; Albert\n</code></pre> <p>Create an Albert client using a static token for authentication.</p> Source code in <code>src/albert/client.py</code> <pre><code>@classmethod\ndef from_token(cls, *, base_url: str | None, token: str) -&gt; Albert:\n    \"\"\"Create an Albert client using a static token for authentication.\"\"\"\n    return cls(base_url=base_url, token=token)\n</code></pre>"},{"location":"albert/#albert.Albert.from_sso","title":"from_sso","text":"<pre><code>from_sso(\n    *,\n    base_url: str | None,\n    email: str,\n    port: int = 5000,\n    tenant_id: str | None = None,\n    retries: int | None = None,\n) -&gt; Albert\n</code></pre> <p>Create an Albert client using interactive OAuth2 SSO login.</p> Source code in <code>src/albert/client.py</code> <pre><code>@classmethod\ndef from_sso(\n    cls,\n    *,\n    base_url: str | None,\n    email: str,\n    port: int = 5000,\n    tenant_id: str | None = None,\n    retries: int | None = None,\n) -&gt; Albert:\n    \"\"\"Create an Albert client using interactive OAuth2 SSO login.\"\"\"\n    resolved_base_url = base_url or default_albert_base_url()\n    oauth = AlbertSSOClient(base_url=resolved_base_url, email=email)\n    oauth.authenticate(minimum_port=port, tenant_id=tenant_id)\n    return cls(auth_manager=oauth, retries=retries)\n</code></pre>"},{"location":"albert/#albert.Albert.from_client_credentials","title":"from_client_credentials","text":"<pre><code>from_client_credentials(\n    *,\n    base_url: str | None,\n    client_id: str,\n    client_secret: str,\n    retries: int | None = None,\n) -&gt; Albert\n</code></pre> <p>Create an Albert client using client credentials authentication.</p> Source code in <code>src/albert/client.py</code> <pre><code>@classmethod\ndef from_client_credentials(\n    cls,\n    *,\n    base_url: str | None,\n    client_id: str,\n    client_secret: str,\n    retries: int | None = None,\n) -&gt; Albert:\n    \"\"\"Create an Albert client using client credentials authentication.\"\"\"\n    resolved_base_url = base_url or default_albert_base_url()\n    creds = AlbertClientCredentials(\n        id=client_id,\n        secret=SecretStr(client_secret),\n        base_url=resolved_base_url,\n    )\n    return cls(auth_manager=creds, retries=retries)\n</code></pre>"},{"location":"authentication/","title":"Authentication","text":"<p>Albert Python SDK supports three authentication methods:</p> <ul> <li>Single Sign-On (SSO) via browser-based OAuth2</li> <li>Client Credentials using a client ID and secret</li> <li>Static Token using a pre-generated token (via the <code>ALBERT_TOKEN</code> environment variable)</li> </ul> <p>These modes are supported via the <code>auth_manager</code> or <code>token</code> argument to the <code>Albert</code> client.</p> <p>Warning</p> <p>Static token-based authentication is suitable for temporary or testing purposes and does not support token refresh.</p>"},{"location":"authentication/#sso-browser-based-login","title":"\ud83d\udd10 SSO (Browser-Based Login)","text":"<p>This is the recommended method for users authenticating interactively. It opens a browser window to authenticate using your email address and automatically manages tokens.</p> <pre><code>from albert import Albert, AlbertSSOClient\n\nsso = AlbertSSOClient(\n    base_url=\"https://app.albertinvent.com\",\n    email=\"your-name@albertinvent.com\",\n)\n\n# IMPORTANT: You must call authenticate() to complete the login flow\nsso.authenticate()\n\nclient = Albert(base_url=\"https://app.albertinvent.com\", auth_manager=sso)\n</code></pre> <p>Warning</p> <p>You must call <code>.authenticate()</code> before passing this client to <code>Albert(auth_manager=...)</code> to ensure the token is acquired and ready for use.</p> <p>Alternatively, you can use the helper constructor:</p> <pre><code>client = Albert.from_sso(\n    base_url=\"https://app.albertinvent.com\",\n    email=\"your-name@albertinvent.com\"\n)\n</code></pre>"},{"location":"authentication/#client-credentials-programmatic-access","title":"\ud83d\udd11 Client Credentials (Programmatic Access)","text":"<p>This method implements the OAuth2 Client Credentials flow and is suitable for non-interactive usage, like backend services or automation scripts. It manages token acquisition and refresh automatically via the <code>AlbertClientCredentials</code> class.</p> <p>This method is ideal for server-to-server or CI/CD scenarios. You can authenticate using a client ID and secret, and the SDK will manage token fetching and refresh automatically.</p> <pre><code>from pydantic import SecretStr\n\ncreds = AlbertClientCredentials(\n    id=\"your-client-id\",\n    secret=SecretStr(\"your-client-secret\"),\n    base_url=\"https://app.albertinvent.com\",\n)\nclient = Albert(auth_manager=creds)\n</code></pre> <p>Or you can use the helper constructor:</p> <pre><code>from albert import Albert, AlbertClientCredentials\n\nclient = Albert.from_client_credentials(\n    client_id=\"your-client-id\",\n    client_secret=\"your-client-secret\",\n    base_url=\"https://app.albertinvent.com\"\n)\n</code></pre> <p>Or load credentials from environment,</p> <pre><code>creds = AlbertClientCredentials.from_env()\nclient = Albert(auth_manager=creds)\n</code></pre> <p>Environment variables:</p> <ul> <li><code>ALBERT_CLIENT_ID</code></li> <li><code>ALBERT_CLIENT_SECRET</code></li> <li><code>ALBERT_BASE_URL</code> (optional; defaults to <code>https://app.albertinvent.com</code></li> </ul>"},{"location":"authentication/#token-based-auth-for-testing-only","title":"\ud83e\uddea Token-Based Auth (For Testing Only)","text":"<p>You can also use a static token (e.g., copied from browser dev tools or passed via env) for one-off access:</p> <pre><code>client = Albert(\n    base_url=\"https://app.albertinvent.com\",\n    token=\"your.jwt.token\"\n)\n</code></pre> <p>Or using the helper</p> <pre><code>client = Albert.from_token(\n    base_url=\"https://app.albertinvent.com\",\n    token=\"your.jwt.token\"\n)\n</code></pre> <p>Warning</p> <p>This method does not support auto-refresh and should be avoided for production use.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#120-2025-07-25","title":"[1.2.0] - 2025-07-25","text":""},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Default limit for all search() functions set to 1000 items per page</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Removed page_size parameter from all get_all() and search() functions for consistency</li> </ul>"},{"location":"changelog/#113-2025-07-23","title":"[1.1.3] - 2025-07-23","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li> <p>New activity tracking functionality ([#244] by @ventura-rivera)</p> </li> <li> <p>Initial release of Analytical Reports (analyticalreports) module ([#250] by @lkubie)</p> </li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Allow DataTemplate creation with inline parameters ([#248] by @prasad-albert)</li> </ul>"},{"location":"changelog/#101-2025-07-21","title":"[1.0.1] - 2025-07-21","text":""},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Corrected base URL extraction for Client Credentials auth.</li> </ul>"},{"location":"changelog/#100-2025-07-21","title":"[1.0.0] - 2025-07-21","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li>Unified AuthManager system:</li> <li>SSO via <code>AlbertSSOClient</code> and <code>Albert.from_sso(...)</code></li> <li>Client Credentials via <code>AlbertClientCredentials</code> and <code>Albert.from_client_credentials(...)</code></li> <li>Static Token via <code>Albert.from_token(...)</code> or <code>ALBERT_TOKEN</code> environment variable</li> <li><code>max_items</code> and <code>page_size</code> parameters added to all <code>get_all()</code> and <code>search()</code> methods for consistent, iterator-friendly pagination</li> <li>Support for <code>resource.hydrate()</code> to upgrade partial search results into fully hydrated resources</li> <li>Introduced <code>get_or_create(...)</code> method for safe idempotent creation</li> </ul>"},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Deprecated <code>client_credentials</code> and <code>token</code> parameters in <code>Albert(...)</code>, replaced by <code>auth_manager</code></li> <li><code>create()</code> methods no longer perform existence checks and now raise an error if the entity already exists</li> <li>Deprecated all <code>list()</code> methods in favor of:</li> <li><code>get_all()</code> for detailed (hydrated) resources</li> <li><code>search()</code> for partial (unhydrated) resources</li> <li>Renamed <code>BatchDataCollection.get()</code> \u2192 <code>get_by_id()</code></li> <li>Renamed <code>NotesCollection.list()</code> \u2192 <code>get_by_parent_id()</code></li> <li>Renamed <code>tags.get_by_tag()</code> \u2192 <code>get_by_name()</code></li> <li>Renamed all <code>collection.collection_exists()</code> \u2192 <code>collection.exists()</code></li> <li>Renamed <code>InventoryInformation</code> model to:</li> <li><code>TaskInventoryInformation</code></li> <li><code>PropertyDataInventoryInformation</code></li> <li>Renamed <code>templates</code> module to <code>custom_templates</code></li> </ul>"},{"location":"concepts/","title":"Concepts","text":"<p>This document outlines the core concepts used throughout the Albert Python SDK. Understanding these concepts will help you use the SDK more effectively and customize your integrations with the Albert platform.</p>"},{"location":"concepts/#resource-models","title":"Resource Models","text":"<p>Resource Models represent individual entities in the Albert API, such as <code>InventoryItem</code>, <code>Project</code>, <code>Company</code>, <code>Tag</code>, <code>User</code>, and many more. These models are implemented using Pydantic and define the structure of the data being exchanged with the API.</p> <p>Each model supports validation, serialization, and automatic handling of nested objects.</p>"},{"location":"concepts/#example","title":"Example","text":"<pre><code>from albert.resources.inventory import InventoryItem, InventoryCategory\n\nitem = InventoryItem(\n    name=\"Goggles\",\n    description=\"Safety Equipment\",\n    category=InventoryCategory.EQUIPMENT\n)\n</code></pre>"},{"location":"concepts/#resource-collections","title":"Resource Collections","text":"<p>Each Resource Model has a corresponding Collection that acts as its manager. These collections expose methods to interact with the Albert backend APIs.</p>"},{"location":"concepts/#common-methods","title":"Common Methods","text":"<ul> <li><code>create()</code> \u2013 Create a new resource.</li> <li><code>get_by_id()</code> \u2013 Retrieve a specific resource by its ID.</li> <li><code>get_all()</code> \u2013 List all matching resources.</li> <li><code>search()</code> \u2013 Perform a lightweight search, returns partial records.</li> <li><code>update()</code> \u2013 Modify a resource.</li> <li><code>delete()</code> \u2013 Remove a resource.</li> </ul>"},{"location":"concepts/#example_1","title":"Example","text":"<pre><code>from albert import Albert\n\nclient = Albert.from_token(token=\"your.jwt.token\")\nall_projects = client.projects.get_all()\n</code></pre>"},{"location":"concepts/#entitylink-and-serializeasentitylink","title":"EntityLink and SerializeAsEntityLink","text":"<p>The Albert API represents foreign key relationships using minimal JSON objects like <code>{ \"id\": \"abc123\" }</code>. This pattern is modeled using the <code>EntityLink</code> class.</p> <p>The SDK simplifies this using <code>SerializeAsEntityLink[T]</code>, which accepts either the full object or just an <code>EntityLink</code>, and handles the conversion internally.</p>"},{"location":"concepts/#example_2","title":"Example","text":"<pre><code>from albert.resources.project import Project\nfrom albert.resources.base import EntityLink\n\n# Directly use EntityLink\nproject = Project(\n    description=\"Example\",\n    locations=[EntityLink(id=\"loc123\")]\n)\n\n# Or pass full object and let SDK convert\nlocation = client.locations.get_by_id(\"loc123\")\nproject = Project(\n    description=\"Example\",\n    locations=[location]  # Automatically converted\n)\n</code></pre>"},{"location":"concepts/#authentication","title":"Authentication","text":"<p>The SDK supports multiple authentication flows:</p> <ul> <li><code>from_token(...)</code> \u2013 Use a static JWT token.</li> <li><code>client_credentials=...</code> \u2013 Use OAuth2 Client ID and Secret.</li> <li><code>auth_manager=AlbertSSOClient(...)</code> \u2013 Use interactive browser-based SSO.</li> </ul> <p>Each authenticated <code>Albert</code> instance provides access to all resource collections.</p>"},{"location":"concepts/#metadata-and-custom-fields","title":"Metadata and Custom Fields","text":"<p><code>CustomFields</code> allow you to store custom metadata on a <code>Project</code>, <code>InventoryItem</code>, <code>User</code>, <code>BaseTask</code> (Tasks), and <code>Lot</code>. The <code>FieldType</code> used determines the shape of the metadata field's value. If the <code>FieldType</code> is <code>LIST</code>, then the <code>FieldCategory</code> defines the ACL needed to add new allowed items to the given list. A <code>FieldCategory.USER_DEFINED</code> allows general users to add new items to the list whereas <code>FieldCategory.BUSINESS_DEFINED</code> allows only admin users to add new allowed values.</p>"},{"location":"concepts/#creating-custom-fields","title":"Creating Custom Fields","text":"<pre><code>from albert import Albert\nfrom albert.resources.custom_fields import CustomField, FieldCategory, FieldType, ServiceType\nfrom albert.resources.lists import ListItem\nfrom albert.resources.project import Project\n\nstage_gate_field = CustomField(\n    name=\"stage_gate_status\",\n    display_name=\"Stage Gate\",\n    field_type=FieldType.LIST,\n    service=ServiceType.PROJECTS,\n    min=1,\n    max=1,\n    category=FieldCategory.BUSINESS_DEFINED\n)\n\njustification_field = CustomField(\n    name=\"justification\",\n    display_name=\"Project Justification\",\n    field_type=FieldType.STRING,\n    service=ServiceType.PROJECTS,\n)\n\nclient = Albert()\n\nclient.custom_fields.create(stage_gate_field)\nclient.custom_fields.create(justification_field)\n\nstages = [\n    \"1. Discovery\",\n    \"2. Concept Validation\",\n    \"3. Proof of Concept\",\n    \"4. Prototype Development\",\n    \"5. Preliminary Evaluation\",\n    \"6. Feasibility Study\",\n    \"7. Optimization\",\n    \"8. Scale-Up\",\n    \"9. Regulatory Assessment\",\n]\n\nfor s in stages:\n    item = ListItem(\n        name=s,\n        category=stage_gate_field.category,\n        list_type=stage_gate_field.name,\n    )\n    client.lists.create(list_item=item)\n\np = Project(\n    description=\"Example project\",\n    locations=[next(client.locations.get_all(name=\"My Location\"))],\n    metadata={\n        stage_gate_field.name: [client.lists.get_matching_item(list_type=stage_gate_field.name, name=stages[0]).to_entity_link()],\n        justification_field.name: \"To show an example of using custom fields.\"\n    }\n    # Note: the values of list metadata fields are list[EntityLink]\n)\n</code></pre>"},{"location":"concepts/#partial-vs-full-records","title":"Partial vs Full Records","text":"<ul> <li><code>search()</code> returns partial records for performance. These contain minimal fields.</li> <li><code>get_all()</code> or <code>get_by_id()</code> return fully hydrated records.</li> </ul> <p>This allows faster operations when full data isn't needed.</p> <p>Warning</p> <p>Use <code>get_all()</code> or <code>get_by_ids()</code> when you need complete information. <code>search()</code> is optimized for speed and returns partial data.</p>"},{"location":"concepts/#pagination","title":"Pagination","text":"<p>Many methods in the SDK support pagination via the <code>max_items</code> parameter. The SDK handles pagination behind the scenes to return a complete list.</p> <pre><code>projects = client.projects.get_all(max_items=200)\n</code></pre> <p>Use <code>search()</code> + <code>max_items</code> when working with large datasets.</p>"},{"location":"concepts/#tagging","title":"Tagging","text":"<p>Some resources like InventoryItems and Projects support tags. Tags are strings and can be freely defined by users.</p> <pre><code>item = InventoryItem(\n    name=\"Gloves\",\n    tags=[\"safety\", \"lab\"]\n)\n</code></pre> <p>Tags are searchable and help categorize content.</p>"},{"location":"concepts/#summary","title":"Summary","text":"<p>Concepts you should know:</p> Concept Purpose Resource Models Define the structure of data entities Resource Collections Manage CRUD operations for each model EntityLink Represents foreign key references Custom Fields &amp; Lists Add structured metadata to resources SerializeAsEntityLink Allows transparent references or links Authentication Supports static token, OAuth2, and SSO Partial Records Lightweight search results Tags and Metadata Categorize and extend data <p>These concepts form the foundation of working effectively with the Albert SDK.</p>"},{"location":"configuration/","title":"Configuration","text":"<p>This page describes all environment variables supported by the Albert Python SDK for customizing runtime behavior.</p>"},{"location":"configuration/#albert_log_level","title":"ALBERT_LOG_LEVEL","text":"<p>Sets the log level for SDK output.</p> <ul> <li>Default: <code>WARNING</code></li> <li>Supported values (case-insensitive):<ul> <li><code>DEBUG</code></li> <li><code>INFO</code></li> <li><code>WARNING</code></li> <li><code>ERROR</code></li> <li><code>CRITICAL</code></li> </ul> </li> </ul> <p>If an invalid value is provided, it falls back to <code>WARNING</code> and emits a warning.</p>"},{"location":"configuration/#examples","title":"Examples","text":"macOS / LinuxWindows (CMD)Windows (PowerShell) <pre><code>export ALBERT_LOG_LEVEL=INFO\n\nALBERT_LOG_LEVEL=DEBUG python my_script.py\n</code></pre> <pre><code>set ALBERT_LOG_LEVEL=DEBUG\n\nsetx ALBERT_LOG_LEVEL INFO\n</code></pre> <pre><code>$env:ALBERT_LOG_LEVEL=\"DEBUG\"\n</code></pre>"},{"location":"configuration/#albert_base_url","title":"ALBERT_BASE_URL","text":"<p>Overrides the default Albert backend base URL (defaults to <code>https://app.albertinvent.com</code>).</p> <pre><code>export ALBERT_BASE_URL=https://app.albertinvent.com\n</code></pre> <p>Used by all client authentication methods.</p>"},{"location":"configuration/#albert_client_id-and-albert_client_secret","title":"ALBERT_CLIENT_ID and ALBERT_CLIENT_SECRET","text":"<p>Used for OAuth2 Client Credentials login.</p> <pre><code>from albert import AlbertClientCredentials\n\nclient = Albert(\n    client_credentials=AlbertClientCredentials.from_env()\n)\n</code></pre> <p>These variables are only needed if you're authenticating using client credentials, not a token or SSO.</p> <pre><code>export ALBERT_CLIENT_ID=my-client-id\nexport ALBERT_CLIENT_SECRET=my-client-secret\n</code></pre>"},{"location":"configuration/#summary","title":"Summary","text":"Variable Purpose Used By <code>ALBERT_LOG_LEVEL</code> Controls SDK logging level All SDK users <code>ALBERT_BASE_URL</code> Overrides the base URL for API requests All authentication modes <code>ALBERT_CLIENT_ID</code> OAuth2 client ID for authentication <code>AlbertClientCredentials</code> <code>ALBERT_CLIENT_SECRET</code> OAuth2 client secret for authentication <code>AlbertClientCredentials</code> <p>These variables are all optional but provide convenience for automation, CI pipelines, and local testing.</p>"},{"location":"credentials/","title":"Albert Client Credentials","text":""},{"location":"credentials/#albert.AlbertClientCredentials","title":"albert.AlbertClientCredentials","text":"<p>               Bases: <code>BaseAlbertModel</code>, <code>AuthManager</code></p> <p>Client credentials manager for programmatic OAuth2 access to the Albert API.</p> <p>This class implements the OAuth2 Client Credentials flow, allowing automated (non-interactive) systems to authenticate securely using a client ID and secret.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The client ID used for authentication.</p> <code>secret</code> <code>SecretStr</code> <p>The client secret used for authentication.</p> <code>base_url</code> <code>str</code> <p>The base URL of the Albert API.</p> Usage <pre><code>creds = AlbertClientCredentials(\n    id=\"your-client-id\",\n    secret=SecretStr(\"your-client-secret\"),\n    base_url=\"https://app.albertinvent.com\",\n)\nclient = Albert(auth_manager=creds)\nclient.roles.get_all()\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"Client credentials manager for programmatic OAuth2 access to the Albert API.\\n\\nThis class implements the OAuth2 Client Credentials flow, allowing automated\\n(non-interactive) systems to authenticate securely using a client ID and secret.\\n\\nAttributes\\n----------\\nid : str\\n    The client ID used for authentication.\\nsecret : SecretStr\\n    The client secret used for authentication.\\nbase_url : str\\n    The base URL of the Albert API.\\n\\nUsage\\n-----\\n```\\ncreds = AlbertClientCredentials(\\n    id=\\\"your-client-id\\\",\\n    secret=SecretStr(\\\"your-client-secret\\\"),\\n    base_url=\\\"https://app.albertinvent.com\\\",\\n)\\nclient = Albert(auth_manager=creds)\\nclient.roles.get_all()\\n```\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"secret\": {\n      \"format\": \"password\",\n      \"title\": \"Secret\",\n      \"type\": \"string\",\n      \"writeOnly\": true\n    },\n    \"base_url\": {\n      \"title\": \"Base Url\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"secret\"\n  ],\n  \"title\": \"AlbertClientCredentials\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>_token_info</code>                 (<code>OAuthTokenInfo | None</code>)             </li> <li> <code>_refresh_time</code>                 (<code>datetime | None</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>secret</code>                 (<code>SecretStr</code>)             </li> <li> <code>base_url</code>                 (<code>str</code>)             </li> </ul>"},{"location":"credentials/#albert.AlbertClientCredentials.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"credentials/#albert.AlbertClientCredentials.secret","title":"secret","text":"<pre><code>secret: SecretStr\n</code></pre>"},{"location":"credentials/#albert.AlbertClientCredentials.base_url","title":"base_url","text":"<pre><code>base_url: str\n</code></pre>"},{"location":"credentials/#albert.AlbertClientCredentials.oauth_token_url","title":"oauth_token_url","text":"<pre><code>oauth_token_url: str\n</code></pre> <p>Return the full URL to the OAuth token endpoint.</p>"},{"location":"credentials/#albert.AlbertClientCredentials.from_env","title":"from_env","text":"<pre><code>from_env(\n    *,\n    base_url_env: str = \"ALBERT_BASE_URL\",\n    client_id_env: str = \"ALBERT_CLIENT_ID\",\n    client_secret_env: str = \"ALBERT_CLIENT_SECRET\",\n) -&gt; AlbertClientCredentials | None\n</code></pre> <p>Create <code>AlbertClientCredentials</code> from environment variables.</p> <p>Returns None if any of the required environment variables are missing.</p> <p>Parameters:</p> Name Type Description Default <code>base_url_env</code> <code>str</code> <p>Name of the environment variable containing the base URL (defaults to \"ALBERT_BASE_URL\").</p> <code>'ALBERT_BASE_URL'</code> <code>client_id_env</code> <code>str</code> <p>Name of the environment variable containing the client ID (defaults to \"ALBERT_CLIENT_ID\").</p> <code>'ALBERT_CLIENT_ID'</code> <code>client_secret_env</code> <code>str</code> <p>Name of the environment variable containing the client secret (defaults to \"ALBERT_CLIENT_SECRET\").</p> <code>'ALBERT_CLIENT_SECRET'</code> <p>Returns:</p> Type Description <code>AlbertClientCredentials | None</code> <p>The credentials instance if all environment variables are present; otherwise, None.</p> Source code in <code>src/albert/core/auth/credentials.py</code> <pre><code>@classmethod\ndef from_env(\n    cls,\n    *,\n    base_url_env: str = \"ALBERT_BASE_URL\",\n    client_id_env: str = \"ALBERT_CLIENT_ID\",\n    client_secret_env: str = \"ALBERT_CLIENT_SECRET\",\n) -&gt; AlbertClientCredentials | None:\n    \"\"\"\n    Create `AlbertClientCredentials` from environment variables.\n\n    Returns None if any of the required environment variables are missing.\n\n    Parameters\n    ----------\n    base_url_env : str\n        Name of the environment variable containing the base URL\n        (defaults to \"ALBERT_BASE_URL\").\n    client_id_env : str\n        Name of the environment variable containing the client ID\n        (defaults to \"ALBERT_CLIENT_ID\").\n    client_secret_env : str\n        Name of the environment variable containing the client secret\n        (defaults to \"ALBERT_CLIENT_SECRET\").\n\n    Returns\n    -------\n    AlbertClientCredentials | None\n        The credentials instance if all environment variables are present;\n        otherwise, None.\n    \"\"\"\n    base_url = os.getenv(base_url_env)\n    client_id = os.getenv(client_id_env)\n    client_secret = os.getenv(client_secret_env)\n\n    if client_id and client_secret and base_url:\n        return cls(\n            id=client_id,\n            secret=SecretStr(client_secret),\n            base_url=base_url,\n        )\n</code></pre>"},{"location":"credentials/#albert.AlbertClientCredentials.get_access_token","title":"get_access_token","text":"<pre><code>get_access_token() -&gt; str\n</code></pre> <p>Return a valid access token, refreshing it if needed.</p> Source code in <code>src/albert/core/auth/credentials.py</code> <pre><code>def get_access_token(self) -&gt; str:\n    \"\"\"Return a valid access token, refreshing it if needed.\"\"\"\n    if self._requires_refresh():\n        self._request_access_token()\n    return self._token_info.access_token\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>Installation is as simple as:</p> pipuv <pre><code>pip install albert\n</code></pre> <pre><code>uv add albert\n</code></pre>"},{"location":"installation/#dependencies","title":"Dependencies","text":"<p>Albert has a few dependencies:</p> <ul> <li>pydantic \u2014 For model validation</li> <li>pandas \u2014 For Data frames</li> </ul> <p>If you\u2019re on Python 3.10+ and already have pip or uv set up, you\u2019re ready to go!</p>"},{"location":"installation/#install-from-repository","title":"Install from repository","text":"<p>And if you prefer to install albert directly from the repository:</p> pipuv <pre><code>pip install 'git+https://github.com/albert-labs/albert-python@main'\n</code></pre> <pre><code>uv add 'git+https://github.com/albert-labs/albert-python@main'\n</code></pre>"},{"location":"migration/","title":"Migration Guide: Alpha \u2192 v1.0.0","text":"<p>Albert <code>v1.0.0</code> introduces a number of changes to the API, including some breaking changes. This guide provides details highlighting the most important changes to help you migrate your code.</p> <p>If you run into any issues, please open a GitHub issue and use the <code>bug v1</code> label. This helps us track problems more efficiently and keep improving the library.</p>"},{"location":"migration/#changes-to-authentication","title":"Changes to Authentication","text":""},{"location":"migration/#unified-authmanager-system","title":"Unified AuthManager system","text":"<p>What changed:</p> <ul> <li> <p>Introduced three built-in auth managers and helper constructors:</p> </li> <li> <p>SSO via a new <code>AlbertSSOClient</code> and <code>Albert.from_sso(...)</code> (new in v1.0.0)</p> </li> <li>Client Credentials via <code>AlbertClientCredentials</code> and <code>Albert.from_client_credentials(...)</code></li> <li> <p>Static Token via <code>token</code> parameter, <code>ALBERT_TOKEN</code> env var, or <code>Albert.from_token(...)</code></p> </li> <li> <p>Deprecated the <code>client_credentials</code> and <code>token</code> parameters in <code>Albert(..)</code>, replaced by the <code>auth_manager</code> parameter.</p> </li> </ul> <p>How to migrate:</p> <ol> <li> <p>SSO (browser-based login) \u2014 new feature</p> <pre><code>from albert import Albert\n\n# v1.0.0 SSO helper opens a browser for authentication\nclient = Albert.from_sso(\n    email=\"yourname@albertinvent.com\",\n    base_url=\"https://app.albertinvent.com\"\n)\n</code></pre> </li> <li> <p>Client Credentials (service-to-service)</p> <pre><code>from albert import Albert, AlbertClientCredentials\n\n# alpha: passed in client_credentials param\n# client = Albert(client_credentials=ClientCredentials(...))\n\n# v1.0.0: use from_client_credentials helper\nclient = Albert.from_client_credentials(\n    client_id=CLIENT_ID,\n    client_secret=CLIENT_SECRET,\n    base_url=\"https://app.albertinvent.com\"\n)\n</code></pre> </li> <li> <p>Static Token (environment or direct)</p> <pre><code>from albert import Albert\n\n# alpha: passed token=... directly to constructor\n# client = Albert(token=\"MY_STATIC_TOKEN\")\n\n# v1.0.0: use from_token helper or still pass token\nclient = Albert.from_token(\n    base_url=\"https://app.albertinvent.com\",\n    token=\"MY_STATIC_TOKEN\"\n)\n</code></pre> </li> </ol> <p>For advanced scenarios, you can still construct an auth manager manually and pass it to <code>Albert(auth_manager=...)</code>.</p> <p>For complete details, see the Authentication Guide.</p>"},{"location":"migration/#changes-to-collections","title":"Changes to Collections","text":""},{"location":"migration/#behavior-change-to-create-and-new-get_or_create","title":"Behavior change to <code>create()</code> and new <code>get_or_create()</code>","text":"<p>What changed:</p> <ul> <li><code>create()</code> no longer checks for existing entities and will raise an error if the entity already exists.</li> <li>A new method <code>get_or_create(...)</code> has been introduced to support idempotent creation behavior.</li> </ul> <p>How to migrate:</p> <pre><code>- location = client.locations.create(location=new_location)\n+ location = client.locations.get_or_create(location=new_location)\n</code></pre> <p>Use <code>create()</code> only when you are confident the entity does not already exist.</p>"},{"location":"migration/#tagscollection-get_by_tag-renamed-to-get_by_name","title":"TagsCollection: <code>get_by_tag()</code> renamed to <code>get_by_name()</code>","text":"<p>What changed:</p> <ul> <li>Renamed <code>tags.get_by_tag(tag=...)</code> to <code>tags.get_by_name(name=...)</code> for clearer semantics and naming consistency.</li> </ul> <p>How to migrate:</p> <pre><code>- tag = client.tags.get_by_tag(tag=\"sustainability\")\n+ tag = client.tags.get_by_name(name=\"sustainability\")\n</code></pre>"},{"location":"migration/#notescollection-list-replaced-with-get_by_parent_id","title":"NotesCollection: <code>list()</code> replaced with <code>get_by_parent_id()</code>","text":"<p>What changed:</p> <ul> <li>The <code>list()</code> method has been removed from <code>NotesCollection</code>.</li> <li>Use <code>get_by_parent_id(parent_id=...)</code> to retrieve notes for a specific parent object.</li> </ul> <p>How to migrate:</p> <pre><code>- results = list(client.notes.list(parent_id=parent_id))\n+ results = list(client.notes.get_by_parent_id(parent_id=parent_id))\n</code></pre>"},{"location":"migration/#standardized-exists-method-across-collections","title":"Standardized <code>exists()</code> method across collections","text":"<p>What changed:</p> <ul> <li>Renamed all <code>collection.collection_exists()</code> methods to <code>collection.exists()</code> for consistency.</li> <li>For example, <code>tags.tags_exists()</code> is now <code>tags.exists()</code>.</li> </ul> <p>How to migrate:</p> <pre><code>- company_exists = client.companies.company_exists(name=\"ACME\", exact_match=True)\n+ company_exists = client.companies.exists(name=\"ACME\", exact_match=True)\n</code></pre>"},{"location":"migration/#deprecation-of-list-methods","title":"Deprecation of <code>list()</code> methods","text":"<p>What changed:</p> <ul> <li>Deprecated all <code>list()</code> methods across collections in favor of two new patterns:</li> <li><code>get_all()</code> returns detailed (hydrated) resource entities.</li> <li><code>search()</code> returns partial (unhydrated) entities optimized for performance.</li> <li>Added support for <code>.hydrate()</code> on search results to convert partial resources into fully populated ones.</li> </ul> <p>How to migrate:</p> <pre><code>- project_list = list(client.projects.list())\n+ project_list = list(client.projects.get_all(max_items=10))\n\n- project_matches = list(client.projects.list(status=\"Active\"))\n+ project_matches = list(client.projects.search(status=\"Active\", max_items=10))\n</code></pre> <p>Optional: Hydrate individual items from <code>search()</code> results:</p> <pre><code>project = list(client.projects.search(max_items=1))[0]\nproject_full = project.hydrate()\n</code></pre>"},{"location":"migration/#pagination-behavior-change","title":"Pagination behavior change","text":"<p>What changed:</p> <ul> <li>Added a <code>max_items</code> parameter to all <code>get_all()</code> and <code>search()</code> methods:</li> <li><code>max_items</code> : int, optional     Maximum number of items to return in total. If <code>None</code>, fetches all available items.</li> <li>You no longer need to slice iterators or use <code>itertools.islice</code> to control result length.</li> </ul> <p>How to migrate:</p> <pre><code># Fetch up to 10 items, fetching results in pages of 5\nprojects = list(client.projects.get_all(max_items=10))\n\n# The same applies to search() as well\nsearch_results = list(client.projects.search(status=\"Active\", max_items=20))\n</code></pre>"},{"location":"migration/#batchdatacollection-get-renamed-to-get_by_id","title":"BatchDataCollection: <code>get</code> renamed to <code>get_by_id</code>","text":"<p>What changed:</p> <ul> <li>The <code>BatchDataCollection.get(id)</code> method has been renamed to <code>get_by_id(id)</code> for clarity and consistency.</li> </ul> <p>How to migrate:</p> <pre><code>- item = client.batch_data.get(id=\"123\")\n+ item = client.batch_data.get_by_id(id=\"123\")\n</code></pre>"},{"location":"migration/#changes-to-resources","title":"Changes to Resources","text":""},{"location":"migration/#renamed-inventoryinformation-model","title":"Renamed <code>InventoryInformation</code> model","text":"<p>What changed:</p> <ul> <li>The <code>InventoryInformation</code> model was split into two more specific models:</li> <li><code>TaskInventoryInformation</code></li> <li><code>PropertyDataInventoryInformation</code></li> </ul> <p>How to migrate:</p> <ul> <li>Replace all references to <code>InventoryInformation</code> with the appropriate specific model.</li> <li>Choose <code>TaskInventoryInformation</code> for task-based inventory data.</li> <li>Choose <code>PropertyDataInventoryInformation</code> for property-based inventory data.</li> </ul>"},{"location":"migration/#other-changes","title":"Other Changes","text":""},{"location":"migration/#resourcehydrate-for-partial-resource-enrichment","title":"<code>resource.hydrate()</code> for partial resource enrichment","text":"<p>What changed:</p> <ul> <li>Added <code>hydrate()</code> method to partial resources returned from <code>search()</code>.</li> <li>This allows upgrading an unhydrated object (e.g., <code>ProjectSearchItem</code>) into its full hydrated form (e.g., <code>Project</code>) using its <code>id</code>.</li> </ul> <p>How to use:</p> <pre><code># Perform a search (returns partial/unhydrated resources)\nproject_stub = list(client.projects.search(max_items=1))[0]\n\n# Hydrate it to get full project details\nfull_project = project_stub.hydrate()\n\nprint(full_project.name)\nprint(full_project.description)\n</code></pre> <p>Notes:</p> <ul> <li><code>hydrate()</code> requires the resource to have a valid <code>id</code> and a bound collection.</li> <li>Only collections that implement <code>get_by_id(id=...)</code> support hydration.</li> </ul>"},{"location":"migration/#renamed-templates-module-to-custom_templates","title":"Renamed <code>templates</code> module to <code>custom_templates</code>","text":"<p>What changed:</p> <p>The <code>templates</code> module is now <code>custom_templates</code>.</p> <p>How to use:</p> <pre><code>- client.templates.get_by_id(id=\"xxx\")\n+ client.custom_templates.get_by_id(id=\"xxx\")\n</code></pre>"},{"location":"sso/","title":"Albert SSO Client","text":""},{"location":"sso/#albert.AlbertSSOClient","title":"albert.AlbertSSOClient","text":"<p>               Bases: <code>BaseAlbertModel</code>, <code>AuthManager</code></p> <p>OAuth2 client for performing Authorization Code Flow with the Albert API.</p> <p>This client opens a browser-based SSO login flow and handles token acquisition and refresh using a local redirect server.</p> <p>If <code>base_url</code> is not provided, it defaults to the value of the environment variable <code>ALBERT_BASE_URL</code> or <code>https://app.albertinvent.com</code>.</p> <p>Important</p> <p>You must call <code>.authenticate()</code> before passing this client to <code>Albert(auth_manager=...)</code> to ensure the token is acquired and ready for use.</p> <p>Attributes:</p> Name Type Description <code>base_url</code> <code>str</code> <p>The base URL of the Albert API.</p> <code>email</code> <code>str</code> <p>The email address used for initiating the login flow.</p> Usage <pre><code>oauth = AlbertSSOClient(\n    email=\"user@example.com\",\n)\noauth.authenticate()\nclient = Albert(auth_manager=oauth)\nclient.roles.get_all()\n</code></pre> Show JSON schema: <pre><code>{\n  \"description\": \"OAuth2 client for performing Authorization Code Flow with the Albert API.\\n\\nThis client opens a browser-based SSO login flow and handles token acquisition\\nand refresh using a local redirect server.\\n\\nIf `base_url` is not provided, it defaults to the value of the environment\\nvariable `ALBERT_BASE_URL` or `https://app.albertinvent.com`.\\n\\n!!! important\\n    You **must call** `.authenticate()` before passing this client to `Albert(auth_manager=...)`\\n    to ensure the token is acquired and ready for use.\\n\\nAttributes\\n----------\\nbase_url : str\\n    The base URL of the Albert API.\\nemail : str\\n    The email address used for initiating the login flow.\\n\\nUsage\\n-----\\n```\\noauth = AlbertSSOClient(\\n    email=\\\"user@example.com\\\",\\n)\\noauth.authenticate()\\nclient = Albert(auth_manager=oauth)\\nclient.roles.get_all()\\n```\",\n  \"properties\": {\n    \"base_url\": {\n      \"title\": \"Base Url\",\n      \"type\": \"string\"\n    },\n    \"email\": {\n      \"title\": \"Email\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"email\"\n  ],\n  \"title\": \"AlbertSSOClient\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>_token_info</code>                 (<code>OAuthTokenInfo | None</code>)             </li> <li> <code>_refresh_time</code>                 (<code>datetime | None</code>)             </li> <li> <code>base_url</code>                 (<code>str</code>)             </li> <li> <code>email</code>                 (<code>str</code>)             </li> </ul>"},{"location":"sso/#albert.AlbertSSOClient.base_url","title":"base_url","text":"<pre><code>base_url: str\n</code></pre>"},{"location":"sso/#albert.AlbertSSOClient.email","title":"email","text":"<pre><code>email: str\n</code></pre>"},{"location":"sso/#albert.AlbertSSOClient.refresh_token_url","title":"refresh_token_url","text":"<pre><code>refresh_token_url: str\n</code></pre>"},{"location":"sso/#albert.AlbertSSOClient.authenticate","title":"authenticate","text":"<pre><code>authenticate(\n    minimum_port: int = 5000,\n    maximum_port: int | None = None,\n    tenant_id: str | None = None,\n    timeout: int = 5,\n) -&gt; OAuthTokenInfo\n</code></pre> <p>Launch an interactive browser-based SSO login and return an OAuth token.</p> <p>This method starts a temporary local HTTP server, opens the SSO login URL in the default browser, and waits for the authentication redirect to capture the refresh token.</p> <p>Parameters:</p> Name Type Description Default <code>minimum_port</code> <code>int</code> <p>The starting port to attempt for the local HTTP redirect server (default is 5000).</p> <code>5000</code> <code>maximum_port</code> <code>int | None</code> <p>The maximum port to try if the <code>minimum_port</code> is unavailable. If None, only the minimum port will be tried.</p> <code>None</code> <code>tenant_id</code> <code>str | None</code> <p>Optional tenant ID to scope the SSO login request.</p> <code>None</code> <p>Returns:</p> Type Description <code>OAuthTokenInfo</code> <p>The initial token info containing the refresh token.</p> Source code in <code>src/albert/core/auth/sso.py</code> <pre><code>def authenticate(\n    self,\n    minimum_port: int = 5000,\n    maximum_port: int | None = None,\n    tenant_id: str | None = None,\n    timeout: int = 5,\n) -&gt; OAuthTokenInfo:\n    \"\"\"\n    Launch an interactive browser-based SSO login and return an OAuth token.\n\n    This method starts a temporary local HTTP server, opens the SSO login URL\n    in the default browser, and waits for the authentication redirect to capture\n    the refresh token.\n\n    Parameters\n    ----------\n    minimum_port : int, optional\n        The starting port to attempt for the local HTTP redirect server (default is 5000).\n    maximum_port : int | None, optional\n        The maximum port to try if the `minimum_port` is unavailable. If None, only the\n        minimum port will be tried.\n    tenant_id : str | None, optional\n        Optional tenant ID to scope the SSO login request.\n\n    Returns\n    -------\n    OAuthTokenInfo\n        The initial token info containing the refresh token.\n    \"\"\"\n    self._validate_email(email=self.email, tenant_id=tenant_id)\n    with local_http_server(\n        minimum_port=minimum_port,\n        maximum_port=maximum_port,\n        timeout=timeout,\n    ) as (server, port):\n        login_url = self._build_login_url(port=port, tenant_id=tenant_id)\n        webbrowser.open(login_url)\n        # Block here until one request arrives at localhost:port/?token=\u2026\n        server.handle_request()\n        refresh_token = server.token\n        if not refresh_token:\n            raise AlbertAuthError(\"SSO Login failed! Please try again.\")\n\n    self._token_info = OAuthTokenInfo(\n        refresh_token=refresh_token,\n        tenant_id=tenant_id.upper() if tenant_id else None,\n    )\n    return self._token_info\n</code></pre>"},{"location":"sso/#albert.AlbertSSOClient.get_access_token","title":"get_access_token","text":"<pre><code>get_access_token() -&gt; str\n</code></pre> <p>Return a valid access token, refreshing it if needed.</p> Source code in <code>src/albert/core/auth/sso.py</code> <pre><code>def get_access_token(self) -&gt; str:\n    \"\"\"Return a valid access token, refreshing it if needed.\"\"\"\n    if not self._token_info or not self._token_info.refresh_token:\n        raise AlbertAuthError(\"Client not authenticated. Call `.authenticate()` first.\")\n    if self._requires_refresh():\n        self._request_access_token()\n    return self._token_info.access_token\n</code></pre>"},{"location":"collections/activities/","title":"Activities","text":""},{"location":"collections/activities/#albert.collections.activities.ActivityCollection","title":"albert.collections.activities.ActivityCollection","text":"<pre><code>ActivityCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>ActivityCollection is a collection class for managing viewing activities across Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_all</code> <p>Lists Activity entities with optional filters</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/activities.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the ActivityCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{ActivityCollection._api_version}/activities\"\n</code></pre>"},{"location":"collections/activities/#albert.collections.activities.ActivityCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/activities'\n</code></pre>"},{"location":"collections/activities/#albert.collections.activities.ActivityCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    type: ActivityType,\n    id: str | None = None,\n    start_date: date | None = None,\n    end_date: date | None = None,\n    operation_id: ActivityOperationId | None = None,\n    action: ActivityAction | None = WRITE,\n    order_by: OrderBy | None = DESCENDING,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Activity]\n</code></pre> <p>Lists Activity entities with optional filters</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>ActivityType</code> <p>The type of Id for which activities will be fetched.</p> required <code>start_key</code> <code>str | None</code> <p>The primary key of the first item that this operation will evaluate.</p> <code>None</code> <code>id</code> <code>str | None</code> <p>Unique id value for the selected type. This field is not supported for ActivityType.DATE_RANGE type, by default None</p> <code>None</code> <code>start_date</code> <code>date | None</code> <p>The start date of the activities to list, by default None</p> <code>None</code> <code>end_date</code> <code>date | None</code> <p>The end date of the activities to list, by default None</p> <code>None</code> <code>action</code> <code>ActivityAction | None</code> <p>List activities with read/write operations, by default ActivityAction.WRITE</p> <code>WRITE</code> <code>order_by</code> <code>OrderBy | None</code> <p>The order by which to sort the results, by default OrderBy.DESCENDING</p> <code>DESCENDING</code> <code>operation_id</code> <code>ActivityOperationId | None</code> <p>OperationId of id for which activities will be fetched. Applicable only for recency support of sds/bl, by default ActivityOperationId.POST_SDS</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Activity]</code> <p>An iterator of Activity objects.</p> Source code in <code>src/albert/collections/activities.py</code> <pre><code>def get_all(\n    self,\n    *,\n    type: ActivityType,\n    id: str | None = None,\n    start_date: date | None = None,\n    end_date: date | None = None,\n    operation_id: ActivityOperationId | None = None,\n    action: ActivityAction | None = ActivityAction.WRITE,\n    order_by: OrderBy | None = OrderBy.DESCENDING,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Activity]:\n    \"\"\"Lists Activity entities with optional filters\n\n    Parameters\n    ----------\n    type : ActivityType\n        The type of Id for which activities will be fetched.\n    start_key : str | None, optional\n        The primary key of the first item that this operation will evaluate.\n    id : str | None, optional\n        Unique id value for the selected type. This field is not supported for ActivityType.DATE_RANGE type, by default None\n    start_date : date | None, optional\n        The start date of the activities to list, by default None\n    end_date : date | None, optional\n        The end date of the activities to list, by default None\n    action : ActivityAction | None, optional\n        List activities with read/write operations, by default ActivityAction.WRITE\n    order_by : OrderBy | None, optional\n        The order by which to sort the results, by default OrderBy.DESCENDING\n    operation_id : ActivityOperationId | None, optional\n        OperationId of id for which activities will be fetched. Applicable only for recency support of sds/bl, by default ActivityOperationId.POST_SDS\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[Activity]\n        An iterator of Activity objects.\n    \"\"\"\n    params = {\n        \"type\": type,\n        \"startKey\": start_key,\n        \"id\": id,\n        \"startDate\": start_date,\n        \"endDate\": end_date,\n        \"action\": action,\n        \"orderBy\": order_by,\n        \"operationId\": operation_id,\n    }\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [Activity(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/attachments/","title":"Attachments","text":""},{"location":"collections/attachments/#albert.collections.attachments.AttachmentCollection","title":"albert.collections.attachments.AttachmentCollection","text":"<pre><code>AttachmentCollection(*, session)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>AttachmentCollection is a collection class for managing Attachment entities in the Albert platform.</p> <p>Methods:</p> Name Description <code>get_by_id</code> <p>Retrieves an attachment by its ID.</p> <code>get_by_parent_ids</code> <p>Retrieves attachments by their parent IDs.</p> <code>attach_file_to_note</code> <p>Attaches an already uploaded file to a note.</p> <code>delete</code> <p>Deletes an attachment by ID.</p> <code>upload_and_attach_file_as_note</code> <p>Uploads a file and attaches it to a new note. A user can be tagged in the note_text string by using f-string and the User.to_note_mention() method.</p> <code>upload_and_attach_sds_to_inventory_item</code> <p>Upload an SDS document and attach it to an inventory item.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/attachments.py</code> <pre><code>def __init__(self, *, session):\n    super().__init__(session=session)\n    self.base_path = f\"/api/{AttachmentCollection._api_version}/attachments\"\n</code></pre>"},{"location":"collections/attachments/#albert.collections.attachments.AttachmentCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/attachments'\n</code></pre>"},{"location":"collections/attachments/#albert.collections.attachments.AttachmentCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: AttachmentId) -&gt; Attachment\n</code></pre> <p>Retrieves an attachment by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>AttachmentId</code> <p>The ID of the attachment to retrieve.</p> required <p>Returns:</p> Type Description <code>Attachment</code> <p>The Attachment object corresponding to the provided ID.</p> Source code in <code>src/albert/collections/attachments.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: AttachmentId) -&gt; Attachment:\n    \"\"\"Retrieves an attachment by its ID.\n\n    Parameters\n    ----------\n    id : AttachmentId\n        The ID of the attachment to retrieve.\n\n    Returns\n    -------\n    Attachment\n        The Attachment object corresponding to the provided ID.\n    \"\"\"\n    response = self.session.get(url=f\"{self.base_path}/{id}\")\n    return Attachment(**response.json())\n</code></pre>"},{"location":"collections/attachments/#albert.collections.attachments.AttachmentCollection.get_by_parent_ids","title":"get_by_parent_ids","text":"<pre><code>get_by_parent_ids(\n    *, parent_ids: list[str]\n) -&gt; dict[str, list[Attachment]]\n</code></pre> <p>Retrieves attachments by their parent IDs.</p> <p>Note: This method returns a dictionary where the keys are parent IDs and the values are lists of Attachment objects associated with each parent ID. If the parent ID has no attachments, it will not be included in the dictionary.</p> <p>If no attachments are found for any of the provided parent IDs, the API response will be an error.</p> <p>Parameters:</p> Name Type Description Default <code>parent_ids</code> <code>list[str]</code> <p>Parent IDs of the objects to which the attachments are linked.</p> required <p>Returns:</p> Type Description <code>dict[str, list[Attachment]]</code> <p>A dictionary mapping parent IDs to lists of Attachment objects associated with each parent ID.</p> Source code in <code>src/albert/collections/attachments.py</code> <pre><code>def get_by_parent_ids(self, *, parent_ids: list[str]) -&gt; dict[str, list[Attachment]]:\n    \"\"\"Retrieves attachments by their parent IDs.\n\n    Note: This method returns a dictionary where the keys are parent IDs\n    and the values are lists of Attachment objects associated with each parent ID.\n    If the parent ID has no attachments, it will not be included in the dictionary.\n\n    If no attachments are found for any of the provided parent IDs,\n    the API response will be an error.\n\n    Parameters\n    ----------\n    parent_ids : list[str]\n        Parent IDs of the objects to which the attachments are linked.\n\n    Returns\n    -------\n    dict[str, list[Attachment]]\n        A dictionary mapping parent IDs to lists of Attachment objects associated with each parent ID.\n    \"\"\"\n    response = self.session.get(url=f\"{self.base_path}/parents\", params={\"id\": parent_ids})\n    response_data = response.json()\n    return {\n        parent[\"parentId\"]: [\n            Attachment(**item, parent_id=parent[\"parentId\"]) for item in parent[\"Items\"]\n        ]\n        for parent in response_data\n    }\n</code></pre>"},{"location":"collections/attachments/#albert.collections.attachments.AttachmentCollection.attach_file_to_note","title":"attach_file_to_note","text":"<pre><code>attach_file_to_note(\n    *,\n    note_id: str,\n    file_name: str,\n    file_key: str,\n    category: FileCategory = OTHER,\n) -&gt; Attachment\n</code></pre> <p>Attaches an already uploaded file to a note.</p> <p>Parameters:</p> Name Type Description Default <code>note_id</code> <code>str</code> <p>The ID of the note to attach the file to.</p> required <code>file_name</code> <code>str</code> <p>The name of the file to attach.</p> required <code>file_key</code> <code>str</code> <p>The unique key of the file to attach (the returned upload name).</p> required <code>category</code> <code>FileCategory</code> <p>The type of file, by default FileCategory.OTHER</p> <code>OTHER</code> <p>Returns:</p> Type Description <code>Attachment</code> <p>The related attachment object.</p> Source code in <code>src/albert/collections/attachments.py</code> <pre><code>def attach_file_to_note(\n    self,\n    *,\n    note_id: str,\n    file_name: str,\n    file_key: str,\n    category: FileCategory = FileCategory.OTHER,\n) -&gt; Attachment:\n    \"\"\"Attaches an already uploaded file to a note.\n\n    Parameters\n    ----------\n    note_id : str\n        The ID of the note to attach the file to.\n    file_name : str\n        The name of the file to attach.\n    file_key : str\n        The unique key of the file to attach (the returned upload name).\n    category : FileCategory, optional\n        The type of file, by default FileCategory.OTHER\n\n    Returns\n    -------\n    Attachment\n        The related attachment object.\n    \"\"\"\n    attachment = Attachment(\n        parent_id=note_id, name=file_name, key=file_key, namespace=\"result\", category=category\n    )\n    response = self.session.post(\n        url=self.base_path,\n        json=attachment.model_dump(by_alias=True, mode=\"json\", exclude_unset=True),\n    )\n    return Attachment(**response.json())\n</code></pre>"},{"location":"collections/attachments/#albert.collections.attachments.AttachmentCollection.delete","title":"delete","text":"<pre><code>delete(*, id: AttachmentId) -&gt; None\n</code></pre> <p>Deletes an attachment by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the attachment to delete.</p> required Source code in <code>src/albert/collections/attachments.py</code> <pre><code>@validate_call\ndef delete(self, *, id: AttachmentId) -&gt; None:\n    \"\"\"Deletes an attachment by ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the attachment to delete.\n    \"\"\"\n    self.session.delete(f\"{self.base_path}/{id}\")\n</code></pre>"},{"location":"collections/attachments/#albert.collections.attachments.AttachmentCollection.upload_and_attach_file_as_note","title":"upload_and_attach_file_as_note","text":"<pre><code>upload_and_attach_file_as_note(\n    parent_id: str,\n    file_data: IO,\n    note_text: str = \"\",\n    file_name: str = \"\",\n) -&gt; Note\n</code></pre> <p>Uploads a file and attaches it to a new note. A user can be tagged in the note_text string by using f-string and the User.to_note_mention() method. This allows for easy tagging and referencing of users within notes. example: f\"Hello {tagged_user.to_note_mention()}!\"</p> <p>Parameters:</p> Name Type Description Default <code>parent_id</code> <code>str</code> <p>The ID of the parent entity onto which the note will be attached.</p> required <code>file_data</code> <code>IO</code> <p>The file data to upload.</p> required <code>note_text</code> <code>str</code> <p>Any additional text to add to the note, by default \"\"</p> <code>''</code> <code>file_name</code> <code>str</code> <p>The name of the file, by default \"\"</p> <code>''</code> <p>Returns:</p> Type Description <code>Note</code> <p>The created note.</p> Source code in <code>src/albert/collections/attachments.py</code> <pre><code>def upload_and_attach_file_as_note(\n    self, parent_id: str, file_data: IO, note_text: str = \"\", file_name: str = \"\"\n) -&gt; Note:\n    \"\"\"Uploads a file and attaches it to a new note. A user can be tagged in the note_text string by using f-string and the User.to_note_mention() method.\n    This allows for easy tagging and referencing of users within notes. example: f\"Hello {tagged_user.to_note_mention()}!\"\n\n    Parameters\n    ----------\n    parent_id : str\n        The ID of the parent entity onto which the note will be attached.\n    file_data : IO\n        The file data to upload.\n    note_text : str, optional\n        Any additional text to add to the note, by default \"\"\n    file_name : str, optional\n        The name of the file, by default \"\"\n\n    Returns\n    -------\n    Note\n        The created note.\n    \"\"\"\n    file_type = mimetypes.guess_type(file_name)[0]\n    file_collection = self._get_file_collection()\n    note_collection = self._get_note_collection()\n\n    file_collection.sign_and_upload_file(\n        data=file_data,\n        name=file_name,\n        namespace=FileNamespace.RESULT.value,\n        content_type=file_type,\n    )\n    file_info = file_collection.get_by_name(\n        name=file_name, namespace=FileNamespace.RESULT.value\n    )\n    note = Note(\n        parent_id=parent_id,\n        note=note_text,\n    )\n    registered_note = note_collection.create(note=note)\n    self.attach_file_to_note(\n        note_id=registered_note.id,\n        file_name=file_name,\n        file_key=file_info.name,\n    )\n    return note_collection.get_by_id(id=registered_note.id)\n</code></pre>"},{"location":"collections/attachments/#albert.collections.attachments.AttachmentCollection.upload_and_attach_sds_to_inventory_item","title":"upload_and_attach_sds_to_inventory_item","text":"<pre><code>upload_and_attach_sds_to_inventory_item(\n    *,\n    inventory_id: InventoryId,\n    file_sds: Path,\n    revision_date: date,\n    storage_class: str,\n    un_number: str,\n    jurisdiction_code: str = \"US\",\n    language_code: str = \"EN\",\n    hazard_statements: list[HazardStatement] | None = None,\n    hazard_symbols: list[HazardSymbol] | None = None,\n    wgk: str | None = None,\n) -&gt; Attachment\n</code></pre> <p>Upload an SDS document and attach it to an inventory item.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>str</code> <p>Id of Inventory Item to attach SDS to.</p> required <code>file_sds</code> <code>Path</code> <p>Local path to the SDS PDF to upload.</p> required <code>revision_date</code> <code>date</code> <p>Revision date for the SDS. (yyyy-mm-dd)</p> required <code>un_number</code> <code>str</code> <p>The UN number.</p> required <code>storage_class</code> <code>str</code> <p>The Storage Class number.</p> required <code>jurisdiction_code</code> <code>str | None</code> <p>Jurisdiction code associated with the SDS (e.g. <code>US</code>).</p> <code>'US'</code> <code>language_code</code> <code>str</code> <p>Language code for the SDS (e.g. <code>EN</code>).</p> <code>'EN'</code> <code>hazard_statements</code> <code>list[HazardStatement] | None</code> <p>Collection of hazard statements.</p> <code>None</code> <code>wgk</code> <code>str | None</code> <p>WGK classification metadata.</p> <code>None</code> Source code in <code>src/albert/collections/attachments.py</code> <pre><code>@validate_call\ndef upload_and_attach_sds_to_inventory_item(\n    self,\n    *,\n    inventory_id: InventoryId,\n    file_sds: Path,\n    revision_date: date,\n    storage_class: str,\n    un_number: str,\n    jurisdiction_code: str = \"US\",\n    language_code: str = \"EN\",\n    hazard_statements: list[HazardStatement] | None = None,\n    hazard_symbols: list[HazardSymbol] | None = None,\n    wgk: str | None = None,\n) -&gt; Attachment:\n    \"\"\"Upload an SDS document and attach it to an inventory item.\n\n    Parameters\n    ----------\n    inventory_id : str\n        Id of Inventory Item to attach SDS to.\n    file_sds : Path\n        Local path to the SDS PDF to upload.\n    revision_date : date\n        Revision date for the SDS. (yyyy-mm-dd)\n    un_number : str\n        The UN number.\n    storage_class : str\n        The Storage Class number.\n    jurisdiction_code : str | None, optional\n        Jurisdiction code associated with the SDS (e.g. ``US``).\n    language_code : str, optional\n        Language code for the SDS (e.g. ``EN``).\n    hazard_statements : list[HazardStatement] | None, optional\n        Collection of hazard statements.\n    wgk : str | None, optional\n        WGK classification metadata.\n    \"\"\"\n\n    sds_path = file_sds.expanduser()\n    if not sds_path.is_file():\n        raise FileNotFoundError(f\"SDS file not found at '{sds_path}'\")\n\n    content_type = mimetypes.guess_type(sds_path.name)[0] or \"application/pdf\"\n\n    encoded_file_name = quote(sds_path.name)\n    file_key = f\"{inventory_id}/SDS/{encoded_file_name}\"\n\n    file_collection = self._get_file_collection()\n    with sds_path.open(\"rb\") as file_handle:\n        file_collection.sign_and_upload_file(\n            data=file_handle,\n            name=file_key,\n            namespace=FileNamespace.RESULT,\n            content_type=content_type,\n            category=FileCategory.SDS,\n        )\n\n    metadata: dict[str, MetadataItem] = {\n        \"jurisdictionCode\": jurisdiction_code,\n        \"languageCode\": language_code,\n    }\n\n    if revision_date is not None:\n        metadata[\"revisionDate\"] = revision_date.isoformat()\n\n    if hazard_statements:\n        metadata[\"hazardStatement\"] = [\n            statement.model_dump(by_alias=True, exclude_none=True)\n            for statement in hazard_statements\n        ]\n    if hazard_symbols:\n        metadata[\"Symbols\"] = [\n            symbol.model_dump(by_alias=True, exclude_none=True) for symbol in hazard_symbols\n        ]\n\n    if un_number is not None:\n        metadata[\"unNumber\"] = un_number\n    if storage_class is not None:\n        metadata[\"storageClass\"] = storage_class\n    if wgk is not None:\n        metadata[\"wgk\"] = wgk\n\n    payload = {\n        \"parentId\": inventory_id,\n        \"category\": AttachmentCategory.SDS.value,\n        \"name\": encoded_file_name,\n        \"key\": file_key,\n        \"nameSpace\": FileNamespace.RESULT.value,\n        \"Metadata\": metadata,\n    }\n\n    response = self.session.post(self.base_path, json=payload)\n    return Attachment(**response.json())\n</code></pre>"},{"location":"collections/base/","title":"Base","text":""},{"location":"collections/base/#albert.collections.base.BaseCollection","title":"albert.collections.base.BaseCollection","text":"<pre><code>BaseCollection(*, session: AlbertSession)\n</code></pre> <p>BaseCollection is the base class for all collection classes.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert API Session instance.</p> required <p>Attributes:</p> Name Type Description <code>session</code> Source code in <code>src/albert/collections/base.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    self.session = session\n</code></pre>"},{"location":"collections/base/#albert.collections.base.BaseCollection.session","title":"session","text":"<pre><code>session = session\n</code></pre>"},{"location":"collections/batch_data/","title":"Batch Data","text":""},{"location":"collections/batch_data/#albert.collections.batch_data.BatchDataCollection","title":"albert.collections.batch_data.BatchDataCollection","text":"<pre><code>BatchDataCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>BatchDataCollection is a collection class for managing BatchData entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create_batch_data</code> <p>Create a new batch data entry.</p> <code>get_by_id</code> <p>Retrieve BatchData by ID.</p> <code>update_used_batch_amounts</code> <p>Update the used batch amounts for a given task ID.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/batch_data.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the BatchDataCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{BatchDataCollection._api_version}/batchdata\"\n</code></pre>"},{"location":"collections/batch_data/#albert.collections.batch_data.BatchDataCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/batchdata'\n</code></pre>"},{"location":"collections/batch_data/#albert.collections.batch_data.BatchDataCollection.create_batch_data","title":"create_batch_data","text":"<pre><code>create_batch_data(*, task_id: TaskId)\n</code></pre> <p>Create a new batch data entry.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>TaskId</code> <p>The ID of the task for which the batch data is being created.</p> required <p>Returns:</p> Type Description <code>BatchData</code> <p>The created BatchData object.</p> Source code in <code>src/albert/collections/batch_data.py</code> <pre><code>@validate_call\ndef create_batch_data(self, *, task_id: TaskId):\n    \"\"\"\n    Create a new batch data entry.\n\n    Parameters\n    ----------\n    task_id : TaskId\n        The ID of the task for which the batch data is being created.\n\n    Returns\n    -------\n    BatchData\n        The created BatchData object.\n    \"\"\"\n    url = f\"{self.base_path}\"\n    response = self.session.post(url, json={\"parentId\": task_id})\n    return BatchData(**response.json())\n</code></pre>"},{"location":"collections/batch_data/#albert.collections.batch_data.BatchDataCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(\n    *,\n    id: TaskId,\n    type: BatchDataType = TASK_ID,\n    limit: int = 100,\n    start_key: str | None = None,\n    order_by: OrderBy = DESCENDING,\n) -&gt; BatchData\n</code></pre> <p>Retrieve BatchData by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>TaskId</code> <p>Unique Id of the selected type.</p> required <code>type</code> <code>BatchDataType</code> <p>Type of Id for which BatchData will be fetched.</p> <code>TASK_ID</code> <code>limit</code> <code>int</code> <p>The maximum number of list entities to return.</p> <code>100</code> <code>start_key</code> <code>str</code> <p>The primary key of the first item that this operation will evaluate.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>The order by which to sort the results, by default OrderBy.DESCENDING</p> <code>DESCENDING</code> <p>Returns:</p> Type Description <code>BatchData</code> <p>The BatchData object.</p> Source code in <code>src/albert/collections/batch_data.py</code> <pre><code>@validate_call\ndef get_by_id(\n    self,\n    *,\n    id: TaskId,\n    type: BatchDataType = BatchDataType.TASK_ID,\n    limit: int = 100,\n    start_key: str | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n) -&gt; BatchData:\n    \"\"\"\n    Retrieve BatchData by ID.\n\n    Parameters\n    ----------\n    id : TaskId\n        Unique Id of the selected type.\n    type : BatchDataType\n        Type of Id for which BatchData will be fetched.\n    limit : int, optional\n        The maximum number of list entities to return.\n    start_key : str, optional\n        The primary key of the first item that this operation will evaluate.\n    order_by : OrderBy, optional\n        The order by which to sort the results, by default OrderBy.DESCENDING\n    Returns\n    ------\n    BatchData\n        The BatchData object.\n    \"\"\"\n    params = {\n        \"id\": id,\n        \"limit\": limit,\n        \"type\": type,\n        \"startKey\": start_key,\n        \"orderBy\": order_by,\n    }\n    response = self.session.get(self.base_path, params=params)\n    return BatchData(**response.json())\n</code></pre>"},{"location":"collections/batch_data/#albert.collections.batch_data.BatchDataCollection.update_used_batch_amounts","title":"update_used_batch_amounts","text":"<pre><code>update_used_batch_amounts(\n    *,\n    task_id: TaskId,\n    patches: list[BatchValuePatchPayload],\n) -&gt; None\n</code></pre> <p>Update the used batch amounts for a given task ID.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The ID of the task to update.</p> required <code>patches</code> <code>list[BatchValuePatchPayload]</code> <p>The patch payloads containing the data to update.</p> required <p>Returns:</p> Type Description <code>None</code> <p>This method does not return anything.</p> Source code in <code>src/albert/collections/batch_data.py</code> <pre><code>@validate_call\ndef update_used_batch_amounts(\n    self, *, task_id: TaskId, patches: list[BatchValuePatchPayload]\n) -&gt; None:\n    \"\"\"\n    Update the used batch amounts for a given task ID.\n\n    Parameters\n    ----------\n    task_id : str\n        The ID of the task to update.\n    patches : list[BatchValuePatchPayload]\n        The patch payloads containing the data to update.\n\n    Returns\n    -------\n    None\n        This method does not return anything.\n    \"\"\"\n    url = f\"{self.base_path}/{task_id}/values\"\n    self.session.patch(\n        url,\n        json=[\n            patch.model_dump(exclude_none=True, by_alias=True, mode=\"json\")\n            for patch in patches\n        ],\n    )\n</code></pre>"},{"location":"collections/btdataset/","title":"Breakthrough Datasets","text":""},{"location":"collections/btdataset/#albert.collections.btdataset.BTDatasetCollection","title":"albert.collections.btdataset.BTDatasetCollection","text":"<pre><code>BTDatasetCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>BTDatasetCollection is a collection class for managing Breakthrough dataset entities.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Attributes:</p> Name Type Description <code>base_path</code> <code>str</code> <p>The base path for btdataset API requests.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <p>Create a new BTDataset.</p> <code>get_by_id</code> <p>Get a BTDataset by ID.</p> <code>update</code> <p>Update a BTDataset.</p> <code>delete</code> <p>Delete a BTDataset by ID.</p> <code>get_all</code> <p>Get all items from the BTDataset collection.</p> Source code in <code>src/albert/collections/btdataset.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initialize the BTDatasetCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{BTDatasetCollection._api_version}/btdataset\"\n</code></pre>"},{"location":"collections/btdataset/#albert.collections.btdataset.BTDatasetCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/btdataset'\n</code></pre>"},{"location":"collections/btdataset/#albert.collections.btdataset.BTDatasetCollection.create","title":"create","text":"<pre><code>create(*, dataset: BTDataset) -&gt; BTDataset\n</code></pre> <p>Create a new BTDataset.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>BTDataset</code> <p>The BTDataset record to create.</p> required <p>Returns:</p> Type Description <code>BTDataset</code> <p>The created BTDataset.</p> Source code in <code>src/albert/collections/btdataset.py</code> <pre><code>@validate_call\ndef create(self, *, dataset: BTDataset) -&gt; BTDataset:\n    \"\"\"\n    Create a new BTDataset.\n\n    Parameters\n    ----------\n    dataset : BTDataset\n        The BTDataset record to create.\n\n    Returns\n    -------\n    BTDataset\n        The created BTDataset.\n    \"\"\"\n    response = self.session.post(\n        self.base_path,\n        json=dataset.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n    )\n    return BTDataset(**response.json())\n</code></pre>"},{"location":"collections/btdataset/#albert.collections.btdataset.BTDatasetCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: BTDatasetId) -&gt; BTDataset\n</code></pre> <p>Get a BTDataset by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>BTDatasetId</code> <p>The Albert ID of the BTDataset.</p> required <p>Returns:</p> Type Description <code>BTDataset</code> <p>The retrived BTDataset.</p> Source code in <code>src/albert/collections/btdataset.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: BTDatasetId) -&gt; BTDataset:\n    \"\"\"\n    Get a BTDataset by ID.\n\n    Parameters\n    ----------\n    id : BTDatasetId\n        The Albert ID of the BTDataset.\n\n    Returns\n    -------\n    BTDataset\n        The retrived BTDataset.\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    return BTDataset(**response.json())\n</code></pre>"},{"location":"collections/btdataset/#albert.collections.btdataset.BTDatasetCollection.update","title":"update","text":"<pre><code>update(*, dataset: BTDataset) -&gt; BTDataset\n</code></pre> <p>Update a BTDataset.</p> <p>The provided dataset must be registered with an Albert ID.</p> <p>Parameters:</p> Name Type Description Default <code>dataset</code> <code>BTDataset</code> <p>The BTDataset with updated fields.</p> required <p>Returns:</p> Type Description <code>BTDataset</code> <p>The updated BTDataset object.</p> Source code in <code>src/albert/collections/btdataset.py</code> <pre><code>@validate_call\ndef update(self, *, dataset: BTDataset) -&gt; BTDataset:\n    \"\"\"\n    Update a BTDataset.\n\n    The provided dataset must be registered with an Albert ID.\n\n    Parameters\n    ----------\n    dataset : BTDataset\n        The BTDataset with updated fields.\n\n    Returns\n    -------\n    BTDataset\n        The updated BTDataset object.\n    \"\"\"\n    path = f\"{self.base_path}/{dataset.id}\"\n    payload = self._generate_patch_payload(\n        existing=self.get_by_id(id=dataset.id),\n        updated=dataset,\n    )\n    self.session.patch(path, json=payload.model_dump(mode=\"json\", by_alias=True))\n    return self.get_by_id(id=dataset.id)\n</code></pre>"},{"location":"collections/btdataset/#albert.collections.btdataset.BTDatasetCollection.delete","title":"delete","text":"<pre><code>delete(*, id: BTDatasetId) -&gt; None\n</code></pre> <p>Delete a BTDataset by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>BTDatasetId</code> <p>The ID of the BTDataset to delete.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/btdataset.py</code> <pre><code>@validate_call\ndef delete(self, *, id: BTDatasetId) -&gt; None:\n    \"\"\"Delete a BTDataset by ID.\n\n    Parameters\n    ----------\n    id : BTDatasetId\n        The ID of the BTDataset to delete.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.session.delete(f\"{self.base_path}/{id}\")\n</code></pre>"},{"location":"collections/btdataset/#albert.collections.btdataset.BTDatasetCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    name: str | None = None,\n    created_by: str | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[BTDataset]\n</code></pre> <p>Get all items from the BTDataset collection.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Filter datasets by name.</p> <code>None</code> <code>created_by</code> <code>str</code> <p>Filter datasets by the user who created them.</p> <code>None</code> <code>start_key</code> <code>str</code> <p>Start key for paginated results.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[BTDataset]</code> <p>An iterator over BTDataset items.</p> Source code in <code>src/albert/collections/btdataset.py</code> <pre><code>@validate_call\ndef get_all(\n    self,\n    *,\n    name: str | None = None,\n    created_by: str | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[BTDataset]:\n    \"\"\"\n    Get all items from the BTDataset collection.\n\n    Parameters\n    ----------\n    name : str, optional\n        Filter datasets by name.\n    created_by : str, optional\n        Filter datasets by the user who created them.\n    start_key : str, optional\n        Start key for paginated results.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[BTDataset]\n        An iterator over BTDataset items.\n    \"\"\"\n    params = {\n        \"startKey\": start_key,\n        \"createdBy\": created_by,\n        \"name\": name,\n    }\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [BTDataset(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/btinsight/","title":"Breakthrough Insights","text":""},{"location":"collections/btinsight/#albert.collections.btinsight.BTInsightCollection","title":"albert.collections.btinsight.BTInsightCollection","text":"<pre><code>BTInsightCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>BTInsightCollection is a collection class for managing Breakthrough insight entities.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Attributes:</p> Name Type Description <code>base_path</code> <code>str</code> <p>The base path for BTInsight API requests.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <p>Create a new BTInsight.</p> <code>get_by_id</code> <p>Get a BTInsight by ID.</p> <code>search</code> <p>Search for items in the BTInsight collection.</p> <code>update</code> <p>Update a BTInsight.</p> <code>delete</code> <p>Delete a BTInsight by ID.</p> Source code in <code>src/albert/collections/btinsight.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initialize the BTInsightCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{BTInsightCollection._api_version}/btinsight\"\n</code></pre>"},{"location":"collections/btinsight/#albert.collections.btinsight.BTInsightCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/btinsight'\n</code></pre>"},{"location":"collections/btinsight/#albert.collections.btinsight.BTInsightCollection.create","title":"create","text":"<pre><code>create(*, insight: BTInsight) -&gt; BTInsight\n</code></pre> <p>Create a new BTInsight.</p> <p>Parameters:</p> Name Type Description Default <code>insight</code> <code>BTInsight</code> <p>The BTInsight record to create.</p> required <p>Returns:</p> Type Description <code>BTInsight</code> <p>The created BTInsight.</p> Source code in <code>src/albert/collections/btinsight.py</code> <pre><code>@validate_call\ndef create(self, *, insight: BTInsight) -&gt; BTInsight:\n    \"\"\"\n    Create a new BTInsight.\n\n    Parameters\n    ----------\n    insight : BTInsight\n        The BTInsight record to create.\n\n    Returns\n    -------\n    BTInsight\n        The created BTInsight.\n    \"\"\"\n    response = self.session.post(\n        self.base_path,\n        json=insight.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n    )\n    return BTInsight(**response.json())\n</code></pre>"},{"location":"collections/btinsight/#albert.collections.btinsight.BTInsightCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: BTInsightId) -&gt; BTInsight\n</code></pre> <p>Get a BTInsight by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>BTInsightId</code> <p>The Albert ID of the insight.</p> required <p>Returns:</p> Type Description <code>BTInsight</code> <p>The retrived BTInsight.</p> Source code in <code>src/albert/collections/btinsight.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: BTInsightId) -&gt; BTInsight:\n    \"\"\"\n    Get a BTInsight by ID.\n\n    Parameters\n    ----------\n    id : BTInsightId\n        The Albert ID of the insight.\n\n    Returns\n    -------\n    BTInsight\n        The retrived BTInsight.\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    return BTInsight(**response.json())\n</code></pre>"},{"location":"collections/btinsight/#albert.collections.btinsight.BTInsightCollection.search","title":"search","text":"<pre><code>search(\n    *,\n    order_by: OrderBy | None = None,\n    sort_by: str | None = None,\n    text: str | None = None,\n    name: str | list[str] | None = None,\n    state: BTInsightState\n    | list[BTInsightState]\n    | None = None,\n    category: BTInsightCategory\n    | list[BTInsightCategory]\n    | None = None,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[BTInsight]\n</code></pre> <p>Search for items in the BTInsight collection.</p> <p>Parameters:</p> Name Type Description Default <code>order_by</code> <code>OrderBy | None</code> <p>Asc/desc ordering, default None</p> <code>None</code> <code>sort_by</code> <code>str | None</code> <p>Sort field, default None</p> <code>None</code> <code>text</code> <code>str | None</code> <p>Text field in search query, default None</p> <code>None</code> <code>name</code> <code>str | list[str] | None</code> <p>BTInsight name search filter, default None</p> <code>None</code> <code>state</code> <code>BTInsightState | list[BTInsightState] | None</code> <p>BTInsight state search filter, default None</p> <code>None</code> <code>category</code> <code>BTInsightCategory | list[BTInsightCategory] | None</code> <p>BTInsight category search filter, default None</p> <code>None</code> <code>offset</code> <code>int | None</code> <p>Item offset to begin search at, default None</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[BTInsight]</code> <p>An iterator of elements returned by the BTInsight search query.</p> Source code in <code>src/albert/collections/btinsight.py</code> <pre><code>@validate_call\ndef search(\n    self,\n    *,\n    order_by: OrderBy | None = None,\n    sort_by: str | None = None,\n    text: str | None = None,\n    name: str | list[str] | None = None,\n    state: BTInsightState | list[BTInsightState] | None = None,\n    category: BTInsightCategory | list[BTInsightCategory] | None = None,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[BTInsight]:\n    \"\"\"Search for items in the BTInsight collection.\n\n    Parameters\n    ----------\n    order_by : OrderBy | None, optional\n        Asc/desc ordering, default None\n    sort_by : str | None\n        Sort field, default None\n    text : str | None\n        Text field in search query, default None\n    name : str | list[str] | None\n        BTInsight name search filter, default None\n    state : BTInsightState | list[BTInsightState] | None\n        BTInsight state search filter, default None\n    category : BTInsightCategory | list[BTInsightCategory] | None\n        BTInsight category search filter, default None\n    offset : int | None, optional\n        Item offset to begin search at, default None\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[BTInsight]\n        An iterator of elements returned by the BTInsight search query.\n    \"\"\"\n    params = {\n        \"offset\": offset,\n        \"order\": OrderBy(order_by).value if order_by else None,\n        \"sortBy\": sort_by,\n        \"text\": text,\n        \"name\": name,\n    }\n    if state:\n        state = state if isinstance(state, list) else [state]\n        params[\"state\"] = [BTInsightState(x).value for x in state]\n    if category:\n        category = category if isinstance(category, list) else [category]\n        params[\"category\"] = [BTInsightCategory(x).value for x in category]\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/search\",\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [BTInsight(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/btinsight/#albert.collections.btinsight.BTInsightCollection.update","title":"update","text":"<pre><code>update(*, insight: BTInsight) -&gt; BTInsight\n</code></pre> <p>Update a BTInsight.</p> <p>Parameters:</p> Name Type Description Default <code>insight</code> <code>BTInsight</code> <p>The BTInsight to update.</p> required <p>Returns:</p> Type Description <code>BTInsight</code> <p>The updated BTInsight.</p> Source code in <code>src/albert/collections/btinsight.py</code> <pre><code>@validate_call\ndef update(self, *, insight: BTInsight) -&gt; BTInsight:\n    \"\"\"Update a BTInsight.\n\n    Parameters\n    ----------\n    insight : BTInsight\n        The BTInsight to update.\n\n    Returns\n    -------\n    BTInsight\n        The updated BTInsight.\n    \"\"\"\n    path = f\"{self.base_path}/{insight.id}\"\n    payload = self._generate_patch_payload(\n        existing=self.get_by_id(id=insight.id),\n        updated=insight,\n        generate_metadata_diff=False,\n    )\n    self.session.patch(path, json=payload.model_dump(mode=\"json\", by_alias=True))\n    return self.get_by_id(id=insight.id)\n</code></pre>"},{"location":"collections/btinsight/#albert.collections.btinsight.BTInsightCollection.delete","title":"delete","text":"<pre><code>delete(*, id: BTInsightId) -&gt; None\n</code></pre> <p>Delete a BTInsight by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the BTInsight to delete.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/btinsight.py</code> <pre><code>@validate_call\ndef delete(self, *, id: BTInsightId) -&gt; None:\n    \"\"\"Delete a BTInsight by ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the BTInsight to delete.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.session.delete(f\"{self.base_path}/{id}\")\n</code></pre>"},{"location":"collections/btmodel/","title":"Breakthrough Model","text":""},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelSessionCollection","title":"albert.collections.btmodel.BTModelSessionCollection","text":"<pre><code>BTModelSessionCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>BTModelSessionCollection is a collection class for managing Breakthrough model session entities.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Attributes:</p> Name Type Description <code>base_path</code> <code>str</code> <p>The base path for BTModelSession API requests.</p> <p>Methods:</p> Name Description <code>create</code> <p>Create a new BTModelSession.</p> <code>get_by_id</code> <p>Retrieve a BTModelSession by its ID.</p> <code>update</code> <p>Update an existing BTModelSession.</p> <code>delete</code> <p>Delete a BTModelSession by ID.</p> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    super().__init__(session=session)\n    self.base_path = f\"/api/{BTModelSessionCollection._api_version}/btmodel\"\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelSessionCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/btmodel'\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelSessionCollection.create","title":"create","text":"<pre><code>create(*, model_session: BTModelSession) -&gt; BTModelSession\n</code></pre> <p>Create a new BTModelSession.</p> <p>Parameters:</p> Name Type Description Default <code>model_session</code> <code>BTModelSession</code> <p>The BTModelSession instance to create.</p> required <p>Returns:</p> Type Description <code>BTModelSession</code> <p>The created BTModelSession instance.</p> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>@validate_call\ndef create(self, *, model_session: BTModelSession) -&gt; BTModelSession:\n    \"\"\"Create a new BTModelSession.\n    Parameters\n    ----------\n    model_session : BTModelSession\n        The BTModelSession instance to create.\n    Returns\n    -------\n    BTModelSession\n        The created BTModelSession instance.\n    \"\"\"\n    response = self.session.post(\n        self.base_path,\n        json=model_session.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n    )\n    return BTModelSession(**response.json())\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelSessionCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: BTModelSessionId) -&gt; BTModelSession\n</code></pre> <p>Retrieve a BTModelSession by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>BTModelSessionId</code> <p>The ID of the BTModelSession to retrieve.</p> required <p>Returns:</p> Type Description <code>BTModelSession</code> <p>The retrieved BTModelSession instance.</p> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: BTModelSessionId) -&gt; BTModelSession:\n    \"\"\"Retrieve a BTModelSession by its ID.\n    Parameters\n    ----------\n    id : BTModelSessionId\n        The ID of the BTModelSession to retrieve.\n    Returns\n    -------\n    BTModelSession\n        The retrieved BTModelSession instance.\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    return BTModelSession(**response.json())\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelSessionCollection.update","title":"update","text":"<pre><code>update(*, model_session: BTModelSession) -&gt; BTModelSession\n</code></pre> <p>Update an existing BTModelSession.</p> <p>Parameters:</p> Name Type Description Default <code>model_session</code> <code>BTModelSession</code> <p>The BTModelSession instance with updated data.</p> required <p>Returns:</p> Type Description <code>BTModelSession</code> <p>The updated BTModelSession instance.</p> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>@validate_call\ndef update(self, *, model_session: BTModelSession) -&gt; BTModelSession:\n    \"\"\"Update an existing BTModelSession.\n\n    Parameters\n    ----------\n    model_session : BTModelSession\n        The BTModelSession instance with updated data.\n\n    Returns\n    -------\n    BTModelSession\n        The updated BTModelSession instance.\n    \"\"\"\n\n    path = f\"{self.base_path}/{model_session.id}\"\n    payload = self._generate_patch_payload(\n        existing=self.get_by_id(id=model_session.id),\n        updated=model_session,\n    )\n    self.session.patch(path, json=payload.model_dump(mode=\"json\", by_alias=True))\n    return self.get_by_id(id=model_session.id)\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelSessionCollection.delete","title":"delete","text":"<pre><code>delete(*, id: BTModelSessionId) -&gt; None\n</code></pre> <p>Delete a BTModelSession by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>BTModelSessionId</code> <p>The ID of the BTModelSession to delete.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>@validate_call\ndef delete(self, *, id: BTModelSessionId) -&gt; None:\n    \"\"\"Delete a BTModelSession by ID.\n\n    Parameters\n    ----------\n    id : BTModelSessionId\n        The ID of the BTModelSession to delete.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.session.delete(f\"{self.base_path}/{id}\")\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelCollection","title":"albert.collections.btmodel.BTModelCollection","text":"<pre><code>BTModelCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>BTModelCollection is a collection class for managing Breakthrough model entities.</p> <p>Breakthrough models can be associated with a parent Breakthrough model session, or a detached without a parent.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <p>Create a new BTModel instance.</p> <code>get_by_id</code> <p>Retrieve a BTModel by its ID.</p> <code>update</code> <p>Update an existing BTModel.</p> <code>delete</code> <p>Delete a BTModel by ID.</p> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    super().__init__(session=session)\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelCollection.create","title":"create","text":"<pre><code>create(\n    *,\n    model: BTModel,\n    parent_id: BTModelSessionId | None = None,\n) -&gt; BTModel\n</code></pre> <p>Create a new BTModel instance.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>BTModel</code> <p>The BTModel instance to create.</p> required <code>parent_id</code> <code>BTModelSessionId | None</code> <p>The optional ID of the parent BTModelSession.</p> <code>None</code> <p>Returns:</p> Type Description <code>BTModel</code> <p>The created BTModel instance.</p> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>@validate_call\ndef create(self, *, model: BTModel, parent_id: BTModelSessionId | None = None) -&gt; BTModel:\n    \"\"\"\n    Create a new BTModel instance.\n\n    Parameters\n    ----------\n    model : BTModel\n        The BTModel instance to create.\n    parent_id : BTModelSessionId | None\n        The optional ID of the parent BTModelSession.\n\n    Returns\n    -------\n    BTModel\n        The created BTModel instance.\n    \"\"\"\n    base_path = self._get_base_path(parent_id)\n    response = self.session.post(\n        base_path,\n        json=model.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n    )\n    return BTModel(**response.json())\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(\n    *,\n    id: BTModelId,\n    parent_id: BTModelSessionId | None = None,\n) -&gt; BTModel\n</code></pre> <p>Retrieve a BTModel by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>BTModelId</code> <p>The ID of the BTModel to retrieve.</p> required <code>parent_id</code> <code>BTModelSessionId | None</code> <p>The optional ID of the parent BTModelSession.</p> <code>None</code> <p>Returns:</p> Type Description <code>BTModel</code> <p>The retrieved BTModel instance.</p> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: BTModelId, parent_id: BTModelSessionId | None = None) -&gt; BTModel:\n    \"\"\"\n    Retrieve a BTModel by its ID.\n\n    Parameters\n    ----------\n    id : BTModelId\n        The ID of the BTModel to retrieve.\n    parent_id : BTModelSessionId | None\n        The optional ID of the parent BTModelSession.\n\n    Returns\n    -------\n    BTModel\n        The retrieved BTModel instance.\n    \"\"\"\n    base_path = self._get_base_path(parent_id)\n    response = self.session.get(f\"{base_path}/{id}\")\n    return BTModel(**response.json())\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelCollection.update","title":"update","text":"<pre><code>update(\n    *,\n    model: BTModel,\n    parent_id: BTModelSessionId | None = None,\n) -&gt; BTModel\n</code></pre> <p>Update an existing BTModel.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>BTModel</code> <p>The BTModel instance with updated data.</p> required <code>parent_id</code> <code>BTModelSessionId | None</code> <p>The optional ID of the parent BTModelSession.</p> <code>None</code> <p>Returns:</p> Type Description <code>BTModel</code> <p>The updated BTModel instance.</p> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>@validate_call\ndef update(self, *, model: BTModel, parent_id: BTModelSessionId | None = None) -&gt; BTModel:\n    \"\"\"\n    Update an existing BTModel.\n\n    Parameters\n    ----------\n    model : BTModel\n        The BTModel instance with updated data.\n    parent_id : BTModelSessionId | None\n        The optional ID of the parent BTModelSession.\n\n    Returns\n    -------\n    BTModel\n        The updated BTModel instance.\n    \"\"\"\n    base_path = self._get_base_path(parent_id)\n    payload = self._generate_patch_payload(\n        existing=self.get_by_id(id=model.id, parent_id=parent_id),\n        updated=model,\n        generate_metadata_diff=False,\n    )\n    self.session.patch(\n        f\"{base_path}/{model.id}\",\n        json=payload.model_dump(mode=\"json\", by_alias=True),\n    )\n    return self.get_by_id(id=model.id, parent_id=parent_id)\n</code></pre>"},{"location":"collections/btmodel/#albert.collections.btmodel.BTModelCollection.delete","title":"delete","text":"<pre><code>delete(\n    *,\n    id: BTModelId,\n    parent_id: BTModelSessionId | None = None,\n) -&gt; None\n</code></pre> <p>Delete a BTModel by ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>BTModelId</code> <p>The ID of the BTModel to delete.</p> required <code>parent_id</code> <code>BTModelSessionId | None</code> <p>The optional ID of the parent BTModelSession.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/btmodel.py</code> <pre><code>@validate_call\ndef delete(self, *, id: BTModelId, parent_id: BTModelSessionId | None = None) -&gt; None:\n    \"\"\"Delete a BTModel by ID.\n\n    Parameters\n    ----------\n    id : BTModelId\n        The ID of the BTModel to delete.\n    parent_id : BTModelSessionId | None\n        The optional ID of the parent BTModelSession.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    base_path = self._get_base_path(parent_id)\n    self.session.delete(f\"{base_path}/{id}\")\n</code></pre>"},{"location":"collections/cas/","title":"Cas","text":""},{"location":"collections/cas/#albert.collections.cas.CasCollection","title":"albert.collections.cas.CasCollection","text":"<pre><code>CasCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>CasCollection is a collection class for managing Cas entities on the Albert Platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_all</code> <p>Get all CAS entities with optional filters.</p> <code>exists</code> <p>Checks if a CAS exists by its number.</p> <code>create</code> <p>Creates a new CAS entity.</p> <code>get_or_create</code> <p>Retrieves a CAS by its number or creates it if it does not exist.</p> <code>get_by_id</code> <p>Retrieves a CAS by its ID.</p> <code>get_by_number</code> <p>Retrieves a CAS by its number.</p> <code>delete</code> <p>Deletes a CAS by its ID.</p> <code>update</code> <p>Updates a CAS entity. The updated object must have the same ID as the object you want to update.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/cas.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the CasCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{CasCollection._api_version}/cas\"\n</code></pre>"},{"location":"collections/cas/#albert.collections.cas.CasCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/cas'\n</code></pre>"},{"location":"collections/cas/#albert.collections.cas.CasCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    number: str | None = None,\n    cas: list[str] | None = None,\n    id: CasId | None = None,\n    order_by: OrderBy = DESCENDING,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Cas]\n</code></pre> <p>Get all CAS entities with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>str</code> <p>Filter CAS entities by CAS number.</p> <code>None</code> <code>cas</code> <code>list[str] | None</code> <p>Filter CAS entities by a list of CAS numbers.</p> <code>None</code> <code>id</code> <code>str</code> <p>Filter CAS entities by Albert CAS ID.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>Sort direction (ascending or descending). Default is DESCENDING.</p> <code>DESCENDING</code> <code>start_key</code> <code>str</code> <p>The pagination key to start fetching from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Cas]</code> <p>An iterator over Cas entities.</p> Source code in <code>src/albert/collections/cas.py</code> <pre><code>@validate_call\ndef get_all(\n    self,\n    *,\n    number: str | None = None,\n    cas: list[str] | None = None,\n    id: CasId | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Cas]:\n    \"\"\"\n    Get all CAS entities with optional filters.\n\n    Parameters\n    ----------\n    number : str, optional\n        Filter CAS entities by CAS number.\n    cas : list[str] | None, optional\n        Filter CAS entities by a list of CAS numbers.\n    id : str, optional\n        Filter CAS entities by Albert CAS ID.\n    order_by : OrderBy, optional\n        Sort direction (ascending or descending). Default is DESCENDING.\n    start_key : str, optional\n        The pagination key to start fetching from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[Cas]\n        An iterator over Cas entities.\n    \"\"\"\n\n    if cas:\n        params = {\n            \"orderBy\": order_by.value,\n            \"cas\": cas,\n        }\n\n        response = self.session.get(url=self.base_path, params=params)\n\n        items = response.json().get(\"Items\", [])\n\n        yield from [Cas(**item) for item in items]\n        return\n\n    params = {\"orderBy\": order_by.value, \"startKey\": start_key}\n\n    cas_items = AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=None,\n        deserialize=lambda items: [Cas(**item) for item in items],\n    )\n\n    # Apply custom filtering until https://linear.app/albert-invent/issue/TAS-564/inconsistent-cas-pagination-behaviour is fixed.\n    def filtered_items() -&gt; Iterator[Cas]:\n        count = 0\n        for item in cas_items:\n            if number is not None and number not in item.number:\n                continue\n            if id is not None and item.id != id:\n                continue\n            yield item\n            count += 1\n            if max_items is not None and count &gt;= max_items:\n                break\n\n    yield from filtered_items()\n</code></pre>"},{"location":"collections/cas/#albert.collections.cas.CasCollection.exists","title":"exists","text":"<pre><code>exists(*, number: str, exact_match: bool = True) -&gt; bool\n</code></pre> <p>Checks if a CAS exists by its number.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>str</code> <p>The number of the CAS to check.</p> required <code>exact_match</code> <code>bool</code> <p>Whether to match the number exactly, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the CAS exists, False otherwise.</p> Source code in <code>src/albert/collections/cas.py</code> <pre><code>def exists(self, *, number: str, exact_match: bool = True) -&gt; bool:\n    \"\"\"\n    Checks if a CAS exists by its number.\n\n    Parameters\n    ----------\n    number : str\n        The number of the CAS to check.\n    exact_match : bool, optional\n        Whether to match the number exactly, by default True.\n\n    Returns\n    -------\n    bool\n        True if the CAS exists, False otherwise.\n    \"\"\"\n    cas_list = self.get_by_number(number=number, exact_match=exact_match)\n    return cas_list is not None\n</code></pre>"},{"location":"collections/cas/#albert.collections.cas.CasCollection.create","title":"create","text":"<pre><code>create(*, cas: str | Cas) -&gt; Cas\n</code></pre> <p>Creates a new CAS entity.</p> <p>Parameters:</p> Name Type Description Default <code>cas</code> <code>Union[str, Cas]</code> <p>The CAS number or Cas object to create.</p> required <p>Returns:</p> Type Description <code>Cas</code> <p>The created Cas object.</p> Source code in <code>src/albert/collections/cas.py</code> <pre><code>def create(self, *, cas: str | Cas) -&gt; Cas:\n    \"\"\"\n    Creates a new CAS entity.\n\n    Parameters\n    ----------\n    cas : Union[str, Cas]\n        The CAS number or Cas object to create.\n\n    Returns\n    -------\n    Cas\n        The created Cas object.\n    \"\"\"\n    if isinstance(cas, str):\n        cas = Cas(number=cas)\n\n    payload = cas.model_dump(by_alias=True, exclude_unset=True, mode=\"json\")\n    response = self.session.post(self.base_path, json=payload)\n    cas = Cas(**response.json())\n    return cas\n</code></pre>"},{"location":"collections/cas/#albert.collections.cas.CasCollection.get_or_create","title":"get_or_create","text":"<pre><code>get_or_create(*, cas: str | Cas) -&gt; Cas\n</code></pre> <p>Retrieves a CAS by its number or creates it if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>cas</code> <code>Union[str, Cas]</code> <p>The CAS number or Cas object to retrieve or create.</p> required <p>Returns:</p> Type Description <code>Cas</code> <p>The Cas object if found or created.</p> Source code in <code>src/albert/collections/cas.py</code> <pre><code>def get_or_create(self, *, cas: str | Cas) -&gt; Cas:\n    \"\"\"\n    Retrieves a CAS by its number or creates it if it does not exist.\n\n    Parameters\n    ----------\n    cas : Union[str, Cas]\n        The CAS number or Cas object to retrieve or create.\n\n    Returns\n    -------\n    Cas\n        The Cas object if found or created.\n    \"\"\"\n    if isinstance(cas, str):\n        cas = Cas(number=cas)\n    found = self.get_by_number(number=cas.number, exact_match=True)\n    if found:\n        return found\n    else:\n        return self.create(cas=cas)\n</code></pre>"},{"location":"collections/cas/#albert.collections.cas.CasCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: CasId) -&gt; Cas\n</code></pre> <p>Retrieves a CAS by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the CAS to retrieve.</p> required <p>Returns:</p> Type Description <code>Cas</code> <p>The Cas object if found, None otherwise.</p> Source code in <code>src/albert/collections/cas.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: CasId) -&gt; Cas:\n    \"\"\"\n    Retrieves a CAS by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the CAS to retrieve.\n\n    Returns\n    -------\n    Cas\n        The Cas object if found, None otherwise.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    cas = Cas(**response.json())\n    return cas\n</code></pre>"},{"location":"collections/cas/#albert.collections.cas.CasCollection.get_by_number","title":"get_by_number","text":"<pre><code>get_by_number(\n    *, number: str, exact_match: bool = True\n) -&gt; Cas | None\n</code></pre> <p>Retrieves a CAS by its number.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>str</code> <p>The number of the CAS to retrieve.</p> required <code>exact_match</code> <code>bool</code> <p>Whether to match the number exactly, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Optional[Cas]</code> <p>The Cas object if found, None otherwise.</p> Source code in <code>src/albert/collections/cas.py</code> <pre><code>def get_by_number(self, *, number: str, exact_match: bool = True) -&gt; Cas | None:\n    \"\"\"\n    Retrieves a CAS by its number.\n\n    Parameters\n    ----------\n    number : str\n        The number of the CAS to retrieve.\n    exact_match : bool, optional\n        Whether to match the number exactly, by default True.\n\n    Returns\n    -------\n    Optional[Cas]\n        The Cas object if found, None otherwise.\n    \"\"\"\n    found = self.get_all(cas=[number])\n    if exact_match:\n        for f in found:\n            if self._clean_cas_number(f.number) == self._clean_cas_number(number):\n                return f\n    return next(found, None)\n</code></pre>"},{"location":"collections/cas/#albert.collections.cas.CasCollection.delete","title":"delete","text":"<pre><code>delete(*, id: CasId) -&gt; None\n</code></pre> <p>Deletes a CAS by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the CAS to delete.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/cas.py</code> <pre><code>@validate_call\ndef delete(self, *, id: CasId) -&gt; None:\n    \"\"\"\n    Deletes a CAS by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the CAS to delete.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/cas/#albert.collections.cas.CasCollection.update","title":"update","text":"<pre><code>update(*, updated_object: Cas) -&gt; Cas\n</code></pre> <p>Updates a CAS entity. The updated object must have the same ID as the object you want to update.</p> <p>Parameters:</p> Name Type Description Default <code>updated_object</code> <code>Cas</code> <p>The Updated Cas object.</p> required <p>Returns:</p> Type Description <code>Cas</code> <p>The updated Cas object as it appears in Albert</p> Source code in <code>src/albert/collections/cas.py</code> <pre><code>def update(self, *, updated_object: Cas) -&gt; Cas:\n    \"\"\"Updates a CAS entity. The updated object must have the same ID as the object you want to update.\n\n    Parameters\n    ----------\n    updated_object : Cas\n        The Updated Cas object.\n\n    Returns\n    -------\n    Cas\n        The updated Cas object as it appears in Albert\n    \"\"\"\n    # Fetch the current object state from the server or database\n    existing_cas = self.get_by_id(id=updated_object.id)\n\n    # Generate the PATCH payload\n    patch_payload = self._generate_patch_payload(existing=existing_cas, updated=updated_object)\n    url = f\"{self.base_path}/{updated_object.id}\"\n    self.session.patch(url, json=patch_payload.model_dump(mode=\"json\", by_alias=True))\n\n    updated_cas = self.get_by_id(id=updated_object.id)\n    return updated_cas\n</code></pre>"},{"location":"collections/companies/","title":"Companies","text":""},{"location":"collections/companies/#albert.collections.companies.CompanyCollection","title":"albert.collections.companies.CompanyCollection","text":"<pre><code>CompanyCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>CompanyCollection is a collection class for managing Company entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_all</code> <p>Get all company entities with optional filters.</p> <code>exists</code> <p>Checks if a company exists by its name.</p> <code>get_by_id</code> <p>Get a company by its ID.</p> <code>get_by_name</code> <p>Retrieves a company by its name.</p> <code>create</code> <p>Creates a new company entity.</p> <code>get_or_create</code> <p>Retrieves a company by its name or creates it if it does not exist.</p> <code>delete</code> <p>Deletes a company entity.</p> <code>rename</code> <p>Renames an existing company entity.</p> <code>update</code> <p>Update a Company entity. The id of the company must be provided.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/companies.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the CompanyCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{CompanyCollection._api_version}/companies\"\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/companies'\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    name: str | list[str] = None,\n    exact_match: bool = True,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Company]\n</code></pre> <p>Get all company entities with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | list[str]</code> <p>The name(s) of the company to filter by.</p> <code>None</code> <code>exact_match</code> <code>bool</code> <p>Whether to match the name(s) exactly. Default is True.</p> <code>True</code> <code>start_key</code> <code>str</code> <p>Key to start paginated results from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Company]</code> <p>An iterator of Company entities.</p> Source code in <code>src/albert/collections/companies.py</code> <pre><code>def get_all(\n    self,\n    *,\n    name: str | list[str] = None,\n    exact_match: bool = True,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Company]:\n    \"\"\"\n    Get all company entities with optional filters.\n\n    Parameters\n    ----------\n    name : str | list[str], optional\n        The name(s) of the company to filter by.\n    exact_match : bool, optional\n        Whether to match the name(s) exactly. Default is True.\n    start_key : str, optional\n        Key to start paginated results from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[Company]\n        An iterator of Company entities.\n    \"\"\"\n    params = {\n        \"dupDetection\": \"false\",\n        \"startKey\": start_key,\n    }\n    if name:\n        params[\"name\"] = name if isinstance(name, list) else [name]\n        params[\"exactMatch\"] = str(exact_match).lower()\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [Company(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.exists","title":"exists","text":"<pre><code>exists(*, name: str, exact_match: bool = True) -&gt; bool\n</code></pre> <p>Checks if a company exists by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the company to check.</p> required <code>exact_match</code> <code>bool</code> <p>Whether to match the name exactly, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the company exists, False otherwise.</p> Source code in <code>src/albert/collections/companies.py</code> <pre><code>def exists(self, *, name: str, exact_match: bool = True) -&gt; bool:\n    \"\"\"\n    Checks if a company exists by its name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the company to check.\n    exact_match : bool, optional\n        Whether to match the name exactly, by default True.\n\n    Returns\n    -------\n    bool\n        True if the company exists, False otherwise.\n    \"\"\"\n    companies = self.get_by_name(name=name, exact_match=exact_match)\n    return bool(companies)\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: CompanyId) -&gt; Company\n</code></pre> <p>Get a company by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the company to retrieve.</p> required <p>Returns:</p> Type Description <code>Company</code> <p>The Company object.</p> Source code in <code>src/albert/collections/companies.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: CompanyId) -&gt; Company:\n    \"\"\"\n    Get a company by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the company to retrieve.\n\n    Returns\n    -------\n    Company\n        The Company object.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    company = response.json()\n    found_company = Company(**company)\n    return found_company\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(\n    *, name: str, exact_match: bool = True\n) -&gt; Company | None\n</code></pre> <p>Retrieves a company by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the company to retrieve.</p> required <code>exact_match</code> <code>bool</code> <p>Whether to match the name exactly, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Company</code> <p>The Company object if found, None otherwise.</p> Source code in <code>src/albert/collections/companies.py</code> <pre><code>def get_by_name(self, *, name: str, exact_match: bool = True) -&gt; Company | None:\n    \"\"\"\n    Retrieves a company by its name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the company to retrieve.\n    exact_match : bool, optional\n        Whether to match the name exactly, by default True.\n\n    Returns\n    -------\n    Company\n        The Company object if found, None otherwise.\n    \"\"\"\n    found = self.get_all(name=name, exact_match=exact_match, max_items=1)\n    return next(found, None)\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.create","title":"create","text":"<pre><code>create(*, company: str | Company) -&gt; Company\n</code></pre> <p>Creates a new company entity.</p> <p>Parameters:</p> Name Type Description Default <code>company</code> <code>Union[str, Company]</code> <p>The company name or Company object to create.</p> required <p>Returns:</p> Type Description <code>Company</code> <p>The created Company object.</p> Source code in <code>src/albert/collections/companies.py</code> <pre><code>def create(self, *, company: str | Company) -&gt; Company:\n    \"\"\"\n    Creates a new company entity.\n\n    Parameters\n    ----------\n    company : Union[str, Company]\n        The company name or Company object to create.\n\n    Returns\n    -------\n    Company\n        The created Company object.\n    \"\"\"\n    if isinstance(company, str):\n        company = Company(name=company)\n\n    payload = company.model_dump(by_alias=True, exclude_unset=True, mode=\"json\")\n    response = self.session.post(self.base_path, json=payload)\n    this_company = Company(**response.json())\n    return this_company\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.get_or_create","title":"get_or_create","text":"<pre><code>get_or_create(*, company: str | Company) -&gt; Company\n</code></pre> <p>Retrieves a company by its name or creates it if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>company</code> <code>Union[str, Company]</code> <p>The company name or Company object to retrieve or create.</p> required <p>Returns:</p> Type Description <code>Company</code> <p>The Company object if found or created.</p> Source code in <code>src/albert/collections/companies.py</code> <pre><code>def get_or_create(self, *, company: str | Company) -&gt; Company:\n    \"\"\"\n    Retrieves a company by its name or creates it if it does not exist.\n\n    Parameters\n    ----------\n    company : Union[str, Company]\n        The company name or Company object to retrieve or create.\n\n    Returns\n    -------\n    Company\n        The Company object if found or created.\n    \"\"\"\n    if isinstance(company, str):\n        company = Company(name=company)\n    found = self.get_by_name(name=company.name, exact_match=True)\n    if found:\n        return found\n    else:\n        return self.create(company=company)\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.delete","title":"delete","text":"<pre><code>delete(*, id: CompanyId) -&gt; None\n</code></pre> <p>Deletes a company entity.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the company to delete.</p> required Source code in <code>src/albert/collections/companies.py</code> <pre><code>@validate_call\ndef delete(self, *, id: CompanyId) -&gt; None:\n    \"\"\"Deletes a company entity.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the company to delete.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.rename","title":"rename","text":"<pre><code>rename(*, old_name: str, new_name: str) -&gt; Company\n</code></pre> <p>Renames an existing company entity.</p> <p>Parameters:</p> Name Type Description Default <code>old_name</code> <code>str</code> <p>The current name of the company.</p> required <code>new_name</code> <code>str</code> <p>The new name of the company.</p> required <p>Returns:</p> Type Description <code>Company</code> <p>The renamed Company object</p> Source code in <code>src/albert/collections/companies.py</code> <pre><code>def rename(self, *, old_name: str, new_name: str) -&gt; Company:\n    \"\"\"\n    Renames an existing company entity.\n\n    Parameters\n    ----------\n    old_name : str\n        The current name of the company.\n    new_name : str\n        The new name of the company.\n\n    Returns\n    -------\n    Company\n        The renamed Company object\n    \"\"\"\n    company = self.get_by_name(name=old_name, exact_match=True)\n    if not company:\n        msg = f'Company \"{old_name}\" not found.'\n        logger.error(msg)\n        raise AlbertException(msg)\n    company_id = company.id\n    endpoint = f\"{self.base_path}/{company_id}\"\n    payload = {\n        \"data\": [\n            {\n                \"operation\": \"update\",\n                \"attribute\": \"name\",\n                \"oldValue\": old_name,\n                \"newValue\": new_name,\n            }\n        ]\n    }\n    self.session.patch(endpoint, json=payload)\n    updated_company = self.get_by_id(id=company_id)\n    return updated_company\n</code></pre>"},{"location":"collections/companies/#albert.collections.companies.CompanyCollection.update","title":"update","text":"<pre><code>update(*, company: Company) -&gt; Company\n</code></pre> <p>Update a Company entity. The id of the company must be provided.</p> <p>Parameters:</p> Name Type Description Default <code>company</code> <code>Company</code> <p>The updated Company object.</p> required <p>Returns:</p> Type Description <code>Company</code> <p>The updated Company object as registered in Albert.</p> Source code in <code>src/albert/collections/companies.py</code> <pre><code>def update(self, *, company: Company) -&gt; Company:\n    \"\"\"Update a Company entity. The id of the company must be provided.\n\n    Parameters\n    ----------\n    company : Company\n        The updated Company object.\n\n    Returns\n    -------\n    Company\n        The updated Company object as registered in Albert.\n    \"\"\"\n    # Fetch the current object state from the server or database\n    current_object = self.get_by_id(id=company.id)\n\n    # Generate the PATCH payload\n    patch_payload = self._generate_patch_payload(existing=current_object, updated=company)\n    url = f\"{self.base_path}/{company.id}\"\n    self.session.patch(url, json=patch_payload.model_dump(mode=\"json\", by_alias=True))\n    updated_company = self.get_by_id(id=company.id)\n    return updated_company\n</code></pre>"},{"location":"collections/custom_fields/","title":"Custom Fields","text":""},{"location":"collections/custom_fields/#albert.collections.custom_fields.CustomFieldCollection","title":"albert.collections.custom_fields.CustomFieldCollection","text":"<pre><code>CustomFieldCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>CustomFieldCollection is a collection class for managing CustomField entities in the Albert platform.</p> <p>This collection provides methods to create, update, retrieve, and list custom fields. CustomFields allow you to store custom metadata on a <code>Project</code>, <code>InventoryItem</code>, <code>User</code>, <code>BaseTask</code> (Tasks), and <code>Lot</code>.</p> <p>The <code>FieldType</code> used determines the shape of the metadata field's value. If the <code>FieldType</code> is <code>LIST</code>, then the <code>FieldCategory</code> defines the ACL needed to add new allowed items to the given list:</p> <ul> <li><code>FieldCategory.USER_DEFINED</code>: allows general users to add items</li> <li><code>FieldCategory.BUSINESS_DEFINED</code>: only admins can add new items to the list</li> </ul> Example <pre><code># Creating some custom fields\nfrom albert import Albert\nfrom albert.resources.custom_fields import CustomField, FieldCategory, FieldType, ServiceType\nfrom albert.resources.lists import ListItem\nfrom albert.resources.projects import Project\n\n# Initialize the Albert client\nclient = Albert()\n\n# Define the custom fields\nstage_gate_field = CustomField(\n    name=\"stage_gate_status\",\n    display_name=\"Stage Gate\",\n    field_type=FieldType.LIST,\n    service=ServiceType.PROJECTS,\n    min=1,\n    max=1,\n    category=FieldCategory.BUSINESS_DEFINED  # Defined by the business\n)\njustification_field = CustomField(\n    name=\"justification\",\n    display_name=\"Project Justification\",\n    field_type=FieldType.STRING,\n    service=ServiceType.PROJECTS,\n)\n\n# Create the custom fields\nclient.custom_fields.create(custom_field=stage_gate_field)\nclient.custom_fields.create(custom_field=justification_field)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_by_id</code> <p>Get a CustomField item by its ID.</p> <code>get_by_name</code> <p>Get a CustomField item by its name.</p> <code>get_all</code> <p>Get all CustomField entities with optional filters.</p> <code>create</code> <p>Create a new CustomField item.</p> <code>update</code> <p>Update a CustomField item.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/custom_fields.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the CustomFieldCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{CustomFieldCollection._api_version}/customfields\"\n</code></pre>"},{"location":"collections/custom_fields/#albert.collections.custom_fields.CustomFieldCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/customfields'\n</code></pre>"},{"location":"collections/custom_fields/#albert.collections.custom_fields.CustomFieldCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: CustomFieldId) -&gt; CustomField\n</code></pre> <p>Get a CustomField item by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the CustomField item.</p> required <p>Returns:</p> Type Description <code>CustomField</code> <p>The CustomField item.</p> Source code in <code>src/albert/collections/custom_fields.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: CustomFieldId) -&gt; CustomField:\n    \"\"\"Get a CustomField item by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the CustomField item.\n\n    Returns\n    -------\n    CustomField\n        The CustomField item.\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    return CustomField(**response.json())\n</code></pre>"},{"location":"collections/custom_fields/#albert.collections.custom_fields.CustomFieldCollection.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(\n    *, name: str, service: ServiceType | None = None\n) -&gt; CustomField | None\n</code></pre> <p>Get a CustomField item by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the CustomField item.</p> required <code>service</code> <code>ServiceType | None</code> <p>The service the field relates to, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>CustomField | None</code> <p>The CustomField item, or None if not found.</p> Source code in <code>src/albert/collections/custom_fields.py</code> <pre><code>def get_by_name(self, *, name: str, service: ServiceType | None = None) -&gt; CustomField | None:\n    \"\"\"Get a CustomField item by its name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the CustomField item.\n    service : ServiceType | None, optional\n        The service the field relates to, by default None\n\n    Returns\n    -------\n    CustomField | None\n        The CustomField item, or None if not found.\n    \"\"\"\n    for custom_field in self.get_all(name=name, service=service):\n        if custom_field.name.lower() == name.lower():\n            return custom_field\n    return None\n</code></pre>"},{"location":"collections/custom_fields/#albert.collections.custom_fields.CustomFieldCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    name: str | None = None,\n    type: FieldType | None = None,\n    service: ServiceType | None = None,\n    lookup_column: bool | None = None,\n    lookup_row: bool | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[CustomField]\n</code></pre> <p>Get all CustomField entities with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the field.</p> <code>None</code> <code>type</code> <code>FieldType | None</code> <p>The type of the custom field.</p> <code>None</code> <code>service</code> <code>ServiceType</code> <p>The related service the field belongs to.</p> <code>None</code> <code>lookup_column</code> <code>bool</code> <p>Whether the field is related to a lookup column.</p> <code>None</code> <code>lookup_row</code> <code>bool</code> <p>Whether the field is related to a lookup row.</p> <code>None</code> <code>start_key</code> <code>str</code> <p>Pagination key to start fetching from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[CustomField]</code> <p>An iterator over matching CustomField entities.</p> Source code in <code>src/albert/collections/custom_fields.py</code> <pre><code>def get_all(\n    self,\n    *,\n    name: str | None = None,\n    type: FieldType | None = None,\n    service: ServiceType | None = None,\n    lookup_column: bool | None = None,\n    lookup_row: bool | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[CustomField]:\n    \"\"\"\n    Get all CustomField entities with optional filters.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name of the field.\n    type: FieldType, optional\n        The type of the custom field.\n    service : ServiceType, optional\n        The related service the field belongs to.\n    lookup_column : bool, optional\n        Whether the field is related to a lookup column.\n    lookup_row : bool, optional\n        Whether the field is related to a lookup row.\n    start_key : str, optional\n        Pagination key to start fetching from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[CustomField]\n        An iterator over matching CustomField entities.\n    \"\"\"\n    params = {\n        \"name\": name,\n        \"type\": type,\n        \"service\": service,\n        \"lookupColumn\": lookup_column,\n        \"lookupRow\": lookup_row,\n        \"startKey\": start_key,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [CustomField(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/custom_fields/#albert.collections.custom_fields.CustomFieldCollection.create","title":"create","text":"<pre><code>create(*, custom_field: CustomField) -&gt; CustomField\n</code></pre> <p>Create a new CustomField item.</p> <p>Parameters:</p> Name Type Description Default <code>custom_field</code> <code>CustomField</code> <p>The CustomField item to create.</p> required <p>Returns:</p> Type Description <code>CustomField</code> <p>The created CustomField item with its ID.</p> Source code in <code>src/albert/collections/custom_fields.py</code> <pre><code>def create(self, *, custom_field: CustomField) -&gt; CustomField:\n    \"\"\"Create a new CustomField item.\n\n    Parameters\n    ----------\n    custom_field : CustomField\n        The CustomField item to create.\n\n    Returns\n    -------\n    CustomField\n        The created CustomField item with its ID.\n    \"\"\"\n    response = self.session.post(\n        self.base_path,\n        json=custom_field.model_dump(by_alias=True, exclude_none=True, mode=\"json\"),\n    )\n    return CustomField(**response.json())\n</code></pre>"},{"location":"collections/custom_fields/#albert.collections.custom_fields.CustomFieldCollection.update","title":"update","text":"<pre><code>update(*, custom_field: CustomField) -&gt; CustomField\n</code></pre> <p>Update a CustomField item.</p> <p>Parameters:</p> Name Type Description Default <code>custom_field</code> <code>CustomField</code> <p>The updated CustomField item. The ID must be set and match the Field you want to update.</p> required <p>Returns:</p> Type Description <code>CustomField</code> <p>The updated CustomField item as registered in Albert.</p> Source code in <code>src/albert/collections/custom_fields.py</code> <pre><code>def update(self, *, custom_field: CustomField) -&gt; CustomField:\n    \"\"\"Update a CustomField item.\n\n    Parameters\n    ----------\n    custom_field : CustomField\n        The updated CustomField item. The ID must be set and match the Field you want to update.\n\n    Returns\n    -------\n    CustomField\n        The updated CustomField item as registered in Albert.\n    \"\"\"\n    # fetch current object state\n    current_object = self.get_by_id(id=custom_field.id)\n\n    # generate the patch payload\n    payload = self._generate_patch_payload(\n        existing=current_object,\n        updated=custom_field,\n        generate_metadata_diff=False,\n        stringify_values=False,\n    )\n\n    for patch in payload.data:\n        if (\n            patch.attribute in (\"hidden\", \"search\", \"lkpColumn\", \"lkpRow\")\n            and patch.operation == \"add\"\n        ):\n            patch.operation = \"update\"\n            patch.old_value = False\n        if (\n            patch.attribute in (\"entityCategory\")\n            and patch.operation == \"add\"\n            and isinstance(patch.new_value, list)\n        ):\n            patch.new_value = patch.new_value[0]\n\n    # run patch\n    url = f\"{self.base_path}/{custom_field.id}\"\n\n    self.session.patch(\n        url,\n        json=payload.model_dump(\n            mode=\"json\", by_alias=True, exclude_unset=False, exclude_none=True\n        ),\n    )\n    updated_ctf = self.get_by_id(id=custom_field.id)\n    return updated_ctf\n</code></pre>"},{"location":"collections/custom_templates/","title":"Custom Templates","text":""},{"location":"collections/custom_templates/#albert.collections.custom_templates.CustomTemplatesCollection","title":"albert.collections.custom_templates.CustomTemplatesCollection","text":"<pre><code>CustomTemplatesCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>CustomTemplatesCollection is a collection class for managing CustomTemplate entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_by_id</code> <p>Get a Custom Template by ID</p> <code>search</code> <p>Search for CustomTemplate matching the provided criteria.</p> <code>get_all</code> <p>Retrieve fully hydrated CustomTemplate entities with optional filters.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/custom_templates.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the CustomTemplatesCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{CustomTemplatesCollection._api_version}/customtemplates\"\n</code></pre>"},{"location":"collections/custom_templates/#albert.collections.custom_templates.CustomTemplatesCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/customtemplates'\n</code></pre>"},{"location":"collections/custom_templates/#albert.collections.custom_templates.CustomTemplatesCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: CustomTemplateId) -&gt; CustomTemplate\n</code></pre> <p>Get a Custom Template by ID</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>id of the custom template</p> required <p>Returns:</p> Type Description <code>CustomTemplate</code> <p>The CutomTemplate with the provided ID</p> Source code in <code>src/albert/collections/custom_templates.py</code> <pre><code>def get_by_id(self, *, id: CustomTemplateId) -&gt; CustomTemplate:\n    \"\"\"Get a Custom Template by ID\n\n    Parameters\n    ----------\n    id : str\n        id of the custom template\n\n    Returns\n    -------\n    CustomTemplate\n        The CutomTemplate with the provided ID\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    return CustomTemplate(**response.json())\n</code></pre>"},{"location":"collections/custom_templates/#albert.collections.custom_templates.CustomTemplatesCollection.search","title":"search","text":"<pre><code>search(\n    *,\n    text: str | None = None,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[CustomTemplateSearchItem]\n</code></pre> <p>Search for CustomTemplate matching the provided criteria.</p> <p>\u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance. To retrieve fully detailed entities, use :meth:<code>get_all</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to filter search results by.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <code>offset</code> <code>int</code> <p>Offset to begin pagination at. Default is 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>Iterator[CustomTemplateSearchItem]</code> <p>An iterator of CustomTemplateSearchItem items.</p> Source code in <code>src/albert/collections/custom_templates.py</code> <pre><code>def search(\n    self,\n    *,\n    text: str | None = None,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[CustomTemplateSearchItem]:\n    \"\"\"\n    Search for CustomTemplate matching the provided criteria.\n\n    \u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance.\n    To retrieve fully detailed entities, use :meth:`get_all` instead.\n\n    Parameters\n    ----------\n    text : str, optional\n        Text to filter search results by.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n    offset : int, optional\n        Offset to begin pagination at. Default is 0.\n\n    Returns\n    -------\n    Iterator[CustomTemplateSearchItem]\n        An iterator of CustomTemplateSearchItem items.\n    \"\"\"\n    params = {\n        \"text\": text,\n        \"offset\": offset,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/search\",\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [\n            CustomTemplateSearchItem.model_validate(x)._bind_collection(self) for x in items\n        ],\n    )\n</code></pre>"},{"location":"collections/custom_templates/#albert.collections.custom_templates.CustomTemplatesCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    text: str | None = None,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[CustomTemplate]\n</code></pre> <p>Retrieve fully hydrated CustomTemplate entities with optional filters.</p> <p>This method returns complete entity data using <code>get_by_id</code>. Use :meth:<code>search</code> for faster retrieval when you only need lightweight, partial (unhydrated) entities.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text filter for template name or content.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <code>offset</code> <code>int</code> <p>Offset for search pagination.</p> <code>0</code> <p>Returns:</p> Type Description <code>Iterator[CustomTemplate]</code> <p>An iterator of CustomTemplate entities.</p> Source code in <code>src/albert/collections/custom_templates.py</code> <pre><code>def get_all(\n    self,\n    *,\n    text: str | None = None,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[CustomTemplate]:\n    \"\"\"\n    Retrieve fully hydrated CustomTemplate entities with optional filters.\n\n    This method returns complete entity data using `get_by_id`.\n    Use :meth:`search` for faster retrieval when you only need lightweight, partial (unhydrated) entities.\n\n    Parameters\n    ----------\n    text : str, optional\n        Text filter for template name or content.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n    offset : int, optional\n        Offset for search pagination.\n\n    Returns\n    -------\n    Iterator[CustomTemplate]\n        An iterator of CustomTemplate entities.\n    \"\"\"\n    for item in self.search(text=text, max_items=max_items, offset=offset):\n        try:\n            yield self.get_by_id(id=item.id)\n        except AlbertHTTPError as e:\n            logger.warning(f\"Error hydrating custom template {item.id}: {e}\")\n</code></pre>"},{"location":"collections/data_columns/","title":"Data Columns","text":""},{"location":"collections/data_columns/#albert.collections.data_columns.DataColumnCollection","title":"albert.collections.data_columns.DataColumnCollection","text":"<pre><code>DataColumnCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>DataColumnCollection is a collection class for managing DataColumn entities in the Albert platform.</p> <p>Methods:</p> Name Description <code>get_by_name</code> <p>Get a data column by its name.</p> <code>get_by_id</code> <p>Get a data column by its ID.</p> <code>get_all</code> <p>Get all data column entities with optional filters.</p> <code>create</code> <p>Create a new data column entity.</p> <code>delete</code> <p>Delete a data column entity.</p> <code>update</code> <p>Update a data column entity.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/data_columns.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"Initialize the DataColumnCollection with the provided session.\"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{DataColumnCollection._api_version}/datacolumns\"\n</code></pre>"},{"location":"collections/data_columns/#albert.collections.data_columns.DataColumnCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/datacolumns'\n</code></pre>"},{"location":"collections/data_columns/#albert.collections.data_columns.DataColumnCollection.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(*, name: str) -&gt; DataColumn | None\n</code></pre> <p>Get a data column by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the data column to get.</p> required <p>Returns:</p> Type Description <code>DataColumn | None</code> <p>The data column object on match or None</p> Source code in <code>src/albert/collections/data_columns.py</code> <pre><code>@validate_call\ndef get_by_name(self, *, name: str) -&gt; DataColumn | None:\n    \"\"\"\n    Get a data column by its name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the data column to get.\n\n    Returns\n    -------\n    DataColumn | None\n        The data column object on match or None\n    \"\"\"\n    for dc in self.get_all(name=name):\n        if dc.name.lower() == name.lower():\n            return dc\n    return None\n</code></pre>"},{"location":"collections/data_columns/#albert.collections.data_columns.DataColumnCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: DataColumnId) -&gt; DataColumn\n</code></pre> <p>Get a data column by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the data column to get.</p> required <p>Returns:</p> Type Description <code>DataColumn | None</code> <p>The data column object on match or None</p> Source code in <code>src/albert/collections/data_columns.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: DataColumnId) -&gt; DataColumn:\n    \"\"\"\n    Get a data column by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the data column to get.\n\n    Returns\n    -------\n    DataColumn | None\n        The data column object on match or None\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    dc = DataColumn(**response.json())\n    return dc\n</code></pre>"},{"location":"collections/data_columns/#albert.collections.data_columns.DataColumnCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    order_by: OrderBy = DESCENDING,\n    ids: DataColumnId | list[DataColumnId] | None = None,\n    name: str | list[str] | None = None,\n    exact_match: bool | None = None,\n    default: bool | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[DataColumn]\n</code></pre> <p>Get all data column entities with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>order_by</code> <code>OrderBy</code> <p>The order in which to sort the results. Default is DESCENDING.</p> <code>DESCENDING</code> <code>ids</code> <code>str or list[str]</code> <p>Filter by one or more data column IDs.</p> <code>None</code> <code>name</code> <code>str or list[str]</code> <p>Filter by name(s).</p> <code>None</code> <code>exact_match</code> <code>bool</code> <p>Whether the name filter should match exactly.</p> <code>None</code> <code>default</code> <code>bool</code> <p>Whether to return only default columns.</p> <code>None</code> <code>start_key</code> <code>str</code> <p>The pagination key to start from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[DataColumn]</code> <p>An iterator over matching DataColumn entities.</p> Source code in <code>src/albert/collections/data_columns.py</code> <pre><code>@validate_call\ndef get_all(\n    self,\n    *,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    ids: DataColumnId | list[DataColumnId] | None = None,\n    name: str | list[str] | None = None,\n    exact_match: bool | None = None,\n    default: bool | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[DataColumn]:\n    \"\"\"\n    Get all data column entities with optional filters.\n\n    Parameters\n    ----------\n    order_by : OrderBy, optional\n        The order in which to sort the results. Default is DESCENDING.\n    ids : str or list[str], optional\n        Filter by one or more data column IDs.\n    name : str or list[str], optional\n        Filter by name(s).\n    exact_match : bool, optional\n        Whether the name filter should match exactly.\n    default : bool, optional\n        Whether to return only default columns.\n    start_key : str, optional\n        The pagination key to start from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[DataColumn]\n        An iterator over matching DataColumn entities.\n    \"\"\"\n\n    def deserialize(items: list[dict]) -&gt; Iterator[DataColumn]:\n        yield from (DataColumn(**item) for item in items)\n\n    params = {\n        \"orderBy\": order_by.value,\n        \"startKey\": start_key,\n        \"name\": [name] if isinstance(name, str) else name,\n        \"exactMatch\": exact_match,\n        \"default\": default,\n        \"dataColumns\": [ids] if isinstance(ids, str) else ids,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=deserialize,\n    )\n</code></pre>"},{"location":"collections/data_columns/#albert.collections.data_columns.DataColumnCollection.create","title":"create","text":"<pre><code>create(*, data_column: DataColumn) -&gt; DataColumn\n</code></pre> <p>Create a new data column entity.</p> <p>Parameters:</p> Name Type Description Default <code>data_column</code> <code>DataColumn</code> <p>The data column object to create.</p> required <p>Returns:</p> Type Description <code>DataColumn</code> <p>The created data column object.</p> Source code in <code>src/albert/collections/data_columns.py</code> <pre><code>def create(self, *, data_column: DataColumn) -&gt; DataColumn:\n    \"\"\"\n    Create a new data column entity.\n\n    Parameters\n    ----------\n    data_column : DataColumn\n        The data column object to create.\n\n    Returns\n    -------\n    DataColumn\n        The created data column object.\n    \"\"\"\n    payload = [data_column.model_dump(by_alias=True, exclude_unset=True, mode=\"json\")]\n    response = self.session.post(self.base_path, json=payload)\n\n    return DataColumn(**response.json()[0])\n</code></pre>"},{"location":"collections/data_columns/#albert.collections.data_columns.DataColumnCollection.delete","title":"delete","text":"<pre><code>delete(*, id: DataColumnId) -&gt; None\n</code></pre> <p>Delete a data column entity.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the data column object to delete.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/data_columns.py</code> <pre><code>@validate_call\ndef delete(self, *, id: DataColumnId) -&gt; None:\n    \"\"\"\n    Delete a data column entity.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the data column object to delete.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    self.session.delete(f\"{self.base_path}/{id}\")\n</code></pre>"},{"location":"collections/data_columns/#albert.collections.data_columns.DataColumnCollection.update","title":"update","text":"<pre><code>update(*, data_column: DataColumn) -&gt; DataColumn\n</code></pre> <p>Update a data column entity.</p> <p>Parameters:</p> Name Type Description Default <code>data_column</code> <code>DataColumn</code> <p>The updated data column object. The ID must be set and match an existing data column.</p> required <p>Returns:</p> Type Description <code>DataColumn</code> <p>The updated data column object as registered in Albert.</p> Source code in <code>src/albert/collections/data_columns.py</code> <pre><code>def update(self, *, data_column: DataColumn) -&gt; DataColumn:\n    \"\"\"Update a data column entity.\n\n    Parameters\n    ----------\n    data_column : DataColumn\n        The updated data column object. The ID must be set and match an existing data column.\n\n    Returns\n    -------\n    DataColumn\n        The updated data column object as registered in Albert.\n    \"\"\"\n    existing = self.get_by_id(id=data_column.id)\n    payload = self._generate_patch_payload(\n        existing=existing,\n        updated=data_column,\n    )\n    payload_dump = payload.model_dump(mode=\"json\", by_alias=True)\n    for i, change in enumerate(payload_dump[\"data\"]):\n        if not self._is_metadata_item_list(\n            existing_object=existing,\n            updated_object=data_column,\n            metadata_field=change[\"attribute\"],\n        ):\n            change[\"operation\"] = \"update\"\n            if \"newValue\" in change and change[\"newValue\"] is None:\n                del change[\"newValue\"]\n            if \"oldValue\" in change and change[\"oldValue\"] is None:\n                del change[\"oldValue\"]\n            payload_dump[\"data\"][i] = change\n    if len(payload_dump[\"data\"]) == 0:\n        return data_column\n    for e in payload_dump[\"data\"]:\n        self.session.patch(\n            f\"{self.base_path}/{data_column.id}\",\n            json={\"data\": [e]},\n        )\n    return self.get_by_id(id=data_column.id)\n</code></pre>"},{"location":"collections/data_templates/","title":"Data Templates","text":""},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection","title":"albert.collections.data_templates.DataTemplateCollection","text":"<pre><code>DataTemplateCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>DataTemplateCollection is a collection class for managing DataTemplate entities in the Albert platform.</p> <p>Methods:</p> Name Description <code>create</code> <p>Creates a new data template.</p> <code>get_by_id</code> <p>Get a data template by its ID.</p> <code>get_by_ids</code> <p>Get a list of data templates by their IDs.</p> <code>get_by_name</code> <p>Get a data template by its name.</p> <code>add_data_columns</code> <p>Adds data columns to a data template.</p> <code>add_parameters</code> <p>Adds parameters to a data template.</p> <code>search</code> <p>Search for DataTemplate matching the provided criteria.</p> <code>update</code> <p>Updates a data template.</p> <code>delete</code> <p>Deletes a data template by its ID.</p> <code>get_all</code> <p>Retrieve fully hydrated DataTemplate entities with optional filters.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    super().__init__(session=session)\n    self.base_path = f\"/api/{DataTemplateCollection._api_version}/datatemplates\"\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/datatemplates'\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.create","title":"create","text":"<pre><code>create(*, data_template: DataTemplate) -&gt; DataTemplate\n</code></pre> <p>Creates a new data template.</p> <p>Parameters:</p> Name Type Description Default <code>data_template</code> <code>DataTemplate</code> <p>The DataTemplate object to create.</p> required <p>Returns:</p> Type Description <code>DataTemplate</code> <p>The registered DataTemplate object with an ID.</p> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>def create(self, *, data_template: DataTemplate) -&gt; DataTemplate:\n    \"\"\"Creates a new data template.\n\n    Parameters\n    ----------\n    data_template : DataTemplate\n        The DataTemplate object to create.\n\n    Returns\n    -------\n    DataTemplate\n        The registered DataTemplate object with an ID.\n    \"\"\"\n    # Preprocess data_column_values to set validation to None if it is an empty list\n    # Handle a bug in the API where validation is an empty list\n    # https://support.albertinvent.com/hc/en-us/requests/9177\n    if (\n        isinstance(data_template.data_column_values, list)\n        and len(data_template.data_column_values) == 0\n    ):\n        data_template.data_column_values = None\n    if data_template.data_column_values is not None:\n        for column_value in data_template.data_column_values:\n            if isinstance(column_value.validation, list) and len(column_value.validation) == 0:\n                column_value.validation = None\n    # remove them on the initial post\n    parameter_values = data_template.parameter_values\n    data_template.parameter_values = None\n    response = self.session.post(\n        self.base_path,\n        json=data_template.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n    )\n    dt = DataTemplate(**response.json())\n    dt.parameter_values = parameter_values\n    if parameter_values is None or len(parameter_values) == 0:\n        return dt\n    else:\n        return self.add_parameters(data_template_id=dt.id, parameters=parameter_values)\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: DataTemplateId) -&gt; DataTemplate\n</code></pre> <p>Get a data template by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>DataTemplateId</code> <p>The ID of the data template to get.</p> required <p>Returns:</p> Type Description <code>DataTemplate</code> <p>The data template object on match or None</p> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: DataTemplateId) -&gt; DataTemplate:\n    \"\"\"Get a data template by its ID.\n\n    Parameters\n    ----------\n    id : DataTemplateId\n        The ID of the data template to get.\n\n    Returns\n    -------\n    DataTemplate\n        The data template object on match or None\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    return DataTemplate(**response.json())\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.get_by_ids","title":"get_by_ids","text":"<pre><code>get_by_ids(\n    *, ids: list[DataTemplateId]\n) -&gt; list[DataTemplate]\n</code></pre> <p>Get a list of data templates by their IDs.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[DataTemplateId]</code> <p>The list of DataTemplate IDs to get.</p> required <p>Returns:</p> Type Description <code>list[DataTemplate]</code> <p>A list of DataTemplate entities with the provided IDs.</p> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>def get_by_ids(self, *, ids: list[DataTemplateId]) -&gt; list[DataTemplate]:\n    \"\"\"Get a list of data templates by their IDs.\n\n    Parameters\n    ----------\n    ids : list[DataTemplateId]\n        The list of DataTemplate IDs to get.\n\n    Returns\n    -------\n    list[DataTemplate]\n        A list of DataTemplate entities with the provided IDs.\n    \"\"\"\n    url = f\"{self.base_path}/ids\"\n    batches = [ids[i : i + 250] for i in range(0, len(ids), 250)]\n    return [\n        DataTemplate(**item)\n        for batch in batches\n        for item in self.session.get(url, params={\"id\": batch}).json()[\"Items\"]\n    ]\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(*, name: str) -&gt; DataTemplate | None\n</code></pre> <p>Get a data template by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the data template to get.</p> required <p>Returns:</p> Type Description <code>DataTemplate | None</code> <p>The matching data template object or None if not found.</p> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>def get_by_name(self, *, name: str) -&gt; DataTemplate | None:\n    \"\"\"Get a data template by its name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the data template to get.\n\n    Returns\n    -------\n    DataTemplate | None\n        The matching data template object or None if not found.\n    \"\"\"\n    for t in self.search(name=name):\n        if t.name.lower() == name.lower():\n            return t.hydrate()\n    return None\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.add_data_columns","title":"add_data_columns","text":"<pre><code>add_data_columns(\n    *,\n    data_template_id: DataTemplateId,\n    data_columns: list[DataColumnValue],\n) -&gt; DataTemplate\n</code></pre> <p>Adds data columns to a data template.</p> <p>Parameters:</p> Name Type Description Default <code>data_template_id</code> <code>str</code> <p>The ID of the data template to add the columns to.</p> required <code>data_columns</code> <code>list[DataColumnValue]</code> <p>The list of DataColumnValue entities to add to the data template.</p> required <p>Returns:</p> Type Description <code>DataTemplate</code> <p>The updated DataTemplate object.</p> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>def add_data_columns(\n    self, *, data_template_id: DataTemplateId, data_columns: list[DataColumnValue]\n) -&gt; DataTemplate:\n    \"\"\"Adds data columns to a data template.\n\n    Parameters\n    ----------\n    data_template_id : str\n        The ID of the data template to add the columns to.\n    data_columns : list[DataColumnValue]\n        The list of DataColumnValue entities to add to the data template.\n\n    Returns\n    -------\n    DataTemplate\n        The updated DataTemplate object.\n    \"\"\"\n    # if there are enum values, we need to add them as an allowed enum\n    for column in data_columns:\n        if (\n            column.validation\n            and len(column.validation) &gt; 0\n            and isinstance(column.validation[0].value, list)\n        ):\n            for enum_value in column.validation[0].value:\n                self.session.put(\n                    f\"{self.base_path}/{data_template_id}/datacolumns/{column.sequence}/enums\",\n                    json=[\n                        enum_value.model_dump(mode=\"json\", by_alias=True, exclude_none=True)\n                    ],\n                )\n\n    payload = {\n        \"DataColumns\": [\n            x.model_dump(mode=\"json\", by_alias=True, exclude_none=True) for x in data_columns\n        ]\n    }\n    self.session.put(\n        f\"{self.base_path}/{data_template_id}/datacolumns\",\n        json=payload,\n    )\n    return self.get_by_id(id=data_template_id)\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.add_parameters","title":"add_parameters","text":"<pre><code>add_parameters(\n    *,\n    data_template_id: DataTemplateId,\n    parameters: list[ParameterValue],\n) -&gt; DataTemplate\n</code></pre> <p>Adds parameters to a data template.</p> <p>Parameters:</p> Name Type Description Default <code>data_template_id</code> <code>str</code> <p>The ID of the data template to add the columns to.</p> required <code>parameters</code> <code>list[ParameterValue]</code> <p>The list of ParameterValue entities to add to the data template.</p> required <p>Returns:</p> Type Description <code>DataTemplate</code> <p>The updated DataTemplate object.</p> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>def add_parameters(\n    self, *, data_template_id: DataTemplateId, parameters: list[ParameterValue]\n) -&gt; DataTemplate:\n    \"\"\"Adds parameters to a data template.\n\n    Parameters\n    ----------\n    data_template_id : str\n        The ID of the data template to add the columns to.\n    parameters : list[ParameterValue]\n        The list of ParameterValue entities to add to the data template.\n\n    Returns\n    -------\n    DataTemplate\n        The updated DataTemplate object.\n    \"\"\"\n    # make sure the parameter values have a default validaion of string type.\n    initial_enum_values = {}  # use index to track the enum values\n    cleaned_params = []\n    if parameters is None or len(parameters) == 0:\n        return self.get_by_id(id=data_template_id)\n    for i, param in enumerate(parameters):\n        if (\n            param.validation\n            and len(param.validation) &gt; 0\n            and param.validation[0].datatype == DataType.ENUM\n        ):\n            initial_enum_values[i] = param.validation[0].value\n            param.validation[0].value = None\n            param.validation[0].datatype = DataType.STRING\n        cleaned_params.append(param)\n\n    payload = {\n        \"Parameters\": [\n            x.model_dump(mode=\"json\", by_alias=True, exclude_none=True) for x in cleaned_params\n        ]\n    }\n    # if there are enum values, we need to add them as an allowed enum\n    response = self.session.put(\n        f\"{self.base_path}/{data_template_id}/parameters\",\n        json=payload,\n    )\n    returned_parameters = [ParameterValue(**x) for x in response.json()[\"Parameters\"]]\n    for i, param in enumerate(returned_parameters):\n        if i in initial_enum_values:\n            param.validation[0].value = initial_enum_values[i]\n            param.validation[0].datatype = DataType.ENUM\n    self._add_param_enums(\n        data_template_id=data_template_id,\n        new_parameters=returned_parameters,\n    )\n    return self.get_by_id(id=data_template_id)\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.search","title":"search","text":"<pre><code>search(\n    *,\n    name: str | None = None,\n    user_id: UserId | None = None,\n    order_by: OrderBy = DESCENDING,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[DataTemplateSearchItem]\n</code></pre> <p>Search for DataTemplate matching the provided criteria.</p> <p>\u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance. To retrieve fully detailed entities, use <code>get_all</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the data template to filter by.</p> <code>None</code> <code>user_id</code> <code>str</code> <p>The user ID to filter by.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>The order in which to sort the results. Default is DESCENDING.</p> <code>DESCENDING</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The result offset to begin pagination from.</p> <code>0</code> <p>Returns:</p> Type Description <code>Iterator[DataTemplateSearchItem]</code> <p>An iterator of matching DataTemplateSearchItem entities.</p> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>@validate_call\ndef search(\n    self,\n    *,\n    name: str | None = None,\n    user_id: UserId | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[DataTemplateSearchItem]:\n    \"\"\"\n    Search for DataTemplate matching the provided criteria.\n\n    \u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance.\n    To retrieve fully detailed entities, use `get_all` instead.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name of the data template to filter by.\n    user_id : str, optional\n        The user ID to filter by.\n    order_by : OrderBy, optional\n        The order in which to sort the results. Default is DESCENDING.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n    offset : int, optional\n        The result offset to begin pagination from.\n\n    Returns\n    -------\n    Iterator[DataTemplateSearchItem]\n        An iterator of matching DataTemplateSearchItem entities.\n    \"\"\"\n    params = {\n        \"offset\": offset,\n        \"order\": order_by.value,\n        \"text\": name,\n        \"userId\": user_id,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/search\",\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [\n            DataTemplateSearchItem.model_validate(x)._bind_collection(self) for x in items\n        ],\n    )\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.update","title":"update","text":"<pre><code>update(*, data_template: DataTemplate) -&gt; DataTemplate\n</code></pre> <p>Updates a data template.</p> <p>Parameters:</p> Name Type Description Default <code>data_template</code> <code>DataTemplate</code> <p>The DataTemplate object to update. The ID must be set and matching the ID of the DataTemplate to update.</p> required <p>Returns:</p> Type Description <code>DataTemplate</code> <p>The Updated DataTemplate object.</p> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>def update(self, *, data_template: DataTemplate) -&gt; DataTemplate:\n    \"\"\"Updates a data template.\n\n    Parameters\n    ----------\n    data_template : DataTemplate\n        The DataTemplate object to update. The ID must be set and matching the ID of the DataTemplate to update.\n\n    Returns\n    -------\n    DataTemplate\n        The Updated DataTemplate object.\n    \"\"\"\n\n    existing = self.get_by_id(id=data_template.id)\n\n    base_payload = self._generate_patch_payload(existing=existing, updated=data_template)\n\n    path = f\"{self.base_path}/{existing.id}\"\n    (\n        general_patches,\n        new_data_columns,\n        data_column_enum_patches,\n        new_parameters,\n        parameter_enum_patches,\n        parameter_patches,\n    ) = generate_data_template_patches(\n        initial_patches=base_payload,\n        updated_data_template=data_template,\n        existing_data_template=existing,\n    )\n\n    if len(new_data_columns) &gt; 0:\n        self.session.put(\n            f\"{self.base_path}/{existing.id}/datacolumns\",\n            json={\n                \"DataColumns\": [\n                    x.model_dump(mode=\"json\", by_alias=True, exclude_none=True)\n                    for x in new_data_columns\n                ],\n            },\n        )\n    data_column_enum_sequences = {}\n    if len(data_column_enum_patches) &gt; 0:\n        for sequence, enum_patches in data_column_enum_patches.items():\n            if len(enum_patches) == 0:\n                continue\n            logger.info(\n                f\"SENDING DATA COLUMN ENUM PATCHES FOR SEQUENCE {sequence}: {enum_patches}\"\n            )\n            enums = self.session.put(\n                f\"{self.base_path}/{existing.id}/datacolumns/{sequence}/enums\",\n                json=enum_patches,  # these are simple dicts for now\n            )\n            data_column_enum_sequences[sequence] = [\n                EnumValidationValue(**x) for x in enums.json()\n            ]\n    if len(new_parameters) &gt; 0:\n        # remove enum types, will become enums after enum adds\n        initial_enum_values = {}  # track original enum values by index\n        no_enum_params = []\n        for i, p in enumerate(new_parameters):\n            if (\n                p.validation\n                and len(p.validation) &gt; 0\n                and p.validation[0].datatype == DataType.ENUM\n            ):\n                initial_enum_values[i] = p.validation[0].value\n                p.validation[0].datatype = DataType.STRING\n                p.validation[0].value = None\n            no_enum_params.append(p)\n\n        response = self.session.put(\n            f\"{self.base_path}/{existing.id}/parameters\",\n            json={\n                \"Parameters\": [\n                    x.model_dump(mode=\"json\", by_alias=True, exclude_none=True)\n                    for x in no_enum_params\n                ],\n            },\n        )\n\n        # Get returned parameters with sequences and restore enum values\n        returned_parameters = [ParameterValue(**x) for x in response.json()[\"Parameters\"]]\n        for i, param in enumerate(returned_parameters):\n            if i in initial_enum_values:\n                param.validation[0].value = initial_enum_values[i]\n                param.validation[0].datatype = DataType.ENUM\n\n        # Add enum values to newly created parameters\n        self._add_param_enums(\n            data_template_id=existing.id,\n            new_parameters=returned_parameters,\n        )\n    enum_sequences = {}\n    if len(parameter_enum_patches) &gt; 0:\n        for sequence, enum_patches in parameter_enum_patches.items():\n            if len(enum_patches) == 0:\n                continue\n\n            enums = self.session.put(\n                f\"{self.base_path}/{existing.id}/parameters/{sequence}/enums\",\n                json=enum_patches,  # these are simple dicts for now\n            )\n            enum_sequences[sequence] = [EnumValidationValue(**x) for x in enums.json()]\n\n    if len(parameter_patches) &gt; 0:\n        patches_by_sequence = {}\n        for p in parameter_patches:\n            if p.rowId not in patches_by_sequence:\n                patches_by_sequence[p.rowId] = []\n            patches_by_sequence[p.rowId].append(p)\n\n        for sequence, patches in patches_by_sequence.items():\n            # Filter out validation patches for sequences that have enum sequences\n            if sequence in enum_sequences:\n                patches = [p for p in patches if p.attribute != \"validation\"]\n\n                enums = enum_sequences[sequence]\n                enum_validation = ValueValidation(\n                    datatype=DataType.ENUM,\n                    value=enums,\n                )\n                enum_patch = PGPatchDatum(\n                    rowId=sequence,\n                    operation=\"update\",\n                    attribute=\"validation\",\n                    new_value=[enum_validation],\n                )\n                patches.append(enum_patch)\n\n            payload = PGPatchPayload(data=patches)\n            json_payload = payload.model_dump(mode=\"json\", by_alias=True, exclude_none=True)\n            self.session.patch(\n                path + \"/parameters\",\n                json=json_payload,\n            )\n    if len(general_patches.data) &gt; 0:\n        payload = GeneralPatchPayload(data=general_patches.data)\n        self.session.patch(\n            path,\n            json=payload.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n        )\n    return self.get_by_id(id=data_template.id)\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.delete","title":"delete","text":"<pre><code>delete(*, id: DataTemplateId) -&gt; None\n</code></pre> <p>Deletes a data template by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the data template to delete.</p> required Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>def delete(self, *, id: DataTemplateId) -&gt; None:\n    \"\"\"Deletes a data template by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the data template to delete.\n    \"\"\"\n    self.session.delete(f\"{self.base_path}/{id}\")\n</code></pre>"},{"location":"collections/data_templates/#albert.collections.data_templates.DataTemplateCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    name: str | None = None,\n    user_id: UserId | None = None,\n    order_by: OrderBy = DESCENDING,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[DataTemplate]\n</code></pre> <p>Retrieve fully hydrated DataTemplate entities with optional filters.</p> <p>This method returns complete entity data using <code>get_by_ids</code>. Use <code>search()</code> for faster retrieval when you only need lightweight, partial (unhydrated) entities.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the data template to filter by.</p> <code>None</code> <code>user_id</code> <code>str</code> <p>The user ID to filter by.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>The order in which to sort results. Default is DESCENDING.</p> <code>DESCENDING</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <code>offset</code> <code>int</code> <p>The result offset to begin pagination from.</p> <code>0</code> <p>Returns:</p> Type Description <code>Iterator[DataTemplate]</code> <p>An iterator over fully hydrated DataTemplate entities.</p> Source code in <code>src/albert/collections/data_templates.py</code> <pre><code>@validate_call\ndef get_all(\n    self,\n    *,\n    name: str | None = None,\n    user_id: UserId | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[DataTemplate]:\n    \"\"\"\n    Retrieve fully hydrated DataTemplate entities with optional filters.\n\n    This method returns complete entity data using `get_by_ids`.\n    Use `search()` for faster retrieval when you only need lightweight, partial (unhydrated) entities.\n\n    Parameters\n    ----------\n    name : str, optional\n        The name of the data template to filter by.\n    user_id : str, optional\n        The user ID to filter by.\n    order_by : OrderBy, optional\n        The order in which to sort results. Default is DESCENDING.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n    offset : int, optional\n        The result offset to begin pagination from.\n\n    Returns\n    -------\n    Iterator[DataTemplate]\n        An iterator over fully hydrated DataTemplate entities.\n    \"\"\"\n\n    def batched(iterable, size: int):\n        \"\"\"Yield lists of up to `size` IDs from an iterable of entities with an `id` attribute.\"\"\"\n        it = (item.id for item in iterable)\n        while batch := list(islice(it, size)):\n            yield batch\n\n    id_batches = batched(\n        self.search(\n            name=name,\n            user_id=user_id,\n            order_by=order_by,\n            max_items=max_items,\n            offset=offset,\n        ),\n        100,\n    )\n\n    for batch in id_batches:\n        try:\n            hydrated_templates = self.get_by_ids(ids=batch)\n            yield from hydrated_templates\n        except AlbertHTTPError as e:\n            logger.warning(f\"Error hydrating batch {batch}: {e}\")\n</code></pre>"},{"location":"collections/files/","title":"Files","text":""},{"location":"collections/files/#albert.collections.files.FileCollection","title":"albert.collections.files.FileCollection","text":"<pre><code>FileCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>FileCollection is a collection class for managing File entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_by_name</code> <p>Gets a file by name and namespace.</p> <code>get_signed_download_url</code> <p>Get a signed download URL for a file.</p> <code>get_signed_upload_url</code> <p>Get a signed upload URL for a file.</p> <code>sign_and_upload_file</code> <p>Sign and upload a file to Albert.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/files.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initialize the FileCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{FileCollection._api_version}/files\"\n</code></pre>"},{"location":"collections/files/#albert.collections.files.FileCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/files'\n</code></pre>"},{"location":"collections/files/#albert.collections.files.FileCollection.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(\n    *,\n    name: str,\n    namespace: FileNamespace,\n    generic: bool = False,\n) -&gt; FileInfo\n</code></pre> <p>Gets a file by name and namespace.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The Name of the file</p> required <code>namespace</code> <code>FileNamespace</code> <p>The namespace of the file (e.g. AGENT, BREAKTHROUGH, PIPELINE, PUBLIC, RESULT, SDS)</p> required <code>generic</code> <code>bool</code> <p>TODO: description, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>FileInfo</code> <p>The file information related to the matching file.</p> Source code in <code>src/albert/collections/files.py</code> <pre><code>def get_by_name(\n    self,\n    *,\n    name: str,\n    namespace: FileNamespace,\n    generic: bool = False,\n) -&gt; FileInfo:\n    \"\"\"Gets a file by name and namespace.\n\n    Parameters\n    ----------\n    name : str\n        The Name of the file\n    namespace : FileNamespace\n        The namespace of the file (e.g. AGENT, BREAKTHROUGH, PIPELINE, PUBLIC, RESULT, SDS)\n    generic : bool, optional\n        TODO: _description_, by default False\n\n    Returns\n    -------\n    FileInfo\n        The file information related to the matching file.\n    \"\"\"\n    params = {\n        \"name\": name,\n        \"namespace\": namespace,\n        \"generic\": json.dumps(generic),\n    }\n    response = self.session.get(f\"{self.base_path}/info\", params=params)\n    return FileInfo(**response.json())\n</code></pre>"},{"location":"collections/files/#albert.collections.files.FileCollection.get_signed_download_url","title":"get_signed_download_url","text":"<pre><code>get_signed_download_url(\n    *,\n    name: str,\n    namespace: FileNamespace,\n    version_id: str | None = None,\n    generic: bool = False,\n    category: FileCategory | None = None,\n) -&gt; str\n</code></pre> <p>Get a signed download URL for a file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The Name of the file</p> required <code>namespace</code> <code>FileNamespace</code> <p>The namespace of the file (e.g. AGENT, BREAKTHROUGH, PIPELINE, PUBLIC, RESULT, SDS)</p> required <code>version_id</code> <code>str | None</code> <p>The version of the file, by default None</p> <code>None</code> <code>category</code> <code>FileCategory | None</code> <p>The file category (E.g., SDS, OTHER), by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>S3 signed URL.</p> Source code in <code>src/albert/collections/files.py</code> <pre><code>def get_signed_download_url(\n    self,\n    *,\n    name: str,\n    namespace: FileNamespace,\n    version_id: str | None = None,\n    generic: bool = False,\n    category: FileCategory | None = None,\n) -&gt; str:\n    \"\"\"Get a signed download URL for a file.\n\n    Parameters\n    ----------\n    name : str\n        The Name of the file\n    namespace : FileNamespace\n        The namespace of the file (e.g. AGENT, BREAKTHROUGH, PIPELINE, PUBLIC, RESULT, SDS)\n    version_id : str | None, optional\n        The version of the file, by default None\n    category : FileCategory | None, optional\n        The file category (E.g., SDS, OTHER), by default None\n\n    Returns\n    -------\n    str\n        S3 signed URL.\n    \"\"\"\n    params = {\n        \"name\": name,\n        \"namespace\": namespace,\n        \"versionId\": version_id,\n        \"generic\": json.dumps(generic),\n        \"category\": category,\n    }\n    response = self.session.get(\n        f\"{self.base_path}/sign\",\n        params={k: v for k, v in params.items() if v is not None},\n    )\n    return response.json()[\"URL\"]\n</code></pre>"},{"location":"collections/files/#albert.collections.files.FileCollection.get_signed_upload_url","title":"get_signed_upload_url","text":"<pre><code>get_signed_upload_url(\n    *,\n    name: str,\n    namespace: FileNamespace,\n    content_type: str,\n    generic: bool = False,\n    category: FileCategory | None = None,\n) -&gt; str\n</code></pre> <p>Get a signed upload URL for a file.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The Name of the file</p> required <code>namespace</code> <code>FileNamespace</code> <p>The namespace of the file (e.g. AGENT, BREAKTHROUGH, PIPELINE, PUBLIC, RESULT, SDS)</p> required <code>content_type</code> <code>str</code> <p>The content type of the file</p> required <code>category</code> <code>FileCategory | None</code> <p>The File category (E.g., SDS, OTHER), by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>str</code> <p>S3 signed URL.</p> Source code in <code>src/albert/collections/files.py</code> <pre><code>def get_signed_upload_url(\n    self,\n    *,\n    name: str,\n    namespace: FileNamespace,\n    content_type: str,\n    generic: bool = False,\n    category: FileCategory | None = None,\n) -&gt; str:\n    \"\"\"Get a signed upload URL for a file.\n\n    Parameters\n    ----------\n    name : str\n        The Name of the file\n    namespace : FileNamespace\n        The namespace of the file (e.g. AGENT, BREAKTHROUGH, PIPELINE, PUBLIC, RESULT, SDS)\n    content_type : str\n        The content type of the file\n    category : FileCategory | None, optional\n        The File category (E.g., SDS, OTHER), by default None\n\n    Returns\n    -------\n    str\n        S3 signed URL.\n    \"\"\"\n    params = {\"generic\": json.dumps(generic)}\n\n    post_body = SignURLPOST(\n        files=[\n            SignURLPOSTFile(\n                name=name,\n                namespace=namespace,\n                content_type=content_type,\n                category=category,\n            )\n        ]\n    )\n\n    response = self.session.post(\n        f\"{self.base_path}/sign\",\n        json=post_body.model_dump(by_alias=True, exclude_unset=True, mode=\"json\"),\n        params=params,\n    )\n    return response.json()[0][\"URL\"]\n</code></pre>"},{"location":"collections/files/#albert.collections.files.FileCollection.sign_and_upload_file","title":"sign_and_upload_file","text":"<pre><code>sign_and_upload_file(\n    data: IO,\n    name: str,\n    namespace: FileNamespace,\n    content_type: str,\n    generic: bool = False,\n    category: FileCategory | None = None,\n) -&gt; None\n</code></pre> <p>Sign and upload a file to Albert.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>IO</code> <p>The file data</p> required <code>name</code> <code>str</code> <p>The name of the file</p> required <code>namespace</code> <code>FileNamespace</code> <p>The File Namespace (e.g., AGENT, BREAKTHROUGH, PIPELINE, PUBLIC, RESULT, SDS)</p> required <code>content_type</code> <code>str</code> <p>The content type of the file</p> required <code>category</code> <code>FileCategory | None</code> <p>The category of the file (E.g., SDS, OTHER), by default None</p> <code>None</code> Source code in <code>src/albert/collections/files.py</code> <pre><code>def sign_and_upload_file(\n    self,\n    data: IO,\n    name: str,\n    namespace: FileNamespace,\n    content_type: str,\n    generic: bool = False,\n    category: FileCategory | None = None,\n) -&gt; None:\n    \"\"\"Sign and upload a file to Albert.\n\n    Parameters\n    ----------\n    data : IO\n        The file data\n    name : str\n        The name of the file\n    namespace : FileNamespace\n        The File Namespace (e.g., AGENT, BREAKTHROUGH, PIPELINE, PUBLIC, RESULT, SDS)\n    content_type : str\n        The content type of the file\n    category : FileCategory | None, optional\n        The category of the file (E.g., SDS, OTHER), by default None\n    \"\"\"\n    upload_url = self.get_signed_upload_url(\n        name=name,\n        namespace=namespace,\n        content_type=content_type,\n        generic=generic,\n        category=category,\n    )\n    requests.put(upload_url, data=data, headers={\"Content-Type\": content_type})\n</code></pre>"},{"location":"collections/hazards/","title":"Hazards","text":""},{"location":"collections/hazards/#albert.collections.hazards.HazardsCollection","title":"albert.collections.hazards.HazardsCollection","text":"<pre><code>HazardsCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>Collection for fetching hazard symbols and statements.</p> <p>Methods:</p> Name Description <code>get_symbols</code> <p>Fetch the list of hazard symbols.</p> <code>get_statements</code> <p>Fetch the list of hazard statements.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/hazards.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    super().__init__(session=session)\n    self.base_path = f\"/api/{self._api_version}/static\"\n</code></pre>"},{"location":"collections/hazards/#albert.collections.hazards.HazardsCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/static'\n</code></pre>"},{"location":"collections/hazards/#albert.collections.hazards.HazardsCollection.get_symbols","title":"get_symbols","text":"<pre><code>get_symbols() -&gt; list[HazardSymbol]\n</code></pre> <p>Fetch the list of hazard symbols.</p> Source code in <code>src/albert/collections/hazards.py</code> <pre><code>@validate_call\ndef get_symbols(self) -&gt; list[HazardSymbol]:\n    \"\"\"Fetch the list of hazard symbols.\"\"\"\n\n    response = self.session.get(f\"{self.base_path}/hazardsymbols\")\n    response = response.json()\n    symbols = response.get(\"HazardSymbols\", []) if isinstance(response, dict) else []\n    return [HazardSymbol(**symbol) for symbol in symbols]\n</code></pre>"},{"location":"collections/hazards/#albert.collections.hazards.HazardsCollection.get_statements","title":"get_statements","text":"<pre><code>get_statements() -&gt; list[HazardStatement]\n</code></pre> <p>Fetch the list of hazard statements.</p> Source code in <code>src/albert/collections/hazards.py</code> <pre><code>@validate_call\ndef get_statements(self) -&gt; list[HazardStatement]:\n    \"\"\"Fetch the list of hazard statements.\"\"\"\n\n    response = self.session.get(f\"{self.base_path}/hazardstatements\")\n    response = response.json()\n    return [HazardStatement(**item) for item in response]\n</code></pre>"},{"location":"collections/inventory/","title":"Inventory","text":""},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection","title":"albert.collections.inventory.InventoryCollection","text":"<pre><code>InventoryCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>InventoryCollection is a collection class for managing Inventory Item entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>Albert</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>merge</code> <p>Merge one or multiple child inventory into a parent inventory item.</p> <code>exists</code> <p>Check if an inventory item exists.</p> <code>get_match_or_none</code> <p>Get a matching inventory item by name and company, or return None if not found.</p> <code>create</code> <p>Create a new inventory item.</p> <code>get_by_id</code> <p>Retrieve an inventory item by its ID.</p> <code>get_by_ids</code> <p>Retrieve a set of inventory items by their IDs.</p> <code>get_specs</code> <p>Get the specs for a list of inventory items.</p> <code>add_specs</code> <p>Add inventory specs to the inventory item.</p> <code>delete</code> <p>Delete an inventory item by its ID.</p> <code>get_all_facets</code> <p>Get available facets for inventory items based on the provided filters.</p> <code>get_facet_by_name</code> <p>Returns a specific facet by its name with all the filters applied to the search.</p> <code>search</code> <p>Search for Inventory items matching the provided criteria.</p> <code>get_all</code> <p>Retrieve fully hydrated InventoryItem entities with optional filters.</p> <code>update</code> <p>Update an inventory item.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    InventoryCollection is a collection class for managing inventory items.\n\n    Parameters\n    ----------\n    session : Albert\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{InventoryCollection._api_version}/inventories\"\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/inventories'\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.merge","title":"merge","text":"<pre><code>merge(\n    *,\n    parent_id: InventoryId,\n    child_id: InventoryId | list[InventoryId],\n    modules: list[str] | None = None,\n) -&gt; None\n</code></pre> <p>Merge one or multiple child inventory into a parent inventory item.</p> <p>Parameters:</p> Name Type Description Default <code>parent_id</code> <code>InventoryId</code> <p>The ID of the parent inventory item.</p> required <code>child_id</code> <code>InventoryId | list[InventoryId]</code> <p>The ID(s) of the child inventory item(s).</p> required <code>modules</code> <code>list[str]</code> <p>The merge modules to use (default is all).</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef merge(\n    self,\n    *,\n    parent_id: InventoryId,\n    child_id: InventoryId | list[InventoryId],\n    modules: list[str] | None = None,\n) -&gt; None:\n    \"\"\"\n    Merge one or multiple child inventory into a parent inventory item.\n\n    Parameters\n    ----------\n    parent_id : InventoryId\n        The ID of the parent inventory item.\n    child_id : InventoryId | list[InventoryId]\n        The ID(s) of the child inventory item(s).\n    modules : list[str], optional\n        The merge modules to use (default is all).\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    # assume \"all\" modules if not specified explicitly\n    modules = modules if modules is not None else ALL_MERGE_MODULES\n\n    # define merge endpoint\n    url = f\"{self.base_path}/merge\"\n\n    if isinstance(child_id, list):\n        child_inventories = [{\"id\": i} for i in child_id]\n    else:\n        child_inventories = [{\"id\": child_id}]\n\n    # define payload using the class\n    payload = MergeInventory(\n        parent_id=parent_id,\n        child_inventories=child_inventories,\n        modules=modules,\n    )\n\n    # post request\n    self.session.post(url, json=payload.model_dump(mode=\"json\", by_alias=True))\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.exists","title":"exists","text":"<pre><code>exists(*, inventory_item: InventoryItem) -&gt; bool\n</code></pre> <p>Check if an inventory item exists.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_item</code> <code>InventoryItem</code> <p>The inventory item to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the inventory item exists, False otherwise.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>def exists(self, *, inventory_item: InventoryItem) -&gt; bool:\n    \"\"\"\n    Check if an inventory item exists.\n\n    Parameters\n    ----------\n    inventory_item : InventoryItem\n        The inventory item to check.\n\n    Returns\n    -------\n    bool\n        True if the inventory item exists, False otherwise.\n    \"\"\"\n    hit = self.get_match_or_none(inventory_item=inventory_item)\n    return bool(hit)\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.get_match_or_none","title":"get_match_or_none","text":"<pre><code>get_match_or_none(\n    *, inventory_item: InventoryItem\n) -&gt; InventoryItem | None\n</code></pre> <p>Get a matching inventory item by name and company, or return None if not found.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_item</code> <code>InventoryItem</code> <p>The inventory item to match.</p> required <p>Returns:</p> Type Description <code>InventoryItem or None</code> <p>The matching inventory item, or None if no match is found.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>def get_match_or_none(self, *, inventory_item: InventoryItem) -&gt; InventoryItem | None:\n    \"\"\"\n    Get a matching inventory item by name and company, or return None if not found.\n\n    Parameters\n    ----------\n    inventory_item : InventoryItem\n        The inventory item to match.\n\n    Returns\n    -------\n    InventoryItem or None\n        The matching inventory item, or None if no match is found.\n    \"\"\"\n    inv_company = (\n        inventory_item.company.name\n        if isinstance(inventory_item.company, Company)\n        else inventory_item.company\n    )\n\n    hits = self.get_all(\n        text=inventory_item.name, company=[inventory_item.company], max_items=100\n    )\n\n    for inv in hits:\n        if inv and inv.name == inventory_item.name and inv.company.name == inv_company:\n            return inv\n    return None\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.create","title":"create","text":"<pre><code>create(\n    *,\n    inventory_item: InventoryItem,\n    avoid_duplicates: bool = True,\n) -&gt; InventoryItem\n</code></pre> <p>Create a new inventory item.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_item</code> <code>InventoryItem</code> <p>The inventory item to create.</p> required <code>avoid_duplicates</code> <code>bool</code> <p>Whether to avoid creating duplicate items (default is True).</p> <code>True</code> <p>Returns:</p> Type Description <code>InventoryItem</code> <p>The created inventory item.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>def create(\n    self,\n    *,\n    inventory_item: InventoryItem,\n    avoid_duplicates: bool = True,\n) -&gt; InventoryItem:\n    \"\"\"\n    Create a new inventory item.\n\n    Parameters\n    ----------\n    inventory_item : InventoryItem\n        The inventory item to create.\n    avoid_duplicates : bool, optional\n        Whether to avoid creating duplicate items (default is True).\n\n    Returns\n    -------\n    InventoryItem\n        The created inventory item.\n    \"\"\"\n    category = (\n        inventory_item.category\n        if isinstance(inventory_item.category, str)\n        else inventory_item.category.value\n    )\n    if category == InventoryCategory.FORMULAS.value:\n        # This will need to interact with worksheets\n        raise NotImplementedError(\"Registrations of formulas not yet implemented\")\n    tag_collection = TagCollection(session=self.session)\n    if inventory_item.tags is not None and inventory_item.tags != []:\n        all_tags = [\n            tag_collection.get_or_create(tag=t) if t.id is None else t\n            for t in inventory_item.tags\n        ]\n        inventory_item.tags = all_tags\n    if inventory_item.company and inventory_item.company.id is None:\n        company_collection = CompanyCollection(session=self.session)\n        inventory_item.company = company_collection.get_or_create(\n            company=inventory_item.company\n        )\n    # Check to see if there is a match on name + Company already\n    if avoid_duplicates:\n        existing = self.get_match_or_none(inventory_item=inventory_item)\n        if isinstance(existing, InventoryItem):\n            logging.warning(\n                f\"Inventory item already exists with name {existing.name} and company {existing.company.name}, returning existing item.\"\n            )\n            return existing\n    response = self.session.post(\n        self.base_path,\n        json=inventory_item.model_dump(by_alias=True, exclude_none=True, mode=\"json\"),\n    )\n    return InventoryItem(**response.json())\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: InventoryId) -&gt; InventoryItem\n</code></pre> <p>Retrieve an inventory item by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>InventoryId</code> <p>The ID of the inventory item.</p> required <p>Returns:</p> Type Description <code>InventoryItem</code> <p>The retrieved inventory item.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: InventoryId) -&gt; InventoryItem:\n    \"\"\"\n    Retrieve an inventory item by its ID.\n\n    Parameters\n    ----------\n    id : InventoryId\n        The ID of the inventory item.\n\n    Returns\n    -------\n    InventoryItem\n        The retrieved inventory item.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    return InventoryItem(**response.json())\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.get_by_ids","title":"get_by_ids","text":"<pre><code>get_by_ids(\n    *, ids: list[InventoryId]\n) -&gt; list[InventoryItem]\n</code></pre> <p>Retrieve a set of inventory items by their IDs.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[InventoryId]</code> <p>The list of IDs of the inventory items.</p> required <p>Returns:</p> Type Description <code>list[InventoryItem]</code> <p>The retrieved inventory items.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef get_by_ids(self, *, ids: list[InventoryId]) -&gt; list[InventoryItem]:\n    \"\"\"\n    Retrieve a set of inventory items by their IDs.\n\n    Parameters\n    ----------\n    ids : list[InventoryId]\n        The list of IDs of the inventory items.\n\n    Returns\n    -------\n    list[InventoryItem]\n        The retrieved inventory items.\n    \"\"\"\n    batch_size = 250\n    batches = [ids[i : i + batch_size] for i in range(0, len(ids), batch_size)]\n    inventory = []\n    for batch in batches:\n        response = self.session.get(f\"{self.base_path}/ids\", params={\"id\": batch})\n        inventory.extend([InventoryItem(**item) for item in response.json()[\"Items\"]])\n    return inventory\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.get_specs","title":"get_specs","text":"<pre><code>get_specs(\n    *, ids: list[InventoryId]\n) -&gt; list[InventorySpecList]\n</code></pre> <p>Get the specs for a list of inventory items.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[InventoryId]</code> <p>List of Inventory IDs to get the specs for.</p> required <p>Returns:</p> Type Description <code>list[InventorySpecList]</code> <p>A list of InventorySpecList entities, each containing the specs for an inventory item.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef get_specs(self, *, ids: list[InventoryId]) -&gt; list[InventorySpecList]:\n    \"\"\"Get the specs for a list of inventory items.\n\n    Parameters\n    ----------\n    ids : list[InventoryId]\n        List of Inventory IDs to get the specs for.\n\n    Returns\n    -------\n    list[InventorySpecList]\n        A list of InventorySpecList entities, each containing the specs for an inventory item.\n    \"\"\"\n    url = f\"{self.base_path}/specs\"\n    batches = [ids[i : i + 250] for i in range(0, len(ids), 250)]\n    ta = TypeAdapter(InventorySpecList)\n    return [\n        ta.validate_python(item)\n        for batch in batches\n        for item in self.session.get(url, params={\"id\": batch}).json()\n    ]\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.add_specs","title":"add_specs","text":"<pre><code>add_specs(\n    *,\n    inventory_id: InventoryId,\n    specs: InventorySpec | list[InventorySpec],\n) -&gt; InventorySpecList\n</code></pre> <p>Add inventory specs to the inventory item.</p> <p>An <code>InventorySpec</code> is a property that was not directly measured via a task, but is a generic property of that inentory item.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>InventoryId</code> <p>The Albert ID of the inventory item to add the specs to</p> required <code>specs</code> <code>list[InventorySpec]</code> <p>List of InventorySpec entities to add to the inventory item, which described the value and, optionally, the conditions associated with the value (via workflow).</p> required <p>Returns:</p> Type Description <code>InventorySpecList</code> <p>The list of InventorySpecs attached to the InventoryItem.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef add_specs(\n    self,\n    *,\n    inventory_id: InventoryId,\n    specs: InventorySpec | list[InventorySpec],\n) -&gt; InventorySpecList:\n    \"\"\"Add inventory specs to the inventory item.\n\n    An `InventorySpec` is a property that was not directly measured via a task,\n    but is a generic property of that inentory item.\n\n    Parameters\n    ----------\n    inventory_id : InventoryId\n        The Albert ID of the inventory item to add the specs to\n    specs : list[InventorySpec]\n        List of InventorySpec entities to add to the inventory item,\n        which described the value and, optionally,\n        the conditions associated with the value (via workflow).\n\n    Returns\n    -------\n    InventorySpecList\n        The list of InventorySpecs attached to the InventoryItem.\n    \"\"\"\n    if isinstance(specs, InventorySpec):\n        specs = [specs]\n    response = self.session.put(\n        url=f\"{self.base_path}/{inventory_id}/specs\",\n        json=[x.model_dump(exclude_unset=True, by_alias=True, mode=\"json\") for x in specs],\n    )\n    return InventorySpecList(**response.json())\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.delete","title":"delete","text":"<pre><code>delete(*, id: InventoryId) -&gt; None\n</code></pre> <p>Delete an inventory item by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>InventoryId</code> <p>The ID of the inventory item.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef delete(self, *, id: InventoryId) -&gt; None:\n    \"\"\"\n    Delete an inventory item by its ID.\n\n    Parameters\n    ----------\n    id : InventoryId\n        The ID of the inventory item.\n\n    Returns\n    -------\n    None\n    \"\"\"\n\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.get_all_facets","title":"get_all_facets","text":"<pre><code>get_all_facets(\n    *,\n    text: str | None = None,\n    cas: list[Cas] | Cas | None = None,\n    category: list[InventoryCategory]\n    | InventoryCategory\n    | None = None,\n    company: list[Company] | Company | None = None,\n    location: list[Location] | Location | None = None,\n    storage_location: list[StorageLocation]\n    | StorageLocation\n    | None = None,\n    project_id: ProjectId | None = None,\n    sheet_id: WorksheetId | None = None,\n    created_by: list[User] | User | None = None,\n    lot_owner: list[User] | User | None = None,\n    tags: list[str] | None = None,\n    match_all_conditions: bool = False,\n) -&gt; list[FacetItem]\n</code></pre> <p>Get available facets for inventory items based on the provided filters.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef get_all_facets(\n    self,\n    *,\n    text: str | None = None,\n    cas: list[Cas] | Cas | None = None,\n    category: list[InventoryCategory] | InventoryCategory | None = None,\n    company: list[Company] | Company | None = None,\n    location: list[Location] | Location | None = None,\n    storage_location: list[StorageLocation] | StorageLocation | None = None,\n    project_id: ProjectId | None = None,\n    sheet_id: WorksheetId | None = None,\n    created_by: list[User] | User | None = None,\n    lot_owner: list[User] | User | None = None,\n    tags: list[str] | None = None,\n    match_all_conditions: bool = False,\n) -&gt; list[FacetItem]:\n    \"\"\"\n    Get available facets for inventory items based on the provided filters.\n    \"\"\"\n\n    params = self._prepare_parameters(\n        text=text,\n        cas=cas,\n        category=category,\n        company=company,\n        location=location,\n        storage_location=storage_location,\n        project_id=project_id,\n        sheet_id=sheet_id,\n        created_by=created_by,\n        lot_owner=lot_owner,\n        tags=tags,\n    )\n    params[\"limit\"] = 1\n    params = {k: v for k, v in params.items() if v is not None}\n    response = self.session.get(\n        url=f\"{self.base_path}/llmsearch\"\n        if match_all_conditions\n        else f\"{self.base_path}/search\",\n        params=params,\n    )\n    return [FacetItem.model_validate(x) for x in response.json()[\"Facets\"]]\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.get_facet_by_name","title":"get_facet_by_name","text":"<pre><code>get_facet_by_name(\n    name: str | list[str],\n    *,\n    text: str | None = None,\n    cas: list[Cas] | Cas | None = None,\n    category: list[InventoryCategory]\n    | InventoryCategory\n    | None = None,\n    company: list[Company] | Company | None = None,\n    location: list[Location] | Location | None = None,\n    storage_location: list[StorageLocation]\n    | StorageLocation\n    | None = None,\n    project_id: ProjectId | None = None,\n    sheet_id: WorksheetId | None = None,\n    created_by: list[User] | User | None = None,\n    lot_owner: list[User] | User | None = None,\n    tags: list[str] | None = None,\n    match_all_conditions: bool = False,\n) -&gt; list[FacetItem]\n</code></pre> <p>Returns a specific facet by its name with all the filters applied to the search. This can be used for example to fetch all remaining tags as part of an iterative refinement of a search.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef get_facet_by_name(\n    self,\n    name: str | list[str],\n    *,\n    text: str | None = None,\n    cas: list[Cas] | Cas | None = None,\n    category: list[InventoryCategory] | InventoryCategory | None = None,\n    company: list[Company] | Company | None = None,\n    location: list[Location] | Location | None = None,\n    storage_location: list[StorageLocation] | StorageLocation | None = None,\n    project_id: ProjectId | None = None,\n    sheet_id: WorksheetId | None = None,\n    created_by: list[User] | User | None = None,\n    lot_owner: list[User] | User | None = None,\n    tags: list[str] | None = None,\n    match_all_conditions: bool = False,\n) -&gt; list[FacetItem]:\n    \"\"\"\n    Returns a specific facet by its name with all the filters applied to the search.\n    This can be used for example to fetch all remaining tags as part of an iterative\n    refinement of a search.\n    \"\"\"\n    if isinstance(name, str):\n        name = [name]\n\n    facets = self.get_all_facets(\n        text=text,\n        cas=cas,\n        category=category,\n        company=company,\n        location=location,\n        storage_location=storage_location,\n        project_id=project_id,\n        sheet_id=sheet_id,\n        created_by=created_by,\n        lot_owner=lot_owner,\n        tags=tags,\n        match_all_conditions=match_all_conditions,\n    )\n    filtered_facets = []\n    for facet in facets:\n        if facet.name in name or facet.name.lower() in name:\n            filtered_facets.append(facet)\n\n    return filtered_facets\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.search","title":"search","text":"<pre><code>search(\n    *,\n    text: str | None = None,\n    cas: list[Cas] | Cas | None = None,\n    category: list[InventoryCategory]\n    | InventoryCategory\n    | None = None,\n    company: list[Company] | Company | None = None,\n    location: list[Location] | Location | None = None,\n    storage_location: list[StorageLocation]\n    | StorageLocation\n    | None = None,\n    project_id: ProjectId | None = None,\n    sheet_id: WorksheetId | None = None,\n    created_by: list[User] | User | None = None,\n    lot_owner: list[User] | User | None = None,\n    tags: list[str] | None = None,\n    match_all_conditions: bool = False,\n    order: OrderBy = DESCENDING,\n    sort_by: str | None = None,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[InventorySearchItem]\n</code></pre> <p>Search for Inventory items matching the provided criteria.</p> <p>\u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance. To retrieve fully detailed entities, use :meth:<code>get_all</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Search text for full-text matching.</p> <code>None</code> <code>cas</code> <code>Cas or list[Cas]</code> <p>Filter by CAS numbers.</p> <code>None</code> <code>category</code> <code>InventoryCategory or list[InventoryCategory]</code> <p>Filter by item category.</p> <code>None</code> <code>company</code> <code>Company or list[Company]</code> <p>Filter by associated company.</p> <code>None</code> <code>location</code> <code>Location or list[Location]</code> <p>Filter by location.</p> <code>None</code> <code>storage_location</code> <code>StorageLocation or list[StorageLocation]</code> <p>Filter by storage location.</p> <code>None</code> <code>project_id</code> <code>str</code> <p>Filter by project ID (formulas).</p> <code>None</code> <code>sheet_id</code> <code>str</code> <p>Filter by worksheet ID.</p> <code>None</code> <code>created_by</code> <code>User or list[User]</code> <p>Filter by creator(s).</p> <code>None</code> <code>lot_owner</code> <code>User or list[User]</code> <p>Filter by lot owner(s).</p> <code>None</code> <code>tags</code> <code>list[str]</code> <p>Filter by tag name(s).</p> <code>None</code> <code>match_all_conditions</code> <code>bool</code> <p>Whether to match all filters (AND logic). Default is False.</p> <code>False</code> <code>order</code> <code>OrderBy</code> <p>Sort order. Default is DESCENDING.</p> <code>DESCENDING</code> <code>sort_by</code> <code>str</code> <p>Field to sort results by. Default is None.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <code>offset</code> <code>int</code> <p>Offset for pagination. Default is 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>Iterator[InventorySearchItem]</code> <p>An iterator over partial (unhydrated) InventorySearchItem results.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef search(\n    self,\n    *,\n    text: str | None = None,\n    cas: list[Cas] | Cas | None = None,\n    category: list[InventoryCategory] | InventoryCategory | None = None,\n    company: list[Company] | Company | None = None,\n    location: list[Location] | Location | None = None,\n    storage_location: list[StorageLocation] | StorageLocation | None = None,\n    project_id: ProjectId | None = None,\n    sheet_id: WorksheetId | None = None,\n    created_by: list[User] | User | None = None,\n    lot_owner: list[User] | User | None = None,\n    tags: list[str] | None = None,\n    match_all_conditions: bool = False,\n    order: OrderBy = OrderBy.DESCENDING,\n    sort_by: str | None = None,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[InventorySearchItem]:\n    \"\"\"\n    Search for Inventory items matching the provided criteria.\n\n    \u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance.\n    To retrieve fully detailed entities, use :meth:`get_all` instead.\n\n    Parameters\n    ----------\n    text : str, optional\n        Search text for full-text matching.\n    cas : Cas or list[Cas], optional\n        Filter by CAS numbers.\n    category : InventoryCategory or list[InventoryCategory], optional\n        Filter by item category.\n    company : Company or list[Company], optional\n        Filter by associated company.\n    location : Location or list[Location], optional\n        Filter by location.\n    storage_location : StorageLocation or list[StorageLocation], optional\n        Filter by storage location.\n    project_id : str, optional\n        Filter by project ID (formulas).\n    sheet_id : str, optional\n        Filter by worksheet ID.\n    created_by : User or list[User], optional\n        Filter by creator(s).\n    lot_owner : User or list[User], optional\n        Filter by lot owner(s).\n    tags : list[str], optional\n        Filter by tag name(s).\n    match_all_conditions : bool, optional\n        Whether to match all filters (AND logic). Default is False.\n    order : OrderBy, optional\n        Sort order. Default is DESCENDING.\n    sort_by : str, optional\n        Field to sort results by. Default is None.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n    offset : int, optional\n        Offset for pagination. Default is 0.\n\n    Returns\n    -------\n    Iterator[InventorySearchItem]\n        An iterator over partial (unhydrated) InventorySearchItem results.\n    \"\"\"\n\n    def deserialize(items: list[dict]):\n        return [InventorySearchItem.model_validate(x)._bind_collection(self) for x in items]\n\n    search_text = text if (text is None or len(text) &lt; 50) else text[:50]\n\n    query_params = self._prepare_parameters(\n        text=search_text,\n        cas=cas,\n        category=category,\n        company=company,\n        order=order,\n        sort_by=sort_by,\n        location=location,\n        storage_location=storage_location,\n        project_id=project_id,\n        sheet_id=sheet_id,\n        created_by=created_by,\n        lot_owner=lot_owner,\n        tags=tags,\n        offset=offset,\n    )\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/llmsearch\"\n        if match_all_conditions\n        else f\"{self.base_path}/search\",\n        params=query_params,\n        session=self.session,\n        max_items=max_items,\n        deserialize=deserialize,\n    )\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    text: str | None = None,\n    cas: list[Cas] | Cas | None = None,\n    category: list[InventoryCategory]\n    | InventoryCategory\n    | None = None,\n    company: list[Company] | Company | None = None,\n    location: list[Location] | Location | None = None,\n    storage_location: list[StorageLocation]\n    | StorageLocation\n    | None = None,\n    project_id: ProjectId | None = None,\n    sheet_id: WorksheetId | None = None,\n    created_by: list[User] | User | None = None,\n    lot_owner: list[User] | User | None = None,\n    tags: list[str] | None = None,\n    match_all_conditions: bool = False,\n    order: OrderBy = DESCENDING,\n    sort_by: str | None = None,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[InventoryItem]\n</code></pre> <p>Retrieve fully hydrated InventoryItem entities with optional filters.</p> <p>This method returns complete entity data using <code>get_by_ids</code>. Use <code>search()</code> for faster retrieval when you only need lightweight, partial (unhydrated) entities.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Search text for full-text matching.</p> <code>None</code> <code>cas</code> <code>Cas or list[Cas]</code> <p>Filter by CAS numbers.</p> <code>None</code> <code>category</code> <code>InventoryCategory or list[InventoryCategory]</code> <p>Filter by item category.</p> <code>None</code> <code>company</code> <code>Company or list[Company]</code> <p>Filter by associated company.</p> <code>None</code> <code>location</code> <code>Location or list[Location]</code> <p>Filter by location.</p> <code>None</code> <code>storage_location</code> <code>StorageLocation or list[StorageLocation]</code> <p>Filter by storage location.</p> <code>None</code> <code>project_id</code> <code>str</code> <p>Filter by project ID (formulas).</p> <code>None</code> <code>sheet_id</code> <code>str</code> <p>Filter by worksheet ID.</p> <code>None</code> <code>created_by</code> <code>User or list[User]</code> <p>Filter by creator(s).</p> <code>None</code> <code>lot_owner</code> <code>User or list[User]</code> <p>Filter by lot owner(s).</p> <code>None</code> <code>tags</code> <code>list[str]</code> <p>Filter by tag name(s).</p> <code>None</code> <code>match_all_conditions</code> <code>bool</code> <p>Whether to match all filters (AND logic). Default is False.</p> <code>False</code> <code>order</code> <code>OrderBy</code> <p>Sort order. Default is DESCENDING.</p> <code>DESCENDING</code> <code>sort_by</code> <code>str</code> <p>Field to sort results by. Default is None.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <code>offset</code> <code>int</code> <p>Offset for pagination. Default is 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>Iterator[InventoryItem]</code> <p>An iterator over fully hydrated InventoryItem entities.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>@validate_call\ndef get_all(\n    self,\n    *,\n    text: str | None = None,\n    cas: list[Cas] | Cas | None = None,\n    category: list[InventoryCategory] | InventoryCategory | None = None,\n    company: list[Company] | Company | None = None,\n    location: list[Location] | Location | None = None,\n    storage_location: list[StorageLocation] | StorageLocation | None = None,\n    project_id: ProjectId | None = None,\n    sheet_id: WorksheetId | None = None,\n    created_by: list[User] | User | None = None,\n    lot_owner: list[User] | User | None = None,\n    tags: list[str] | None = None,\n    match_all_conditions: bool = False,\n    order: OrderBy = OrderBy.DESCENDING,\n    sort_by: str | None = None,\n    max_items: int | None = None,\n    offset: int | None = 0,\n) -&gt; Iterator[InventoryItem]:\n    \"\"\"\n    Retrieve fully hydrated InventoryItem entities with optional filters.\n\n    This method returns complete entity data using `get_by_ids`.\n    Use `search()` for faster retrieval when you only need lightweight, partial (unhydrated) entities.\n\n    Parameters\n    ----------\n    text : str, optional\n        Search text for full-text matching.\n    cas : Cas or list[Cas], optional\n        Filter by CAS numbers.\n    category : InventoryCategory or list[InventoryCategory], optional\n        Filter by item category.\n    company : Company or list[Company], optional\n        Filter by associated company.\n    location : Location or list[Location], optional\n        Filter by location.\n    storage_location : StorageLocation or list[StorageLocation], optional\n        Filter by storage location.\n    project_id : str, optional\n        Filter by project ID (formulas).\n    sheet_id : str, optional\n        Filter by worksheet ID.\n    created_by : User or list[User], optional\n        Filter by creator(s).\n    lot_owner : User or list[User], optional\n        Filter by lot owner(s).\n    tags : list[str], optional\n        Filter by tag name(s).\n    match_all_conditions : bool, optional\n        Whether to match all filters (AND logic). Default is False.\n    order : OrderBy, optional\n        Sort order. Default is DESCENDING.\n    sort_by : str, optional\n        Field to sort results by. Default is None.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n    offset : int, optional\n        Offset for pagination. Default is 0.\n\n    Returns\n    -------\n    Iterator[InventoryItem]\n        An iterator over fully hydrated InventoryItem entities.\n    \"\"\"\n\n    def deserialize(items: list[dict]) -&gt; list[InventoryItem]:\n        return self.get_by_ids(ids=[x[\"albertId\"] for x in items])\n\n    search_text = text if (text is None or len(text) &lt; 50) else text[:50]\n\n    query_params = self._prepare_parameters(\n        text=search_text,\n        cas=cas,\n        category=category,\n        company=company,\n        order=order,\n        sort_by=sort_by,\n        location=location,\n        storage_location=storage_location,\n        project_id=project_id,\n        sheet_id=sheet_id,\n        created_by=created_by,\n        lot_owner=lot_owner,\n        tags=tags,\n        offset=offset,\n    )\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/llmsearch\"\n        if match_all_conditions\n        else f\"{self.base_path}/search\",\n        params=query_params,\n        session=self.session,\n        max_items=max_items,\n        deserialize=deserialize,\n    )\n</code></pre>"},{"location":"collections/inventory/#albert.collections.inventory.InventoryCollection.update","title":"update","text":"<pre><code>update(*, inventory_item: InventoryItem) -&gt; InventoryItem\n</code></pre> <p>Update an inventory item.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_item</code> <code>InventoryItem</code> <p>The updated inventory item object.</p> required <p>Returns:</p> Type Description <code>InventoryItem</code> <p>The updated inventory item retrieved from the server.</p> Source code in <code>src/albert/collections/inventory.py</code> <pre><code>def update(self, *, inventory_item: InventoryItem) -&gt; InventoryItem:\n    \"\"\"\n    Update an inventory item.\n\n    Parameters\n    ----------\n    inventory_item : InventoryItem\n        The updated inventory item object.\n\n    Returns\n    -------\n    InventoryItem\n        The updated inventory item retrieved from the server.\n    \"\"\"\n    # Fetch the current object state from the server or database\n    current_object = self.get_by_id(id=inventory_item.id)\n\n    # Generate the PATCH payload\n    patch_payload = self._generate_inventory_patch_payload(\n        existing=current_object, updated=inventory_item\n    )\n\n    # Complex patching is not working, so I'm going to do this in a loop :(\n    # https://teams.microsoft.com/l/message/19:de4a48c366664ce1bafcdbea02298810@thread.tacv2/1724856117312?tenantId=98aab90e-764b-48f1-afaa-02e3c7300653&amp;groupId=35a36a3d-fc25-4899-a1dd-ad9c7d77b5b3&amp;parentMessageId=1724856117312&amp;teamName=Product%20%2B%20Engineering&amp;channelName=General%20-%20API&amp;createdTime=1724856117312\n    url = f\"{self.base_path}/{inventory_item.id}\"\n    for change in patch_payload[\"data\"]:\n        change_payload = {\"data\": [change]}\n        self.session.patch(url, json=change_payload)\n    updated_inv = self.get_by_id(id=inventory_item.id)\n    return updated_inv\n</code></pre>"},{"location":"collections/links/","title":"Links","text":""},{"location":"collections/links/#albert.collections.links.LinksCollection","title":"albert.collections.links.LinksCollection","text":"<pre><code>LinksCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>LinksCollection is a collection class for managing Link entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <p>Creates a new link entity.</p> <code>get_all</code> <p>Get all link entities with optional filters.</p> <code>get_by_id</code> <p>Retrieves a link entity by its ID.</p> <code>delete</code> <p>Deletes a link entity by its ID.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/links.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the LinksCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{LinksCollection._api_version}/links\"\n</code></pre>"},{"location":"collections/links/#albert.collections.links.LinksCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/links'\n</code></pre>"},{"location":"collections/links/#albert.collections.links.LinksCollection.create","title":"create","text":"<pre><code>create(*, links: list[Link]) -&gt; list[Link]\n</code></pre> <p>Creates a new link entity.</p> <p>Parameters:</p> Name Type Description Default <code>links</code> <code>list[Link]</code> <p>List of Link entities to create.</p> required <p>Returns:</p> Type Description <code>Link</code> <p>The created link entity.</p> Source code in <code>src/albert/collections/links.py</code> <pre><code>def create(self, *, links: list[Link]) -&gt; list[Link]:\n    \"\"\"\n    Creates a new link entity.\n\n    Parameters\n    ----------\n    links : list[Link]\n        List of Link entities to create.\n\n    Returns\n    -------\n    Link\n        The created link entity.\n    \"\"\"\n    response = self.session.post(\n        self.base_path,\n        json=[l.model_dump(by_alias=True, exclude_none=True, mode=\"json\") for l in links],\n    )\n    return [Link(**l) for l in response.json()]\n</code></pre>"},{"location":"collections/links/#albert.collections.links.LinksCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    type: str | None = None,\n    category: LinkCategory | None = None,\n    id: str | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Link]\n</code></pre> <p>Get all link entities with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>type</code> <code>str</code> <p>The type of the link entities to return. Allowed values are <code>parent</code>, <code>child</code>, and <code>all</code>. If type is \"all\", both parent and child records for the given ID will be returned.</p> <code>None</code> <code>category</code> <code>LinkCategory</code> <p>The category of the link entities to return. Allowed values are <code>mention</code>, <code>linkedTask</code>, and <code>synthesis</code>.</p> <code>None</code> <code>id</code> <code>str</code> <p>The ID of the entity to fetch links for.</p> <code>None</code> <code>start_key</code> <code>str</code> <p>The pagination key to start from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Link]</code> <p>An iterator of Link entities.</p> Source code in <code>src/albert/collections/links.py</code> <pre><code>def get_all(\n    self,\n    *,\n    type: str | None = None,\n    category: LinkCategory | None = None,\n    id: str | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Link]:\n    \"\"\"\n    Get all link entities with optional filters.\n\n    Parameters\n    ----------\n    type : str, optional\n        The type of the link entities to return. Allowed values are `parent`, `child`, and `all`.\n        If type is \"all\", both parent and child records for the given ID will be returned.\n    category : LinkCategory, optional\n        The category of the link entities to return. Allowed values are `mention`, `linkedTask`, and `synthesis`.\n    id : str, optional\n        The ID of the entity to fetch links for.\n    start_key : str, optional\n        The pagination key to start from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[Link]\n        An iterator of Link entities.\n    \"\"\"\n    params = {\n        \"type\": type,\n        \"category\": category,\n        \"id\": id,\n        \"startKey\": start_key,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [Link(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/links/#albert.collections.links.LinksCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: LinkId) -&gt; Link\n</code></pre> <p>Retrieves a link entity by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the link entity to retrieve.</p> required <p>Returns:</p> Type Description <code>Link</code> <p>The retrieved link entity.</p> Source code in <code>src/albert/collections/links.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: LinkId) -&gt; Link:\n    \"\"\"\n    Retrieves a link entity by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the link entity to retrieve.\n\n    Returns\n    -------\n    Link\n        The retrieved link entity.\n    \"\"\"\n    path = f\"{self.base_path}/{id}\"\n    response = self.session.get(path)\n    return Link(**response.json())\n</code></pre>"},{"location":"collections/links/#albert.collections.links.LinksCollection.delete","title":"delete","text":"<pre><code>delete(*, id: LinkId) -&gt; None\n</code></pre> <p>Deletes a link entity by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the link entity to delete.</p> required Source code in <code>src/albert/collections/links.py</code> <pre><code>@validate_call\ndef delete(self, *, id: LinkId) -&gt; None:\n    \"\"\"\n    Deletes a link entity by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the link entity to delete.\n    \"\"\"\n    path = f\"{self.base_path}/{id}\"\n    self.session.delete(path)\n</code></pre>"},{"location":"collections/lists/","title":"Lists","text":""},{"location":"collections/lists/#albert.collections.lists.ListsCollection","title":"albert.collections.lists.ListsCollection","text":"<pre><code>ListsCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>ListsCollection is a collection class for managing ListItem entities in the Albert platform.</p> Example <pre><code>stages = [\n    \"1. Discovery\",\n    \"2. Concept Validation\",\n    \"3. Proof of Concept\",\n    \"4. Prototype Development\",\n    \"5. Preliminary Evaluation\",\n    \"6. Feasibility Study\",\n    \"7. Optimization\",\n    \"8. Scale-Up\",\n    \"9. Regulatory Assessment\",\n]\n# Initialize the Albert client\nclient = Albert()\n\n# Get the custom field this list is associated with\nstage_gate_field = client.custom_fields.get_by_id(id=\"CF123\")\n\n# Create the list items\nfor s in stages:\n    item = ListItem(\n        name=s,\n        category=stage_gate_field.category,\n        list_type=stage_gate_field.name,\n    )\n\n    client.lists.create(list_item=item)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_all</code> <p>Get all list entities with optional filters.</p> <code>get_by_id</code> <p>Retrieves a list entity by its ID.</p> <code>create</code> <p>Creates a list entity.</p> <code>delete</code> <p>Delete a lists entry item by its ID.</p> <code>get_matching_item</code> <p>Get a list item by name and list type.</p> <code>update</code> <p>Update a list item.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/lists.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the ListsCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{ListsCollection._api_version}/lists\"\n</code></pre>"},{"location":"collections/lists/#albert.collections.lists.ListsCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/lists'\n</code></pre>"},{"location":"collections/lists/#albert.collections.lists.ListsCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    names: list[str] | None = None,\n    category: ListItemCategory | None = None,\n    list_type: str | None = None,\n    order_by: OrderBy = DESCENDING,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[ListItem]\n</code></pre> <p>Get all list entities with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>names</code> <code>list[str]</code> <p>A list of names to filter by.</p> <code>None</code> <code>category</code> <code>ListItemCategory</code> <p>The category of the list items to filter by.</p> <code>None</code> <code>list_type</code> <code>str</code> <p>The list type to filter by.</p> <code>None</code> <code>start_key</code> <code>str</code> <p>The pagination key to start from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[ListItem]</code> <p>An iterator of ListItem entities.</p> Source code in <code>src/albert/collections/lists.py</code> <pre><code>def get_all(\n    self,\n    *,\n    names: list[str] | None = None,\n    category: ListItemCategory | None = None,\n    list_type: str | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[ListItem]:\n    \"\"\"\n    Get all list entities with optional filters.\n\n    Parameters\n    ----------\n    names : list[str], optional\n        A list of names to filter by.\n    category : ListItemCategory, optional\n        The category of the list items to filter by.\n    list_type : str, optional\n        The list type to filter by.\n    start_key : str, optional\n        The pagination key to start from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[ListItem]\n        An iterator of ListItem entities.\n    \"\"\"\n    params = {\n        \"startKey\": start_key,\n        \"name\": names,\n        \"category\": category.value if isinstance(category, ListItemCategory) else category,\n        \"listType\": list_type,\n        \"orderBy\": order_by,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [ListItem(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/lists/#albert.collections.lists.ListsCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: str) -&gt; ListItem\n</code></pre> <p>Retrieves a list entity by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the list entity to retrieve.</p> required <p>Returns:</p> Type Description <code>List</code> <p>A list entity.</p> Source code in <code>src/albert/collections/lists.py</code> <pre><code>def get_by_id(self, *, id: str) -&gt; ListItem:\n    \"\"\"\n    Retrieves a list entity by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the list entity to retrieve.\n\n    Returns\n    -------\n    List\n        A list entity.\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    return ListItem(**response.json())\n</code></pre>"},{"location":"collections/lists/#albert.collections.lists.ListsCollection.create","title":"create","text":"<pre><code>create(*, list_item: ListItem) -&gt; ListItem\n</code></pre> <p>Creates a list entity.</p> <p>Parameters:</p> Name Type Description Default <code>list_item</code> <code>ListItem</code> <p>The list entity to create.</p> required <p>Returns:</p> Type Description <code>List</code> <p>The created list entity.</p> Source code in <code>src/albert/collections/lists.py</code> <pre><code>def create(self, *, list_item: ListItem) -&gt; ListItem:\n    \"\"\"\n    Creates a list entity.\n\n    Parameters\n    ----------\n    list_item : ListItem\n        The list entity to create.\n\n    Returns\n    -------\n    List\n        The created list entity.\n    \"\"\"\n    response = self.session.post(\n        self.base_path,\n        json=list_item.model_dump(by_alias=True, exclude_none=True, mode=\"json\"),\n    )\n    return ListItem(**response.json())\n</code></pre>"},{"location":"collections/lists/#albert.collections.lists.ListsCollection.delete","title":"delete","text":"<pre><code>delete(*, id: str) -&gt; None\n</code></pre> <p>Delete a lists entry item by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the lists item.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/lists.py</code> <pre><code>def delete(self, *, id: str) -&gt; None:\n    \"\"\"\n    Delete a lists entry item by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the lists item.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/lists/#albert.collections.lists.ListsCollection.get_matching_item","title":"get_matching_item","text":"<pre><code>get_matching_item(\n    *, name: str, list_type: str\n) -&gt; ListItem | None\n</code></pre> <p>Get a list item by name and list type.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of it item to retrieve.</p> required <code>list_type</code> <code>str</code> <p>The type of list (can be the name of the custom field)</p> required <p>Returns:</p> Type Description <code>ListItem | None</code> <p>A list item with the provided name and list type, or None if not found.</p> Source code in <code>src/albert/collections/lists.py</code> <pre><code>def get_matching_item(self, *, name: str, list_type: str) -&gt; ListItem | None:\n    \"\"\"Get a list item by name and list type.\n\n    Parameters\n    ----------\n    name : str\n        The name of it item to retrieve.\n    list_type : str\n        The type of list (can be the name of the custom field)\n\n    Returns\n    -------\n    ListItem | None\n        A list item with the provided name and list type, or None if not found.\n    \"\"\"\n    for list_item in self.get_all(names=[name], list_type=list_type, max_items=20):\n        # since it's a ranked search, we only need to check the first few results\n        if list_item.name.lower() == name.lower():\n            return list_item\n    return None\n</code></pre>"},{"location":"collections/lists/#albert.collections.lists.ListsCollection.update","title":"update","text":"<pre><code>update(*, list_item=ListItem) -&gt; ListItem\n</code></pre> <p>Update a list item.</p> <p>Parameters:</p> Name Type Description Default <code>list_item</code> <code>ListItem</code> <p>The list item to update.</p> <code>ListItem</code> <p>Returns:</p> Type Description <code>ListItem</code> <p>The updated list item.</p> Source code in <code>src/albert/collections/lists.py</code> <pre><code>def update(self, *, list_item=ListItem) -&gt; ListItem:\n    \"\"\"Update a list item.\n\n    Parameters\n    ----------\n    list_item : ListItem\n        The list item to update.\n\n    Returns\n    -------\n    ListItem\n        The updated list item.\n    \"\"\"\n    existing = self.get_by_id(id=list_item.id)\n    patches = self._generate_patch_payload(\n        existing=existing, updated=list_item, generate_metadata_diff=False\n    )\n    if len(patches.data) == 0:\n        return existing\n    self.session.patch(\n        url=f\"{self.base_path}/{list_item.id}\",\n        json=patches.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n    )\n    return self.get_by_id(id=list_item.id)\n</code></pre>"},{"location":"collections/locations/","title":"Locations","text":""},{"location":"collections/locations/#albert.collections.locations.LocationCollection","title":"albert.collections.locations.LocationCollection","text":"<pre><code>LocationCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>LocationCollection is a collection class for managing Location entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_all</code> <p>Get all Location entities matching the provided criteria.</p> <code>get_by_id</code> <p>Retrieves a location by its ID.</p> <code>update</code> <p>Update a Location entity.</p> <code>exists</code> <p>Determines if a location, with the same name, exists in the collection.</p> <code>create</code> <p>Creates a new Location entity.</p> <code>get_or_create</code> <p>Retrieves a Location by its name or creates it if it does not exist.</p> <code>delete</code> <p>Deletes a Location entity.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/locations.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the LocationCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{LocationCollection._api_version}/locations\"\n</code></pre>"},{"location":"collections/locations/#albert.collections.locations.LocationCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/locations'\n</code></pre>"},{"location":"collections/locations/#albert.collections.locations.LocationCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    ids: list[str] | None = None,\n    name: str | list[str] | None = None,\n    country: str | None = None,\n    exact_match: bool = False,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Location]\n</code></pre> <p>Get all Location entities matching the provided criteria.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[str]</code> <p>The list of IDs to filter the locations. Max length is 100.</p> <code>None</code> <code>name</code> <code>str or list[str]</code> <p>The name or names of locations to search for.</p> <code>None</code> <code>country</code> <code>str</code> <p>Country code to filter by.</p> <code>None</code> <code>exact_match</code> <code>bool</code> <p>Whether to return only exact matches. Default is False.</p> <code>False</code> <code>start_key</code> <code>str</code> <p>The pagination key to start from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Location]</code> <p>An iterator of Location entities matching the filters.</p> Source code in <code>src/albert/collections/locations.py</code> <pre><code>def get_all(\n    self,\n    *,\n    ids: list[str] | None = None,\n    name: str | list[str] | None = None,\n    country: str | None = None,\n    exact_match: bool = False,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Location]:\n    \"\"\"\n    Get all Location entities matching the provided criteria.\n\n    Parameters\n    ----------\n    ids : list[str], optional\n        The list of IDs to filter the locations. Max length is 100.\n    name : str or list[str], optional\n        The name or names of locations to search for.\n    country : str, optional\n        Country code to filter by.\n    exact_match : bool, optional\n        Whether to return only exact matches. Default is False.\n    start_key : str, optional\n        The pagination key to start from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[Location]\n        An iterator of Location entities matching the filters.\n    \"\"\"\n    params = {\n        \"startKey\": start_key,\n        \"country\": country,\n    }\n    if ids:\n        params[\"id\"] = ids\n    if name:\n        params[\"name\"] = [name] if isinstance(name, str) else name\n        params[\"exactMatch\"] = exact_match\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [Location(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/locations/#albert.collections.locations.LocationCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: str) -&gt; Location\n</code></pre> <p>Retrieves a location by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the location to retrieve.</p> required <p>Returns:</p> Type Description <code>Location</code> <p>The Location object.</p> Source code in <code>src/albert/collections/locations.py</code> <pre><code>def get_by_id(self, *, id: str) -&gt; Location:\n    \"\"\"\n    Retrieves a location by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the location to retrieve.\n\n    Returns\n    -------\n    Location\n        The Location object.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    return Location(**response.json())\n</code></pre>"},{"location":"collections/locations/#albert.collections.locations.LocationCollection.update","title":"update","text":"<pre><code>update(*, location: Location) -&gt; Location\n</code></pre> <p>Update a Location entity.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Location</code> <p>The Location entity to update. The ID of the Location entity must be provided.</p> required <p>Returns:</p> Type Description <code>Location</code> <p>The updated Location entity as returned by the server.</p> Source code in <code>src/albert/collections/locations.py</code> <pre><code>def update(self, *, location: Location) -&gt; Location:\n    \"\"\"Update a Location entity.\n\n    Parameters\n    ----------\n    location : Location\n        The Location entity to update. The ID of the Location entity must be provided.\n\n    Returns\n    -------\n    Location\n        The updated Location entity as returned by the server.\n    \"\"\"\n    # Fetch the current object state from the server or database\n    current_object = self.get_by_id(id=location.id)\n    # Generate the PATCH payload\n    patch_payload = self._generate_patch_payload(\n        existing=current_object,\n        updated=location,\n        stringify_values=True,\n    )\n    url = f\"{self.base_path}/{location.id}\"\n    self.session.patch(url, json=patch_payload.model_dump(mode=\"json\", by_alias=True))\n    return self.get_by_id(id=location.id)\n</code></pre>"},{"location":"collections/locations/#albert.collections.locations.LocationCollection.exists","title":"exists","text":"<pre><code>exists(*, location: Location) -&gt; Location | None\n</code></pre> <p>Determines if a location, with the same name, exists in the collection.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Location</code> <p>The Location entity to check</p> required <p>Returns:</p> Type Description <code>Location | None</code> <p>The existing registered Location entity if found, otherwise None.</p> Source code in <code>src/albert/collections/locations.py</code> <pre><code>def exists(self, *, location: Location) -&gt; Location | None:\n    \"\"\"Determines if a location, with the same name, exists in the collection.\n\n    Parameters\n    ----------\n    location : Location\n        The Location entity to check\n\n    Returns\n    -------\n    Location | None\n        The existing registered Location entity if found, otherwise None.\n    \"\"\"\n    hits = self.get_all(name=location.name)\n    for hit in hits:\n        if hit and hit.name.lower() == location.name.lower():\n            return hit\n    return None\n</code></pre>"},{"location":"collections/locations/#albert.collections.locations.LocationCollection.create","title":"create","text":"<pre><code>create(*, location: Location) -&gt; Location\n</code></pre> <p>Creates a new Location entity.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Location</code> <p>The Location entity to create.</p> required <p>Returns:</p> Type Description <code>Location</code> <p>The created Location entity.</p> Source code in <code>src/albert/collections/locations.py</code> <pre><code>def create(self, *, location: Location) -&gt; Location:\n    \"\"\"\n    Creates a new Location entity.\n\n    Parameters\n    ----------\n    location : Location\n        The Location entity to create.\n\n    Returns\n    -------\n    Location\n        The created Location entity.\n    \"\"\"\n    payload = location.model_dump(by_alias=True, exclude_unset=True, mode=\"json\")\n    response = self.session.post(self.base_path, json=payload)\n\n    return Location(**response.json())\n</code></pre>"},{"location":"collections/locations/#albert.collections.locations.LocationCollection.get_or_create","title":"get_or_create","text":"<pre><code>get_or_create(*, location: Location) -&gt; Location\n</code></pre> <p>Retrieves a Location by its name or creates it if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>location</code> <code>Location</code> <p>The Location entity to retrieve or create.</p> required <p>Returns:</p> Type Description <code>Location</code> <p>The found or created Location entity.</p> Source code in <code>src/albert/collections/locations.py</code> <pre><code>def get_or_create(self, *, location: Location) -&gt; Location:\n    \"\"\"\n    Retrieves a Location by its name or creates it if it does not exist.\n\n    Parameters\n    ----------\n    location : Location\n        The Location entity to retrieve or create.\n\n    Returns\n    -------\n    Location\n        The found or created Location entity.\n    \"\"\"\n    found = self.exists(location=location)\n    if found:\n        return found\n    else:\n        return self.create(location=location)\n</code></pre>"},{"location":"collections/locations/#albert.collections.locations.LocationCollection.delete","title":"delete","text":"<pre><code>delete(*, id: str) -&gt; None\n</code></pre> <p>Deletes a Location entity.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>Str</code> <p>The id of the Location entity to delete.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/locations.py</code> <pre><code>def delete(self, *, id: str) -&gt; None:\n    \"\"\"\n    Deletes a Location entity.\n\n    Parameters\n    ----------\n    id : Str\n        The id of the Location entity to delete.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/lots/","title":"Lots","text":""},{"location":"collections/lots/#albert.collections.lots.LotCollection","title":"albert.collections.lots.LotCollection","text":"<pre><code>LotCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>LotCollection is a collection class for managing Lot entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>An Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <code>get_by_id</code> <p>Get a lot by its ID.</p> <code>get_by_ids</code> <p>Get a list of lots by their IDs.</p> <code>delete</code> <p>Delete a lot by its ID.</p> <code>get_all</code> <p>Get all Lot entities with optional filters.</p> <code>update</code> <p>Update a lot.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/lots.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"A collection for interacting with Lots in Albert.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        An Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{LotCollection._api_version}/lots\"\n</code></pre>"},{"location":"collections/lots/#albert.collections.lots.LotCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/lots'\n</code></pre>"},{"location":"collections/lots/#albert.collections.lots.LotCollection.create","title":"create","text":"<pre><code>create(*, lots: list[Lot]) -&gt; list[Lot]\n</code></pre> Source code in <code>src/albert/collections/lots.py</code> <pre><code>def create(self, *, lots: list[Lot]) -&gt; list[Lot]:\n    # TODO: Once thi endpoint is fixed, go back to passing the whole list at once\n    payload = [lot.model_dump(by_alias=True, exclude_none=True, mode=\"json\") for lot in lots]\n    all_lots = []\n    for lot in payload:\n        response = self.session.post(self.base_path, json=[lot])\n        all_lots.append(Lot(**response.json()[0]))\n    # response = self.session.post(self.base_path, json=payload)\n    # return [Lot(**lot) for lot in response.json().get(\"CreatedLots\", [])]\n    return all_lots\n</code></pre>"},{"location":"collections/lots/#albert.collections.lots.LotCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: LotId) -&gt; Lot\n</code></pre> <p>Get a lot by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the lot to get.</p> required <p>Returns:</p> Type Description <code>Lot</code> <p>The lot with the provided ID.</p> Source code in <code>src/albert/collections/lots.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: LotId) -&gt; Lot:\n    \"\"\"Get a lot by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the lot to get.\n\n    Returns\n    -------\n    Lot\n        The lot with the provided ID.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    return Lot(**response.json())\n</code></pre>"},{"location":"collections/lots/#albert.collections.lots.LotCollection.get_by_ids","title":"get_by_ids","text":"<pre><code>get_by_ids(*, ids: list[LotId]) -&gt; list[Lot]\n</code></pre> <p>Get a list of lots by their IDs.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[str]</code> <p>A list of lot IDs to get.</p> required <p>Returns:</p> Type Description <code>list[Lot]</code> <p>A list of lots with the provided IDs.</p> Source code in <code>src/albert/collections/lots.py</code> <pre><code>@validate_call\ndef get_by_ids(self, *, ids: list[LotId]) -&gt; list[Lot]:\n    \"\"\"Get a list of lots by their IDs.\n\n    Parameters\n    ----------\n    ids : list[str]\n        A list of lot IDs to get.\n\n    Returns\n    -------\n    list[Lot]\n        A list of lots with the provided IDs.\n    \"\"\"\n    url = f\"{self.base_path}/ids\"\n    response = self.session.get(url, params={\"id\": ids})\n    return [Lot(**lot) for lot in response.json()[\"Items\"]]\n</code></pre>"},{"location":"collections/lots/#albert.collections.lots.LotCollection.delete","title":"delete","text":"<pre><code>delete(*, id: LotId) -&gt; None\n</code></pre> <p>Delete a lot by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the lot to delete.</p> required Source code in <code>src/albert/collections/lots.py</code> <pre><code>@validate_call\ndef delete(self, *, id: LotId) -&gt; None:\n    \"\"\"Delete a lot by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the lot to delete.\n    \"\"\"\n    url = f\"{self.base_path}?id={id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/lots/#albert.collections.lots.LotCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    parent_id: InventoryId | None = None,\n    inventory_id: InventoryId | None = None,\n    barcode_id: str | None = None,\n    parent_id_category: str | None = None,\n    inventory_on_hand: str | None = None,\n    location_id: str | None = None,\n    exact_match: bool = False,\n    begins_with: bool = False,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Lot]\n</code></pre> <p>Get all Lot entities with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>parent_id</code> <code>str</code> <p>Fetch lots for the given parentId (inventory).</p> <code>None</code> <code>inventory_id</code> <code>str</code> <p>Fetch lots for the given inventoryId.</p> <code>None</code> <code>barcode_id</code> <code>str</code> <p>Fetch lots for the given barcodeId.</p> <code>None</code> <code>parent_id_category</code> <code>str</code> <p>Filter by parentIdCategory (e.g., RawMaterials, Consumables).</p> <code>None</code> <code>inventory_on_hand</code> <code>str</code> <p>Filter by inventoryOnHand (lteZero, gtZero, eqZero).</p> <code>None</code> <code>location_id</code> <code>str</code> <p>Filter by locationId.</p> <code>None</code> <code>exact_match</code> <code>bool</code> <p>Whether to match barcodeId exactly. Default is False.</p> <code>False</code> <code>begins_with</code> <code>bool</code> <p>Whether to match barcodeId as prefix. Default is False.</p> <code>False</code> <code>start_key</code> <code>str</code> <p>The pagination key to continue listing from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Lot]</code> <p>An iterator of Lot entities matching the filters.</p> Source code in <code>src/albert/collections/lots.py</code> <pre><code>@validate_call\ndef get_all(\n    self,\n    *,\n    parent_id: InventoryId | None = None,\n    inventory_id: InventoryId | None = None,\n    barcode_id: str | None = None,\n    parent_id_category: str | None = None,\n    inventory_on_hand: str | None = None,\n    location_id: str | None = None,\n    exact_match: bool = False,\n    begins_with: bool = False,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Lot]:\n    \"\"\"\n    Get all Lot entities with optional filters.\n\n    Parameters\n    ----------\n    parent_id : str, optional\n        Fetch lots for the given parentId (inventory).\n    inventory_id : str, optional\n        Fetch lots for the given inventoryId.\n    barcode_id : str, optional\n        Fetch lots for the given barcodeId.\n    parent_id_category : str, optional\n        Filter by parentIdCategory (e.g., RawMaterials, Consumables).\n    inventory_on_hand : str, optional\n        Filter by inventoryOnHand (lteZero, gtZero, eqZero).\n    location_id : str, optional\n        Filter by locationId.\n    exact_match : bool, optional\n        Whether to match barcodeId exactly. Default is False.\n    begins_with : bool, optional\n        Whether to match barcodeId as prefix. Default is False.\n    start_key : str, optional\n        The pagination key to continue listing from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[Lot]\n        An iterator of Lot entities matching the filters.\n    \"\"\"\n    params = {\n        \"parentId\": parent_id,\n        \"inventoryId\": inventory_id,\n        \"barcodeId\": barcode_id,\n        \"parentIdCategory\": parent_id_category,\n        \"inventoryOnHand\": inventory_on_hand,\n        \"locationId\": location_id,\n        \"startKey\": start_key,\n        \"exactMatch\": exact_match,\n        \"beginsWith\": begins_with,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [Lot(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/lots/#albert.collections.lots.LotCollection.update","title":"update","text":"<pre><code>update(*, lot: Lot) -&gt; Lot\n</code></pre> <p>Update a lot.</p> <p>Parameters:</p> Name Type Description Default <code>lot</code> <code>Lot</code> <p>The updated lot object.</p> required <p>Returns:</p> Type Description <code>Lot</code> <p>The updated Lot entity as returned by the server.</p> Source code in <code>src/albert/collections/lots.py</code> <pre><code>def update(self, *, lot: Lot) -&gt; Lot:\n    \"\"\"Update a lot.\n\n    Parameters\n    ----------\n    lot : Lot\n        The updated lot object.\n\n    Returns\n    -------\n    Lot\n        The updated Lot entity as returned by the server.\n    \"\"\"\n    existing_lot = self.get_by_id(id=lot.id)\n    patch_data = self._generate_lots_patch_payload(existing=existing_lot, updated=lot)\n    url = f\"{self.base_path}/{lot.id}\"\n    if patch_data.data:\n        self.session.patch(url, json=patch_data.model_dump(mode=\"json\", by_alias=True))\n\n    return self.get_by_id(id=lot.id)\n</code></pre>"},{"location":"collections/notebooks/","title":"Notebooks","text":""},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection","title":"albert.collections.notebooks.NotebookCollection","text":"<pre><code>NotebookCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>NotebookCollection is a collection class for managing Notebook entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_by_id</code> <p>Retrieve a Notebook by its ID.</p> <code>list_by_parent_id</code> <p>Retrieve a Notebook by parent ID.</p> <code>create</code> <p>Create or return notebook for the provided notebook.</p> <code>delete</code> <p>Deletes a notebook by its ID.</p> <code>update</code> <p>Update a notebook.</p> <code>update_block_content</code> <p>Updates the block content of a Notebook. This does not update the notebook name (use .update for that).</p> <code>get_block_by_id</code> <p>Retrieve a Notebook Block by its ID.</p> <code>copy</code> <p>Create a copy of a Notebook into a specified parent</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/notebooks.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the NotebookCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{NotebookCollection._api_version}/notebooks\"\n</code></pre>"},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/notebooks'\n</code></pre>"},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: NotebookId) -&gt; Notebook\n</code></pre> <p>Retrieve a Notebook by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the Notebook to retrieve.</p> required <p>Returns:</p> Type Description <code>Notebook</code> <p>The Notebook object.</p> Source code in <code>src/albert/collections/notebooks.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: NotebookId) -&gt; Notebook:\n    \"\"\"Retrieve a Notebook by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the Notebook to retrieve.\n\n    Returns\n    -------\n    Notebook\n        The Notebook object.\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    return Notebook(**response.json())\n</code></pre>"},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection.list_by_parent_id","title":"list_by_parent_id","text":"<pre><code>list_by_parent_id(\n    *, parent_id: ProjectId | TaskId\n) -&gt; list[Notebook]\n</code></pre> <p>Retrieve a Notebook by parent ID.</p> <p>Parameters:</p> Name Type Description Default <code>parent_id</code> <code>str</code> <p>The ID of the parent ID, e.g. task or project.</p> required <p>Returns:</p> Type Description <code>list[Notebook]</code> <p>list of notebook references.</p> Source code in <code>src/albert/collections/notebooks.py</code> <pre><code>@validate_call\ndef list_by_parent_id(self, *, parent_id: ProjectId | TaskId) -&gt; list[Notebook]:\n    \"\"\"Retrieve a Notebook by parent ID.\n\n    Parameters\n    ----------\n    parent_id : str\n        The ID of the parent ID, e.g. task or project.\n\n    Returns\n    -------\n    list[Notebook]\n        list of notebook references.\n\n    \"\"\"\n\n    # search\n    response = self.session.get(f\"{self.base_path}/{parent_id}/search\")\n    # return\n    return [self.get_by_id(id=x[\"id\"]) for x in response.json()[\"Items\"]]\n</code></pre>"},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection.create","title":"create","text":"<pre><code>create(*, notebook: Notebook) -&gt; Notebook\n</code></pre> <p>Create or return notebook for the provided notebook. This endpoint automatically tries to find an existing notebook with the same parameter setpoints, and will either return the existing notebook or create a new one.</p> <p>Parameters:</p> Name Type Description Default <code>notebook</code> <code>Notebook</code> <p>A list of Notebook entities to find or create.</p> required <p>Returns:</p> Type Description <code>Notebook</code> <p>A list of created or found Notebook entities.</p> Source code in <code>src/albert/collections/notebooks.py</code> <pre><code>def create(self, *, notebook: Notebook) -&gt; Notebook:\n    \"\"\"Create or return notebook for the provided notebook.\n    This endpoint automatically tries to find an existing notebook with the same parameter setpoints, and will either return the existing notebook or create a new one.\n\n    Parameters\n    ----------\n    notebook : Notebook\n        A list of Notebook entities to find or create.\n\n    Returns\n    -------\n    Notebook\n        A list of created or found Notebook entities.\n    \"\"\"\n    if notebook.blocks:\n        # This check keeps a user from corrupting the Notebook data.\n        msg = (\n            \"Cannot create a Notebook with pre-filled blocks. \"\n            \"Set `blocks=[]` (or do not set it) when creating it. \"\n            \"Use `.update_block_content()` afterward to add, update, or delete blocks.\"\n        )\n        raise AlbertException(msg)\n    response = self.session.post(\n        url=self.base_path,\n        json=notebook.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n        params={\"parentId\": notebook.parent_id},\n    )\n    return Notebook(**response.json())\n</code></pre>"},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection.delete","title":"delete","text":"<pre><code>delete(*, id: NotebookId) -&gt; None\n</code></pre> <p>Deletes a notebook by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the notebook to delete.</p> required Source code in <code>src/albert/collections/notebooks.py</code> <pre><code>@validate_call\ndef delete(self, *, id: NotebookId) -&gt; None:\n    \"\"\"\n    Deletes a notebook by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the notebook to delete.\n    \"\"\"\n    self.session.delete(f\"{self.base_path}/{id}\")\n</code></pre>"},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection.update","title":"update","text":"<pre><code>update(*, notebook: Notebook) -&gt; Notebook\n</code></pre> <p>Update a notebook.</p> <p>Parameters:</p> Name Type Description Default <code>notebook</code> <code>Notebook</code> <p>The updated notebook object.</p> required <p>Returns:</p> Type Description <code>Notebook</code> <p>The updated notebook object as returned by the server.</p> Source code in <code>src/albert/collections/notebooks.py</code> <pre><code>def update(self, *, notebook: Notebook) -&gt; Notebook:\n    \"\"\"Update a notebook.\n\n    Parameters\n    ----------\n    notebook : Notebook\n        The updated notebook object.\n\n    Returns\n    -------\n    Notebook\n        The updated notebook object as returned by the server.\n    \"\"\"\n    existing_notebook = self.get_by_id(id=notebook.id)\n    patch_data = self._generate_patch_payload(existing=existing_notebook, updated=notebook)\n    url = f\"{self.base_path}/{notebook.id}\"\n\n    self.session.patch(url, json=patch_data.model_dump(mode=\"json\", by_alias=True))\n\n    return self.get_by_id(id=notebook.id)\n</code></pre>"},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection.update_block_content","title":"update_block_content","text":"<pre><code>update_block_content(*, notebook: Notebook) -&gt; Notebook\n</code></pre> <p>Updates the block content of a Notebook. This does not update the notebook name (use .update for that). If a block in the Notebook does not already exist on Albert, it will be created. Note: The order of the Blocks in your Notebook matter and will be used in the updated Notebook!</p> <p>Parameters:</p> Name Type Description Default <code>notebook</code> <code>Notebook</code> <p>The updated notebook object.</p> required <p>Returns:</p> Type Description <code>Notebook</code> <p>The updated notebook object as returned by the server.</p> Source code in <code>src/albert/collections/notebooks.py</code> <pre><code>def update_block_content(self, *, notebook: Notebook) -&gt; Notebook:\n    \"\"\"\n    Updates the block content of a Notebook. This does not update the notebook name (use .update for that).\n    If a block in the Notebook does not already exist on Albert, it will be created.\n    *Note: The order of the Blocks in your Notebook matter and will be used in the updated Notebook!*\n\n\n    Parameters\n    ----------\n    notebook : Notebook\n        The updated notebook object.\n\n    Returns\n    -------\n    Notebook\n        The updated notebook object as returned by the server.\n    \"\"\"\n    put_data = self._generate_put_block_payload(notebook=notebook)\n    url = f\"{self.base_path}/{notebook.id}/content\"\n\n    self.session.put(url, json=put_data.model_dump(mode=\"json\", by_alias=True))\n\n    return self.get_by_id(id=notebook.id)\n</code></pre>"},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection.get_block_by_id","title":"get_block_by_id","text":"<pre><code>get_block_by_id(\n    *, notebook_id: NotebookId, block_id: str\n) -&gt; NotebookBlock\n</code></pre> <p>Retrieve a Notebook Block by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>notebook_id</code> <code>str</code> <p>The ID of the Notebook to which the Block belongs.</p> required <code>block_id</code> <code>str</code> <p>The ID of the Notebook Block to retrieve.</p> required <p>Returns:</p> Type Description <code>NotebookBlock</code> <p>The NotebookBlock object.</p> Source code in <code>src/albert/collections/notebooks.py</code> <pre><code>@validate_call\ndef get_block_by_id(self, *, notebook_id: NotebookId, block_id: str) -&gt; NotebookBlock:\n    \"\"\"Retrieve a Notebook Block by its ID.\n\n    Parameters\n    ----------\n    notebook_id : str\n        The ID of the Notebook to which the Block belongs.\n    block_id : str\n        The ID of the Notebook Block to retrieve.\n\n    Returns\n    -------\n    NotebookBlock\n        The NotebookBlock object.\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{notebook_id}/blocks/{block_id}\")\n    return TypeAdapter(NotebookBlock).validate_python(response.json())\n</code></pre>"},{"location":"collections/notebooks/#albert.collections.notebooks.NotebookCollection.copy","title":"copy","text":"<pre><code>copy(\n    *,\n    notebook_copy_info: NotebookCopyInfo,\n    type: NotebookCopyType,\n) -&gt; Notebook\n</code></pre> <p>Create a copy of a Notebook into a specified parent</p> <p>Parameters:</p> Name Type Description Default <code>notebook_copy_info</code> <code>NotebookCopyInfo</code> <p>The copy information for the Notebook copy</p> required <code>type</code> <code>NotebookCopyType</code> <p>Differentiate whether copy is for templates, task, project or restoreTemplate</p> required <p>Returns:</p> Type Description <code>Notebook</code> <p>The result of the copied Notebook.</p> Source code in <code>src/albert/collections/notebooks.py</code> <pre><code>def copy(self, *, notebook_copy_info: NotebookCopyInfo, type: NotebookCopyType) -&gt; Notebook:\n    \"\"\"Create a copy of a Notebook into a specified parent\n\n    Parameters\n    ----------\n    notebook_copy_info : NotebookCopyInfo\n        The copy information for the Notebook copy\n    type : NotebookCopyType\n        Differentiate whether copy is for templates, task, project or restoreTemplate\n\n    Returns\n    -------\n    Notebook\n        The result of the copied Notebook.\n    \"\"\"\n    response = self.session.post(\n        url=f\"{self.base_path}/copy\",\n        json=notebook_copy_info.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n        params={\"type\": type, \"parentId\": notebook_copy_info.parent_id},\n    )\n    return Notebook(**response.json())\n</code></pre>"},{"location":"collections/notes/","title":"Notes","text":""},{"location":"collections/notes/#albert.collections.notes.NotesCollection","title":"albert.collections.notes.NotesCollection","text":"<pre><code>NotesCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>NotesCollection is a collection class for managing Note entities in the Albert platform.</p> <p>Methods:</p> Name Description <code>create</code> <p>Creates a new note.</p> <code>get_by_id</code> <p>Retrieves a note by its ID.</p> <code>update</code> <p>Updates a note.</p> <code>delete</code> <p>Deletes a note by its ID.</p> <code>get_by_parent_id</code> <p>Get all notes by their parent ID.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/notes.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    super().__init__(session=session)\n    self.base_path = f\"/api/{NotesCollection._api_version}/notes\"\n</code></pre>"},{"location":"collections/notes/#albert.collections.notes.NotesCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/notes'\n</code></pre>"},{"location":"collections/notes/#albert.collections.notes.NotesCollection.create","title":"create","text":"<pre><code>create(*, note: Note) -&gt; Note\n</code></pre> <p>Creates a new note.</p> <p>Parameters:</p> Name Type Description Default <code>note</code> <code>str</code> <p>The note content.</p> required <p>Returns:</p> Type Description <code>Note</code> <p>The created note.</p> Source code in <code>src/albert/collections/notes.py</code> <pre><code>def create(self, *, note: Note) -&gt; Note:\n    \"\"\"\n    Creates a new note.\n\n    Parameters\n    ----------\n    note : str\n        The note content.\n\n    Returns\n    -------\n    Note\n        The created note.\n    \"\"\"\n    response = self.session.post(\n        self.base_path, json=note.model_dump(by_alias=True, exclude_unset=True, mode=\"json\")\n    )\n    return Note(**response.json())\n</code></pre>"},{"location":"collections/notes/#albert.collections.notes.NotesCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: str) -&gt; Note\n</code></pre> <p>Retrieves a note by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the note to retrieve.</p> required <p>Returns:</p> Type Description <code>Note</code> <p>The note if found, None otherwise.</p> Source code in <code>src/albert/collections/notes.py</code> <pre><code>def get_by_id(self, *, id: str) -&gt; Note:\n    \"\"\"\n    Retrieves a note by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the note to retrieve.\n\n    Returns\n    -------\n    Note\n        The note if found, None otherwise.\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    return Note(**response.json())\n</code></pre>"},{"location":"collections/notes/#albert.collections.notes.NotesCollection.update","title":"update","text":"<pre><code>update(*, note: Note) -&gt; Note\n</code></pre> <p>Updates a note.</p> <p>Parameters:</p> Name Type Description Default <code>note</code> <code>Note</code> <p>The note to update. The note must have an ID.</p> required <p>Returns:</p> Type Description <code>Note</code> <p>The updated note as returned by the server.</p> Source code in <code>src/albert/collections/notes.py</code> <pre><code>def update(self, *, note: Note) -&gt; Note:\n    \"\"\"Updates a note.\n\n    Parameters\n    ----------\n    note : Note\n        The note to update. The note must have an ID.\n\n    Returns\n    -------\n    Note\n        The updated note as returned by the server.\n    \"\"\"\n    patch = self._generate_patch_payload(\n        existing=self.get_by_id(id=note.id), updated=note, generate_metadata_diff=False\n    )\n    self.session.patch(\n        f\"{self.base_path}/{note.id}\",\n        json=patch.model_dump(mode=\"json\", by_alias=True, exclude_unset=True),\n    )\n    return self.get_by_id(id=note.id)\n</code></pre>"},{"location":"collections/notes/#albert.collections.notes.NotesCollection.delete","title":"delete","text":"<pre><code>delete(*, id: str) -&gt; None\n</code></pre> <p>Deletes a note by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the note to delete.</p> required Source code in <code>src/albert/collections/notes.py</code> <pre><code>def delete(self, *, id: str) -&gt; None:\n    \"\"\"\n    Deletes a note by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the note to delete.\n    \"\"\"\n    self.session.delete(f\"{self.base_path}/{id}\")\n</code></pre>"},{"location":"collections/notes/#albert.collections.notes.NotesCollection.get_by_parent_id","title":"get_by_parent_id","text":"<pre><code>get_by_parent_id(\n    *, parent_id: str, order_by: OrderBy = DESCENDING\n) -&gt; list[Note]\n</code></pre> <p>Get all notes by their parent ID.</p> <p>Parameters:</p> Name Type Description Default <code>parent_id</code> <code>str</code> <p>The parent ID of the notes to list.</p> required <code>order_by</code> <code>OrderBy</code> <p>The order to list notes in. Default is DESCENDING.</p> <code>DESCENDING</code> <p>Returns:</p> Type Description <code>list[Note]</code> <p>A list of Note entities.</p> Source code in <code>src/albert/collections/notes.py</code> <pre><code>def get_by_parent_id(\n    self,\n    *,\n    parent_id: str,\n    order_by: OrderBy = OrderBy.DESCENDING,\n) -&gt; list[Note]:\n    \"\"\"\n    Get all notes by their parent ID.\n\n    Parameters\n    ----------\n    parent_id : str\n        The parent ID of the notes to list.\n    order_by : OrderBy, optional\n        The order to list notes in. Default is DESCENDING.\n\n    Returns\n    -------\n    list[Note]\n        A list of Note entities.\n    \"\"\"\n    params = {\n        \"parentId\": parent_id,\n        \"orderBy\": order_by.value,\n    }\n    response = self.session.get(\n        url=self.base_path,\n        params=params,\n    )\n    return [Note(**x) for x in response.json()[\"Items\"]]\n</code></pre>"},{"location":"collections/parameter_groups/","title":"Parameter Groups","text":""},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection","title":"albert.collections.parameter_groups.ParameterGroupCollection","text":"<pre><code>ParameterGroupCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>ParameterGroupCollection is a collection class for managing ParameterGroup entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session to use for making requests.</p> required <p>Methods:</p> Name Description <code>get_by_id</code> <p>Get a parameter group by its ID.</p> <code>get_by_ids</code> <code>search</code> <p>Search for Parameter Groups matching the given criteria.</p> <code>get_all</code> <p>Search and hydrate all Parameter Groups matching the given criteria.</p> <code>delete</code> <p>Delete a parameter group by its ID.</p> <code>create</code> <p>Create a new parameter group.</p> <code>get_by_name</code> <p>Get a parameter group by its name.</p> <code>update</code> <p>Update a parameter group.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/parameter_groups.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"A collection for interacting with Albert parameter groups.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session to use for making requests.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{ParameterGroupCollection._api_version}/parametergroups\"\n</code></pre>"},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/parametergroups'\n</code></pre>"},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: ParameterGroupId) -&gt; ParameterGroup\n</code></pre> <p>Get a parameter group by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the parameter group to retrieve.</p> required <p>Returns:</p> Type Description <code>ParameterGroup</code> <p>The parameter group with the given ID.</p> Source code in <code>src/albert/collections/parameter_groups.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: ParameterGroupId) -&gt; ParameterGroup:\n    \"\"\"Get a parameter group by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the parameter group to retrieve.\n\n    Returns\n    -------\n    ParameterGroup\n        The parameter group with the given ID.\n    \"\"\"\n    path = f\"{self.base_path}/{id}\"\n    response = self.session.get(path)\n    return ParameterGroup(**response.json())\n</code></pre>"},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection.get_by_ids","title":"get_by_ids","text":"<pre><code>get_by_ids(\n    *, ids: list[ParameterGroupId]\n) -&gt; list[ParameterGroup]\n</code></pre> Source code in <code>src/albert/collections/parameter_groups.py</code> <pre><code>@validate_call\ndef get_by_ids(self, *, ids: list[ParameterGroupId]) -&gt; list[ParameterGroup]:\n    url = f\"{self.base_path}/ids\"\n    batches = [ids[i : i + 100] for i in range(0, len(ids), 100)]\n    return [\n        ParameterGroup(**item)\n        for batch in batches\n        for item in self.session.get(url, params={\"id\": batch}).json()[\"Items\"]\n    ]\n</code></pre>"},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection.search","title":"search","text":"<pre><code>search(\n    *,\n    text: str | None = None,\n    types: PGType | list[PGType] | None = None,\n    order_by: OrderBy = DESCENDING,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[ParameterGroupSearchItem]\n</code></pre> <p>Search for Parameter Groups matching the given criteria.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to search for.</p> <code>None</code> <code>types</code> <code>PGType or list of PGType</code> <p>Filter by Parameter Group types.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>Order of results. Default is DESCENDING.</p> <code>DESCENDING</code> <code>offset</code> <code>int</code> <p>Offset to begin results from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Yields:</p> Type Description <code>Iterator[ParameterGroupSearchItem]</code> <p>Iterator of ParameterGroupSearchItem entities, which are partial representations of Parameter Groups.</p> Source code in <code>src/albert/collections/parameter_groups.py</code> <pre><code>def search(\n    self,\n    *,\n    text: str | None = None,\n    types: PGType | list[PGType] | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[ParameterGroupSearchItem]:\n    \"\"\"\n    Search for Parameter Groups matching the given criteria.\n\n    Parameters\n    ----------\n    text : str, optional\n        Text to search for.\n    types : PGType or list of PGType, optional\n        Filter by Parameter Group types.\n    order_by : OrderBy, optional\n        Order of results. Default is DESCENDING.\n    offset : int, optional\n        Offset to begin results from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Yields\n    ------\n    Iterator[ParameterGroupSearchItem]\n        Iterator of ParameterGroupSearchItem entities, which are partial representations of Parameter Groups.\n    \"\"\"\n    params = {\n        \"offset\": offset,\n        \"order\": order_by.value,\n        \"text\": text,\n        \"types\": [types] if isinstance(types, PGType) else types,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/search\",\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [\n            ParameterGroupSearchItem(**item)._bind_collection(self) for item in items\n        ],\n    )\n</code></pre>"},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    text: str | None = None,\n    types: PGType | list[PGType] | None = None,\n    order_by: OrderBy = DESCENDING,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[ParameterGroup]\n</code></pre> <p>Search and hydrate all Parameter Groups matching the given criteria.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text to search for.</p> <code>None</code> <code>types</code> <code>PGType or list of PGType</code> <p>Filter by Parameter Group types.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>Order of results. Default is DESCENDING.</p> <code>DESCENDING</code> <code>offset</code> <code>int</code> <p>Offset to begin results from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Yields:</p> Type Description <code>Iterator[ParameterGroup]</code> <p>Iterator over Parameter Group entities.</p> Source code in <code>src/albert/collections/parameter_groups.py</code> <pre><code>def get_all(\n    self,\n    *,\n    text: str | None = None,\n    types: PGType | list[PGType] | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[ParameterGroup]:\n    \"\"\"\n    Search and hydrate all Parameter Groups matching the given criteria.\n\n    Parameters\n    ----------\n    text : str, optional\n        Text to search for.\n    types : PGType or list of PGType, optional\n        Filter by Parameter Group types.\n    order_by : OrderBy, optional\n        Order of results. Default is DESCENDING.\n    offset : int, optional\n        Offset to begin results from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Yields\n    ------\n    Iterator[ParameterGroup]\n        Iterator over Parameter Group entities.\n    \"\"\"\n    for item in self.search(\n        text=text,\n        types=types,\n        order_by=order_by,\n        offset=offset,\n        max_items=max_items,\n    ):\n        try:\n            yield self.get_by_id(id=item.id)\n        except AlbertHTTPError as e:  # pragma: no cover\n            logger.warning(f\"Error fetching parameter group {item.id}: {e}\")\n</code></pre>"},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection.delete","title":"delete","text":"<pre><code>delete(*, id: ParameterGroupId) -&gt; None\n</code></pre> <p>Delete a parameter group by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the parameter group to delete</p> required Source code in <code>src/albert/collections/parameter_groups.py</code> <pre><code>@validate_call\ndef delete(self, *, id: ParameterGroupId) -&gt; None:\n    \"\"\"Delete a parameter group by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the parameter group to delete\n    \"\"\"\n    path = f\"{self.base_path}/{id}\"\n    self.session.delete(path)\n</code></pre>"},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection.create","title":"create","text":"<pre><code>create(\n    *, parameter_group: ParameterGroup\n) -&gt; ParameterGroup\n</code></pre> <p>Create a new parameter group.</p> <p>Parameters:</p> Name Type Description Default <code>parameter_group</code> <code>ParameterGroup</code> <p>The parameter group to create.</p> required <p>Returns:</p> Type Description <code>ParameterGroup</code> <p>The created parameter group.</p> Source code in <code>src/albert/collections/parameter_groups.py</code> <pre><code>def create(self, *, parameter_group: ParameterGroup) -&gt; ParameterGroup:\n    \"\"\"Create a new parameter group.\n\n    Parameters\n    ----------\n    parameter_group : ParameterGroup\n        The parameter group to create.\n\n    Returns\n    -------\n    ParameterGroup\n        The created parameter group.\n    \"\"\"\n\n    response = self.session.post(\n        self.base_path,\n        json=parameter_group.model_dump(by_alias=True, exclude_none=True, mode=\"json\"),\n    )\n    return ParameterGroup(**response.json())\n</code></pre>"},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(*, name: str) -&gt; ParameterGroup | None\n</code></pre> <p>Get a parameter group by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the parameter group to retrieve.</p> required <p>Returns:</p> Type Description <code>ParameterGroup | None</code> <p>The parameter group with the given name, or None if not found.</p> Source code in <code>src/albert/collections/parameter_groups.py</code> <pre><code>def get_by_name(self, *, name: str) -&gt; ParameterGroup | None:\n    \"\"\"Get a parameter group by its name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the parameter group to retrieve.\n\n    Returns\n    -------\n    ParameterGroup | None\n        The parameter group with the given name, or None if not found.\n    \"\"\"\n    matches = self.search(text=name)\n    for m in matches:\n        if m.name.lower() == name.lower():\n            return m.hydrate()\n    return None\n</code></pre>"},{"location":"collections/parameter_groups/#albert.collections.parameter_groups.ParameterGroupCollection.update","title":"update","text":"<pre><code>update(\n    *, parameter_group: ParameterGroup\n) -&gt; ParameterGroup\n</code></pre> <p>Update a parameter group.</p> <p>Parameters:</p> Name Type Description Default <code>parameter_group</code> <code>ParameterGroup</code> <p>The updated ParameterGroup. The ParameterGroup must have an ID.</p> required <p>Returns:</p> Type Description <code>ParameterGroup</code> <p>The updated ParameterGroup as returned by the server.</p> Source code in <code>src/albert/collections/parameter_groups.py</code> <pre><code>def update(self, *, parameter_group: ParameterGroup) -&gt; ParameterGroup:\n    \"\"\"Update a parameter group.\n\n    Parameters\n    ----------\n    parameter_group : ParameterGroup\n        The updated ParameterGroup. The ParameterGroup must have an ID.\n\n    Returns\n    -------\n    ParameterGroup\n        The updated ParameterGroup as returned by the server.\n    \"\"\"\n    existing = self.get_by_id(id=parameter_group.id)\n    path = f\"{self.base_path}/{existing.id}\"\n\n    base_payload = self._generate_patch_payload(\n        existing=existing, updated=parameter_group, generate_metadata_diff=True\n    )\n\n    general_patches, new_parameter_values, enum_patches = generate_parameter_group_patches(\n        initial_patches=base_payload,\n        updated_parameter_group=parameter_group,\n        existing_parameter_group=existing,\n    )\n\n    # add new parameters\n    new_param_url = f\"{self.base_path}/{parameter_group.id}/parameters\"\n    if len(new_parameter_values) &gt; 0:\n        self.session.put(\n            url=new_param_url,\n            json={\n                \"Parameters\": [\n                    x.model_dump(mode=\"json\", by_alias=True, exclude_none=True)\n                    for x in new_parameter_values\n                ],\n            },\n        )\n    new_param_sequences = [x.sequence for x in new_parameter_values]\n    # handle enum updates\n    for sequence, ep in enum_patches.items():\n        if sequence in new_param_sequences:\n            # we don't need to handle enum updates for new parameters\n            continue\n        if len(ep) &gt; 0:\n            enum_url = f\"{self.base_path}/{parameter_group.id}/parameters/{sequence}/enums\"\n            self.session.put(\n                url=enum_url,\n                json=ep,\n            )\n    if len(general_patches.data) &gt; 0:\n        # patch the general patches\n        self.session.patch(\n            url=path,\n            json=general_patches.model_dump(mode=\"json\", by_alias=True, exclude_none=True),\n        )\n\n    return self.get_by_id(id=parameter_group.id)\n</code></pre>"},{"location":"collections/parameters/","title":"Parameters","text":""},{"location":"collections/parameters/#albert.collections.parameters.ParameterCollection","title":"albert.collections.parameters.ParameterCollection","text":"<pre><code>ParameterCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>ParameterCollection is a collection class for managing Parameter entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_by_id</code> <p>Retrieve a parameter by its ID.</p> <code>create</code> <p>Create a new parameter.</p> <code>get_or_create</code> <p>Retrieves a Parameter or creates it if it does not exist.</p> <code>delete</code> <p>Delete a parameter by its ID.</p> <code>get_all</code> <p>Retrieve all Parameter items with optional filters.</p> <code>update</code> <p>Update a parameter.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/parameters.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"Initializes the ParameterCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{ParameterCollection._api_version}/parameters\"\n</code></pre>"},{"location":"collections/parameters/#albert.collections.parameters.ParameterCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/parameters'\n</code></pre>"},{"location":"collections/parameters/#albert.collections.parameters.ParameterCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: ParameterId) -&gt; Parameter\n</code></pre> <p>Retrieve a parameter by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the parameter to retrieve.</p> required <p>Returns:</p> Type Description <code>Parameter</code> <p>The parameter with the given ID.</p> Source code in <code>src/albert/collections/parameters.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: ParameterId) -&gt; Parameter:\n    \"\"\"Retrieve a parameter by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the parameter to retrieve.\n\n    Returns\n    -------\n    Parameter\n        The parameter with the given ID.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    return Parameter(**response.json())\n</code></pre>"},{"location":"collections/parameters/#albert.collections.parameters.ParameterCollection.create","title":"create","text":"<pre><code>create(*, parameter: Parameter) -&gt; Parameter\n</code></pre> <p>Create a new parameter.</p> <p>Parameters:</p> Name Type Description Default <code>parameter</code> <code>Parameter</code> <p>The parameter to create.</p> required <p>Returns:</p> Type Description <code>Parameter</code> <p>Returns the created parameter.</p> Source code in <code>src/albert/collections/parameters.py</code> <pre><code>def create(self, *, parameter: Parameter) -&gt; Parameter:\n    \"\"\"Create a new parameter.\n\n    Parameters\n    ----------\n    parameter : Parameter\n        The parameter to create.\n\n    Returns\n    -------\n    Parameter\n        Returns the created parameter.\n    \"\"\"\n    response = self.session.post(\n        self.base_path,\n        json=parameter.model_dump(by_alias=True, exclude_none=True, mode=\"json\"),\n    )\n    return Parameter(**response.json())\n</code></pre>"},{"location":"collections/parameters/#albert.collections.parameters.ParameterCollection.get_or_create","title":"get_or_create","text":"<pre><code>get_or_create(*, parameter: Parameter) -&gt; Parameter\n</code></pre> <p>Retrieves a Parameter or creates it if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>parameter</code> <code>Parameter</code> <p>The parameter to get or create.</p> required <p>Returns:</p> Type Description <code>Parameter</code> <p>The existing or newly created parameter.</p> Source code in <code>src/albert/collections/parameters.py</code> <pre><code>def get_or_create(self, *, parameter: Parameter) -&gt; Parameter:\n    \"\"\"Retrieves a Parameter or creates it if it does not exist.\n\n    Parameters\n    ----------\n    parameter : Parameter\n        The parameter to get or create.\n\n    Returns\n    -------\n    Parameter\n        The existing or newly created parameter.\n    \"\"\"\n    match = next(self.get_all(names=parameter.name, exact_match=True, max_items=1), None)\n    if match:\n        logging.warning(\n            f\"Parameter with name {parameter.name} already exists. Returning existing parameter.\"\n        )\n        return match\n    return self.create(parameter=parameter)\n</code></pre>"},{"location":"collections/parameters/#albert.collections.parameters.ParameterCollection.delete","title":"delete","text":"<pre><code>delete(*, id: ParameterId) -&gt; None\n</code></pre> <p>Delete a parameter by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the parameter to delete.</p> required Source code in <code>src/albert/collections/parameters.py</code> <pre><code>@validate_call\ndef delete(self, *, id: ParameterId) -&gt; None:\n    \"\"\"Delete a parameter by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the parameter to delete.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/parameters/#albert.collections.parameters.ParameterCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    ids: list[ParameterId] | None = None,\n    names: str | list[str] = None,\n    exact_match: bool = False,\n    order_by: OrderBy = DESCENDING,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Parameter]\n</code></pre> <p>Retrieve all Parameter items with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[str]</code> <p>A list of parameter IDs to retrieve.</p> <code>None</code> <code>names</code> <code>str or list[str]</code> <p>One or more parameter names to filter by.</p> <code>None</code> <code>exact_match</code> <code>bool</code> <p>Whether to require exact name matches. Default is False.</p> <code>False</code> <code>order_by</code> <code>OrderBy</code> <p>Sort order of results. Default is DESCENDING.</p> <code>DESCENDING</code> <code>start_key</code> <code>str</code> <p>The pagination key to start from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Parameter]</code> <p>An iterator of Parameters matching the given criteria.</p> Source code in <code>src/albert/collections/parameters.py</code> <pre><code>def get_all(\n    self,\n    *,\n    ids: list[ParameterId] | None = None,\n    names: str | list[str] = None,\n    exact_match: bool = False,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Parameter]:\n    \"\"\"\n    Retrieve all Parameter items with optional filters.\n\n    Parameters\n    ----------\n    ids : list[str], optional\n        A list of parameter IDs to retrieve.\n    names : str or list[str], optional\n        One or more parameter names to filter by.\n    exact_match : bool, optional\n        Whether to require exact name matches. Default is False.\n    order_by : OrderBy, optional\n        Sort order of results. Default is DESCENDING.\n    start_key : str, optional\n        The pagination key to start from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[Parameter]\n        An iterator of Parameters matching the given criteria.\n    \"\"\"\n\n    def deserialize(items: list[dict]) -&gt; Iterator[Parameter]:\n        yield from (Parameter(**item) for item in items)\n\n    params = {\n        \"orderBy\": order_by.value,\n        \"parameters\": ids,\n        \"startKey\": start_key,\n    }\n    if names:\n        params[\"name\"] = [names] if isinstance(names, str) else names\n        params[\"exactMatch\"] = exact_match\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=deserialize,\n    )\n</code></pre>"},{"location":"collections/parameters/#albert.collections.parameters.ParameterCollection.update","title":"update","text":"<pre><code>update(*, parameter: Parameter) -&gt; Parameter\n</code></pre> <p>Update a parameter.</p> <p>Parameters:</p> Name Type Description Default <code>parameter</code> <code>Parameter</code> <p>The updated parameter to save. The parameter must have an ID.</p> required <p>Returns:</p> Type Description <code>Parameter</code> <p>The updated parameter as returned by the server.</p> Source code in <code>src/albert/collections/parameters.py</code> <pre><code>def update(self, *, parameter: Parameter) -&gt; Parameter:\n    \"\"\"Update a parameter.\n\n    Parameters\n    ----------\n    parameter : Parameter\n        The updated parameter to save. The parameter must have an ID.\n\n    Returns\n    -------\n    Parameter\n        The updated parameter as returned by the server.\n    \"\"\"\n    existing = self.get_by_id(id=parameter.id)\n    payload = self._generate_patch_payload(\n        existing=existing,\n        updated=parameter,\n    )\n    payload_dump = payload.model_dump(mode=\"json\", by_alias=True)\n    for i, change in enumerate(payload_dump[\"data\"]):\n        if not self._is_metadata_item_list(\n            existing_object=existing,\n            updated_object=parameter,\n            metadata_field=change[\"attribute\"],\n        ):\n            change[\"operation\"] = \"update\"\n            if \"newValue\" in change and change[\"newValue\"] is None:\n                del change[\"newValue\"]\n            if \"oldValue\" in change and change[\"oldValue\"] is None:\n                del change[\"oldValue\"]\n            payload_dump[\"data\"][i] = change\n    if len(payload_dump[\"data\"]) == 0:\n        return parameter\n    for e in payload_dump[\"data\"]:\n        self.session.patch(\n            f\"{self.base_path}/{parameter.id}\",\n            json={\"data\": [e]},\n        )\n    return self.get_by_id(id=parameter.id)\n</code></pre>"},{"location":"collections/pricings/","title":"Pricings","text":""},{"location":"collections/pricings/#albert.collections.pricings.PricingCollection","title":"albert.collections.pricings.PricingCollection","text":"<pre><code>PricingCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>PricingCollection is a collection class for managing Pricing entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <p>Creates a new Pricing entity.</p> <code>get_by_id</code> <p>Retrieves a Pricing entity by its ID.</p> <code>get_by_inventory_id</code> <p>Returns a list of Pricing entities for the given inventory ID as per the provided parameters.</p> <code>get_by_inventory_ids</code> <p>Returns a list of Pricing resources for each parent inventory ID.</p> <code>delete</code> <p>Deletes a Pricing entity by its ID.</p> <code>update</code> <p>Updates a Pricing entity.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/pricings.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"Initializes the PricingCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{PricingCollection._api_version}/pricings\"\n</code></pre>"},{"location":"collections/pricings/#albert.collections.pricings.PricingCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/pricings'\n</code></pre>"},{"location":"collections/pricings/#albert.collections.pricings.PricingCollection.create","title":"create","text":"<pre><code>create(*, pricing: Pricing) -&gt; Pricing\n</code></pre> <p>Creates a new Pricing entity.</p> <p>Parameters:</p> Name Type Description Default <code>pricing</code> <code>Pricing</code> <p>The Pricing entity to create.</p> required <p>Returns:</p> Type Description <code>Pricing</code> <p>The created Pricing entity.</p> Source code in <code>src/albert/collections/pricings.py</code> <pre><code>def create(self, *, pricing: Pricing) -&gt; Pricing:\n    \"\"\"Creates a new Pricing entity.\n\n    Parameters\n    ----------\n    pricing : Pricing\n        The Pricing entity to create.\n\n    Returns\n    -------\n    Pricing\n        The created Pricing entity.\n    \"\"\"\n    payload = pricing.model_dump(by_alias=True, exclude_none=True, mode=\"json\")\n    response = self.session.post(self.base_path, json=payload)\n    return Pricing(**response.json())\n</code></pre>"},{"location":"collections/pricings/#albert.collections.pricings.PricingCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: str) -&gt; Pricing\n</code></pre> <p>Retrieves a Pricing entity by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the Pricing entity to retrieve.</p> required <p>Returns:</p> Type Description <code>Pricing</code> <p>The Pricing entity if found, None otherwise.</p> Source code in <code>src/albert/collections/pricings.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: str) -&gt; Pricing:\n    \"\"\"Retrieves a Pricing entity by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the Pricing entity to retrieve.\n\n    Returns\n    -------\n    Pricing\n        The Pricing entity if found, None otherwise.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    return Pricing(**response.json())\n</code></pre>"},{"location":"collections/pricings/#albert.collections.pricings.PricingCollection.get_by_inventory_id","title":"get_by_inventory_id","text":"<pre><code>get_by_inventory_id(\n    *,\n    inventory_id: InventoryId,\n    group_by: PricingBy | None = None,\n    filter_by: PricingBy | None = None,\n    filter_id: str | None = None,\n    order_by: OrderBy | None = None,\n) -&gt; list[Pricing]\n</code></pre> <p>Returns a list of Pricing entities for the given inventory ID as per the provided parameters.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>str</code> <p>The ID of the inventory to retrieve pricings for.</p> required <code>group_by</code> <code>PricingBy | None</code> <p>Grouping by PricingBy, by default None</p> <code>None</code> <code>filter_by</code> <code>PricingBy | None</code> <p>Filter by PricingBy, by default None</p> <code>None</code> <code>filter_id</code> <code>str | None</code> <p>The string to use as the filter, by default None</p> <code>None</code> <code>order_by</code> <code>OrderBy | None</code> <p>The order to sort the results by, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Pricing]</code> <p>A list of Pricing entities matching the provided parameters.</p> Source code in <code>src/albert/collections/pricings.py</code> <pre><code>@validate_call\ndef get_by_inventory_id(\n    self,\n    *,\n    inventory_id: InventoryId,\n    group_by: PricingBy | None = None,\n    filter_by: PricingBy | None = None,\n    filter_id: str | None = None,\n    order_by: OrderBy | None = None,\n) -&gt; list[Pricing]:\n    \"\"\"Returns a list of Pricing entities for the given inventory ID as per the provided parameters.\n\n    Parameters\n    ----------\n    inventory_id : str\n        The ID of the inventory to retrieve pricings for.\n    group_by : PricingBy | None, optional\n        Grouping by PricingBy, by default None\n    filter_by : PricingBy | None, optional\n        Filter by PricingBy, by default None\n    filter_id : str | None, optional\n        The string to use as the filter, by default None\n    order_by : OrderBy | None, optional\n        The order to sort the results by, by default None\n\n    Returns\n    -------\n    list[Pricing]\n        A list of Pricing entities matching the provided parameters.\n    \"\"\"\n    params = {\n        \"parentId\": inventory_id,\n        \"groupBy\": group_by,\n        \"filterBy\": filter_by,\n        \"id\": filter_id,\n        \"orderBy\": order_by,\n    }\n    params = {k: v for k, v in params.items() if v is not None}\n    response = self.session.get(self.base_path, params=params)\n    items = response.json().get(\"Items\", [])\n    return [Pricing(**x) for x in items]\n</code></pre>"},{"location":"collections/pricings/#albert.collections.pricings.PricingCollection.get_by_inventory_ids","title":"get_by_inventory_ids","text":"<pre><code>get_by_inventory_ids(\n    *, inventory_ids: list[InventoryId]\n) -&gt; list[InventoryPricings]\n</code></pre> <p>Returns a list of Pricing resources for each parent inventory ID.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_ids</code> <code>list[str]</code> <p>The list of inventory IDs to retrieve pricings for.</p> required <p>Returns:</p> Type Description <code>list[InventoryPricing]</code> <p>A list of InventoryPricing entities matching the provided inventory.</p> Source code in <code>src/albert/collections/pricings.py</code> <pre><code>@validate_call\ndef get_by_inventory_ids(self, *, inventory_ids: list[InventoryId]) -&gt; list[InventoryPricings]:\n    \"\"\"Returns a list of Pricing resources for each parent inventory ID.\n\n    Parameters\n    ----------\n    inventory_ids : list[str]\n        The list of inventory IDs to retrieve pricings for.\n\n    Returns\n    -------\n    list[InventoryPricing]\n        A list of InventoryPricing entities matching the provided inventory.\n    \"\"\"\n    params = {\"id\": inventory_ids}\n    response = self.session.get(f\"{self.base_path}/ids\", params=params)\n    return [InventoryPricings(**x) for x in response.json()[\"Items\"]]\n</code></pre>"},{"location":"collections/pricings/#albert.collections.pricings.PricingCollection.delete","title":"delete","text":"<pre><code>delete(*, id: str) -&gt; None\n</code></pre> <p>Deletes a Pricing entity by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the Pricing entity to delete.</p> required Source code in <code>src/albert/collections/pricings.py</code> <pre><code>@validate_call\ndef delete(self, *, id: str) -&gt; None:\n    \"\"\"Deletes a Pricing entity by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the Pricing entity to delete.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/pricings/#albert.collections.pricings.PricingCollection.update","title":"update","text":"<pre><code>update(*, pricing: Pricing) -&gt; Pricing\n</code></pre> <p>Updates a Pricing entity.</p> <p>Parameters:</p> Name Type Description Default <code>pricing</code> <code>Pricing</code> <p>The updated Pricing entity.</p> required <p>Returns:</p> Type Description <code>Pricing</code> <p>The updated Pricing entity as it appears in Albert.</p> Source code in <code>src/albert/collections/pricings.py</code> <pre><code>def update(self, *, pricing: Pricing) -&gt; Pricing:\n    \"\"\"Updates a Pricing entity.\n\n    Parameters\n    ----------\n    pricing : Pricing\n        The updated Pricing entity.\n\n    Returns\n    -------\n    Pricing\n        The updated Pricing entity as it appears in Albert.\n    \"\"\"\n    current_pricing = self.get_by_id(id=pricing.id)\n    patch_payload = self._pricing_patch_payload(existing=current_pricing, updated=pricing)\n    self.session.patch(\n        url=f\"{self.base_path}/{pricing.id}\",\n        json=patch_payload.model_dump(mode=\"json\", by_alias=True),\n    )\n    return self.get_by_id(id=pricing.id)\n</code></pre>"},{"location":"collections/product_design/","title":"Product Design","text":""},{"location":"collections/product_design/#albert.collections.product_design.ProductDesignCollection","title":"albert.collections.product_design.ProductDesignCollection","text":"<pre><code>ProductDesignCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>ProductDesignCollection is a collection class for managing Product Design entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_unpacked_products</code> <p>Get unpacked products by inventory IDs.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/product_design.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the CasCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{ProductDesignCollection._api_version}/productdesign\"\n</code></pre>"},{"location":"collections/product_design/#albert.collections.product_design.ProductDesignCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/productdesign'\n</code></pre>"},{"location":"collections/product_design/#albert.collections.product_design.ProductDesignCollection.get_unpacked_products","title":"get_unpacked_products","text":"<pre><code>get_unpacked_products(\n    *,\n    inventory_ids: list[InventoryId],\n    unpack_id: Literal[\n        \"DESIGN\", \"PREDICTION\"\n    ] = \"PREDICTION\",\n) -&gt; list[UnpackedProductDesign]\n</code></pre> <p>Get unpacked products by inventory IDs.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_ids</code> <code>list[InventoryId]</code> <p>The inventory ids to get unpacked formulas for.</p> required <code>unpack_id</code> <code>Literal['DESIGN', 'PREDICTION']</code> <p>The ID for the unpack operation.</p> <code>'PREDICTION'</code> <p>Returns:</p> Type Description <code>list[UnpackedProductDesign]</code> <p>The unpacked products/formulas.</p> Source code in <code>src/albert/collections/product_design.py</code> <pre><code>@validate_call\ndef get_unpacked_products(\n    self,\n    *,\n    inventory_ids: list[InventoryId],\n    unpack_id: Literal[\"DESIGN\", \"PREDICTION\"] = \"PREDICTION\",\n) -&gt; list[UnpackedProductDesign]:\n    \"\"\"\n    Get unpacked products by inventory IDs.\n\n    Parameters\n    ----------\n    inventory_ids : list[InventoryId]\n        The inventory ids to get unpacked formulas for.\n    unpack_id: Literal[\"DESIGN\", \"PREDICTION\"]\n        The ID for the unpack operation.\n\n    Returns\n    -------\n    list[UnpackedProductDesign]\n        The unpacked products/formulas.\n    \"\"\"\n    url = f\"{self.base_path}/{unpack_id}/unpack\"\n    batches = [inventory_ids[i : i + 50] for i in range(0, len(inventory_ids), 50)]\n    return [\n        UnpackedProductDesign(**item)\n        for batch in batches\n        for item in self.session.get(url, params={\"formulaId\": batch}).json()\n    ]\n</code></pre>"},{"location":"collections/projects/","title":"Projects","text":""},{"location":"collections/projects/#albert.collections.projects.ProjectCollection","title":"albert.collections.projects.ProjectCollection","text":"<pre><code>ProjectCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>ProjectCollection is a collection class for managing Project entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <p>Create a new project.</p> <code>get_by_id</code> <p>Retrieve a project by its ID.</p> <code>update</code> <p>Update a project.</p> <code>delete</code> <p>Delete a project by its ID.</p> <code>search</code> <p>Search for Project matching the provided criteria.</p> <code>get_all</code> <p>Retrieve fully hydrated Project entities with optional filters.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/projects.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initialize a ProjectCollection object.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{ProjectCollection._api_version}/projects\"\n</code></pre>"},{"location":"collections/projects/#albert.collections.projects.ProjectCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/projects'\n</code></pre>"},{"location":"collections/projects/#albert.collections.projects.ProjectCollection.create","title":"create","text":"<pre><code>create(*, project: Project) -&gt; Project\n</code></pre> <p>Create a new project.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The project to create.</p> required <p>Returns:</p> Type Description <code>Optional[Project]</code> <p>The created project object if successful, None otherwise.</p> Source code in <code>src/albert/collections/projects.py</code> <pre><code>def create(self, *, project: Project) -&gt; Project:\n    \"\"\"\n    Create a new project.\n\n    Parameters\n    ----------\n    project : Project\n        The project to create.\n\n    Returns\n    -------\n    Optional[Project]\n        The created project object if successful, None otherwise.\n    \"\"\"\n    response = self.session.post(\n        self.base_path, json=project.model_dump(by_alias=True, exclude_unset=True, mode=\"json\")\n    )\n    return Project(**response.json())\n</code></pre>"},{"location":"collections/projects/#albert.collections.projects.ProjectCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: ProjectId) -&gt; Project\n</code></pre> <p>Retrieve a project by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the project to retrieve.</p> required <p>Returns:</p> Type Description <code>Project</code> <p>The project object if found</p> Source code in <code>src/albert/collections/projects.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: ProjectId) -&gt; Project:\n    \"\"\"\n    Retrieve a project by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the project to retrieve.\n\n    Returns\n    -------\n    Project\n        The project object if found\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n\n    return Project(**response.json())\n</code></pre>"},{"location":"collections/projects/#albert.collections.projects.ProjectCollection.update","title":"update","text":"<pre><code>update(*, project: Project) -&gt; Project\n</code></pre> <p>Update a project.</p> <p>Parameters:</p> Name Type Description Default <code>project</code> <code>Project</code> <p>The updated project object.</p> required <p>Returns:</p> Type Description <code>Project</code> <p>The updated project object as returned by the server.</p> Source code in <code>src/albert/collections/projects.py</code> <pre><code>def update(self, *, project: Project) -&gt; Project:\n    \"\"\"Update a project.\n\n    Parameters\n    ----------\n    project : Project\n        The updated project object.\n\n    Returns\n    -------\n    Project\n        The updated project object as returned by the server.\n    \"\"\"\n    existing_project = self.get_by_id(id=project.id)\n    patch_data = self._generate_patch_payload(existing=existing_project, updated=project)\n    url = f\"{self.base_path}/{project.id}\"\n\n    self.session.patch(url, json=patch_data.model_dump(mode=\"json\", by_alias=True))\n\n    return self.get_by_id(id=project.id)\n</code></pre>"},{"location":"collections/projects/#albert.collections.projects.ProjectCollection.delete","title":"delete","text":"<pre><code>delete(*, id: ProjectId) -&gt; None\n</code></pre> <p>Delete a project by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the project to delete.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/projects.py</code> <pre><code>@validate_call\ndef delete(self, *, id: ProjectId) -&gt; None:\n    \"\"\"\n    Delete a project by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the project to delete.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/projects/#albert.collections.projects.ProjectCollection.search","title":"search","text":"<pre><code>search(\n    *,\n    text: str | None = None,\n    status: list[str] | None = None,\n    market_segment: list[str] | None = None,\n    application: list[str] | None = None,\n    technology: list[str] | None = None,\n    created_by: list[str] | None = None,\n    location: list[str] | None = None,\n    from_created_at: str | None = None,\n    to_created_at: str | None = None,\n    facet_field: str | None = None,\n    facet_text: str | None = None,\n    contains_field: list[str] | None = None,\n    contains_text: list[str] | None = None,\n    linked_to: str | None = None,\n    my_project: bool | None = None,\n    my_role: list[str] | None = None,\n    order_by: OrderBy = DESCENDING,\n    sort_by: str | None = None,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[ProjectSearchItem]\n</code></pre> <p>Search for Project matching the provided criteria.</p> <p>\u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance. To retrieve fully detailed entities, use :meth:<code>get_all</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Full-text search query.</p> <code>None</code> <code>status</code> <code>list of str</code> <p>Filter by project statuses.</p> <code>None</code> <code>market_segment</code> <code>list of str</code> <p>Filter by market segment.</p> <code>None</code> <code>application</code> <code>list of str</code> <p>Filter by application.</p> <code>None</code> <code>technology</code> <code>list of str</code> <p>Filter by technology tags.</p> <code>None</code> <code>created_by</code> <code>list of str</code> <p>Filter by user names who created the project.</p> <code>None</code> <code>location</code> <code>list of str</code> <p>Filter by location(s).</p> <code>None</code> <code>from_created_at</code> <code>str</code> <p>Earliest creation date in 'YYYY-MM-DD' format.</p> <code>None</code> <code>to_created_at</code> <code>str</code> <p>Latest creation date in 'YYYY-MM-DD' format.</p> <code>None</code> <code>facet_field</code> <code>str</code> <p>Facet field to filter on.</p> <code>None</code> <code>facet_text</code> <code>str</code> <p>Facet text to search for.</p> <code>None</code> <code>contains_field</code> <code>list of str</code> <p>Fields to search inside.</p> <code>None</code> <code>contains_text</code> <code>list of str</code> <p>Values to search for within the <code>contains_field</code>.</p> <code>None</code> <code>linked_to</code> <code>str</code> <p>Entity ID the project is linked to.</p> <code>None</code> <code>my_project</code> <code>bool</code> <p>If True, return only projects owned by current user.</p> <code>None</code> <code>my_role</code> <code>list of str</code> <p>User roles to filter by.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>Sort order. Default is DESCENDING.</p> <code>DESCENDING</code> <code>sort_by</code> <code>str</code> <p>Field to sort by.</p> <code>None</code> <code>offset</code> <code>int</code> <p>Pagination offset.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[ProjectSearchItem]</code> <p>An iterator of matching partial (unhydrated) Project results.</p> Source code in <code>src/albert/collections/projects.py</code> <pre><code>@validate_call\ndef search(\n    self,\n    *,\n    text: str | None = None,\n    status: list[str] | None = None,\n    market_segment: list[str] | None = None,\n    application: list[str] | None = None,\n    technology: list[str] | None = None,\n    created_by: list[str] | None = None,\n    location: list[str] | None = None,\n    from_created_at: str | None = None,\n    to_created_at: str | None = None,\n    facet_field: str | None = None,\n    facet_text: str | None = None,\n    contains_field: list[str] | None = None,\n    contains_text: list[str] | None = None,\n    linked_to: str | None = None,\n    my_project: bool | None = None,\n    my_role: list[str] | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    sort_by: str | None = None,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[ProjectSearchItem]:\n    \"\"\"\n    Search for Project matching the provided criteria.\n\n    \u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance.\n    To retrieve fully detailed entities, use :meth:`get_all` instead.\n\n    Parameters\n    ----------\n    text : str, optional\n        Full-text search query.\n    status : list of str, optional\n        Filter by project statuses.\n    market_segment : list of str, optional\n        Filter by market segment.\n    application : list of str, optional\n        Filter by application.\n    technology : list of str, optional\n        Filter by technology tags.\n    created_by : list of str, optional\n        Filter by user names who created the project.\n    location : list of str, optional\n        Filter by location(s).\n    from_created_at : str, optional\n        Earliest creation date in 'YYYY-MM-DD' format.\n    to_created_at : str, optional\n        Latest creation date in 'YYYY-MM-DD' format.\n    facet_field : str, optional\n        Facet field to filter on.\n    facet_text : str, optional\n        Facet text to search for.\n    contains_field : list of str, optional\n        Fields to search inside.\n    contains_text : list of str, optional\n        Values to search for within the `contains_field`.\n    linked_to : str, optional\n        Entity ID the project is linked to.\n    my_project : bool, optional\n        If True, return only projects owned by current user.\n    my_role : list of str, optional\n        User roles to filter by.\n    order_by : OrderBy, optional\n        Sort order. Default is DESCENDING.\n    sort_by : str, optional\n        Field to sort by.\n    offset : int, optional\n        Pagination offset.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[ProjectSearchItem]\n        An iterator of matching partial (unhydrated) Project results.\n    \"\"\"\n    query_params = {\n        \"order\": order_by.value,\n        \"offset\": offset,\n        \"text\": text,\n        \"sortBy\": sort_by,\n        \"status\": status,\n        \"marketSegment\": market_segment,\n        \"application\": application,\n        \"technology\": technology,\n        \"createdBy\": created_by,\n        \"location\": location,\n        \"fromCreatedAt\": from_created_at,\n        \"toCreatedAt\": to_created_at,\n        \"facetField\": facet_field,\n        \"facetText\": facet_text,\n        \"containsField\": contains_field,\n        \"containsText\": contains_text,\n        \"linkedTo\": linked_to,\n        \"myProject\": my_project,\n        \"myRole\": my_role,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/search\",\n        session=self.session,\n        params=query_params,\n        max_items=max_items,\n        deserialize=lambda items: [\n            ProjectSearchItem(**item)._bind_collection(self) for item in items\n        ],\n    )\n</code></pre>"},{"location":"collections/projects/#albert.collections.projects.ProjectCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    text: str | None = None,\n    status: list[str] | None = None,\n    market_segment: list[str] | None = None,\n    application: list[str] | None = None,\n    technology: list[str] | None = None,\n    created_by: list[str] | None = None,\n    location: list[str] | None = None,\n    from_created_at: str | None = None,\n    to_created_at: str | None = None,\n    facet_field: str | None = None,\n    facet_text: str | None = None,\n    contains_field: list[str] | None = None,\n    contains_text: list[str] | None = None,\n    linked_to: str | None = None,\n    my_project: bool | None = None,\n    my_role: list[str] | None = None,\n    order_by: OrderBy = DESCENDING,\n    sort_by: str | None = None,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Project]\n</code></pre> <p>Retrieve fully hydrated Project entities with optional filters.</p> <p>This method returns complete entity data using <code>get_by_id</code>. Use :meth:<code>search</code> for faster retrieval when you only need lightweight, partial (unhydrated) entities.</p> <p>Returns:</p> Type Description <code>Iterator[Project]</code> <p>An iterator of fully hydrated Project entities.</p> Source code in <code>src/albert/collections/projects.py</code> <pre><code>@validate_call\ndef get_all(\n    self,\n    *,\n    text: str | None = None,\n    status: list[str] | None = None,\n    market_segment: list[str] | None = None,\n    application: list[str] | None = None,\n    technology: list[str] | None = None,\n    created_by: list[str] | None = None,\n    location: list[str] | None = None,\n    from_created_at: str | None = None,\n    to_created_at: str | None = None,\n    facet_field: str | None = None,\n    facet_text: str | None = None,\n    contains_field: list[str] | None = None,\n    contains_text: list[str] | None = None,\n    linked_to: str | None = None,\n    my_project: bool | None = None,\n    my_role: list[str] | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    sort_by: str | None = None,\n    offset: int | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Project]:\n    \"\"\"\n    Retrieve fully hydrated Project entities with optional filters.\n\n    This method returns complete entity data using `get_by_id`.\n    Use :meth:`search` for faster retrieval when you only need lightweight, partial (unhydrated) entities.\n\n    Returns\n    -------\n    Iterator[Project]\n        An iterator of fully hydrated Project entities.\n    \"\"\"\n    for project in self.search(\n        text=text,\n        status=status,\n        market_segment=market_segment,\n        application=application,\n        technology=technology,\n        created_by=created_by,\n        location=location,\n        from_created_at=from_created_at,\n        to_created_at=to_created_at,\n        facet_field=facet_field,\n        facet_text=facet_text,\n        contains_field=contains_field,\n        contains_text=contains_text,\n        linked_to=linked_to,\n        my_project=my_project,\n        my_role=my_role,\n        order_by=order_by,\n        sort_by=sort_by,\n        offset=offset,\n        max_items=max_items,\n    ):\n        project_id = getattr(project, \"albertId\", None) or getattr(project, \"id\", None)\n        if not project_id:\n            continue\n\n        id = project_id if project_id.startswith(\"PRO\") else f\"PRO{project_id}\"\n\n        try:\n            yield self.get_by_id(id=id)\n        except AlbertHTTPError as e:\n            logger.warning(f\"Error fetching project details {id}: {e}\")\n</code></pre>"},{"location":"collections/property_data/","title":"Property Data","text":""},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection","title":"albert.collections.property_data.PropertyDataCollection","text":"<pre><code>PropertyDataCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>PropertyDataCollection is a collection class for managing Property Data entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_properties_on_inventory</code> <p>Returns all the properties of an inventory item.</p> <code>add_properties_to_inventory</code> <p>Add new properties to an inventory item.</p> <code>update_property_on_inventory</code> <p>Update a property on an inventory item.</p> <code>get_task_block_properties</code> <p>Returns all the properties within a Property Task block for a specific inventory item.</p> <code>check_for_task_data</code> <p>Checks if a task has data.</p> <code>check_block_interval_for_data</code> <p>Check if a specific block interval has data.</p> <code>get_all_task_properties</code> <p>Returns all the properties for a specific task.</p> <code>update_property_on_task</code> <p>Updates a specific property on a task.</p> <code>add_properties_to_task</code> <p>Add new task properties for a given task.</p> <code>update_or_create_task_properties</code> <p>Update or create task properties for a given task.</p> <code>bulk_load_task_properties</code> <p>Bulk load task properties for a given task. WARNING: This will overwrite any existing properties!</p> <code>bulk_delete_task_data</code> <p>Bulk delete task data for a given task.</p> <code>search</code> <p>Search for property data with various filtering options.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the CompanyCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{PropertyDataCollection._api_version}/propertydata\"\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/propertydata'\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.get_properties_on_inventory","title":"get_properties_on_inventory","text":"<pre><code>get_properties_on_inventory(\n    *, inventory_id: InventoryId\n) -&gt; InventoryPropertyData\n</code></pre> <p>Returns all the properties of an inventory item.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>InventoryId</code> <p>The ID of the inventory item to retrieve properties for.</p> required <p>Returns:</p> Type Description <code>InventoryPropertyData</code> <p>The properties of the inventory item.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef get_properties_on_inventory(self, *, inventory_id: InventoryId) -&gt; InventoryPropertyData:\n    \"\"\"Returns all the properties of an inventory item.\n\n    Parameters\n    ----------\n    inventory_id : InventoryId\n        The ID of the inventory item to retrieve properties for.\n\n    Returns\n    -------\n    InventoryPropertyData\n        The properties of the inventory item.\n    \"\"\"\n    params = {\"entity\": \"inventory\", \"id\": [inventory_id]}\n    response = self.session.get(url=self.base_path, params=params)\n    response_json = response.json()\n    return InventoryPropertyData(**response_json[0])\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.add_properties_to_inventory","title":"add_properties_to_inventory","text":"<pre><code>add_properties_to_inventory(\n    *,\n    inventory_id: InventoryId,\n    properties: list[InventoryDataColumn],\n) -&gt; list[InventoryPropertyDataCreate]\n</code></pre> <p>Add new properties to an inventory item.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>InventoryId</code> <p>The ID of the inventory item to add properties to.</p> required <code>properties</code> <code>list[InventoryDataColumn]</code> <p>The properties to add.</p> required <p>Returns:</p> Type Description <code>list[InventoryPropertyDataCreate]</code> <p>The registered properties.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef add_properties_to_inventory(\n    self, *, inventory_id: InventoryId, properties: list[InventoryDataColumn]\n) -&gt; list[InventoryPropertyDataCreate]:\n    \"\"\"Add new properties to an inventory item.\n\n    Parameters\n    ----------\n    inventory_id : InventoryId\n        The ID of the inventory item to add properties to.\n    properties : list[InventoryDataColumn]\n        The properties to add.\n\n    Returns\n    -------\n    list[InventoryPropertyDataCreate]\n        The registered properties.\n    \"\"\"\n    returned = []\n    for p in properties:\n        # Can only add one at a time.\n        create_object = InventoryPropertyDataCreate(\n            inventory_id=inventory_id, data_columns=[p]\n        )\n        response = self.session.post(\n            self.base_path,\n            json=create_object.model_dump(exclude_none=True, by_alias=True, mode=\"json\"),\n        )\n        response_json = response.json()\n        logger.info(response_json.get(\"message\", None))\n        returned.append(InventoryPropertyDataCreate(**response_json))\n    return returned\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.update_property_on_inventory","title":"update_property_on_inventory","text":"<pre><code>update_property_on_inventory(\n    *,\n    inventory_id: InventoryId,\n    property_data: InventoryDataColumn,\n) -&gt; InventoryPropertyData\n</code></pre> <p>Update a property on an inventory item.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>InventoryId</code> <p>The ID of the inventory item to update the property on.</p> required <code>property_data</code> <code>InventoryDataColumn</code> <p>The updated property data.</p> required <p>Returns:</p> Type Description <code>InventoryPropertyData</code> <p>The updated property data as returned by the server.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef update_property_on_inventory(\n    self, *, inventory_id: InventoryId, property_data: InventoryDataColumn\n) -&gt; InventoryPropertyData:\n    \"\"\"Update a property on an inventory item.\n\n    Parameters\n    ----------\n    inventory_id : InventoryId\n        The ID of the inventory item to update the property on.\n    property_data : InventoryDataColumn\n        The updated property data.\n\n    Returns\n    -------\n    InventoryPropertyData\n        The updated property data as returned by the server.\n    \"\"\"\n    existing_properties = self.get_properties_on_inventory(inventory_id=inventory_id)\n    existing_value = None\n    for p in existing_properties.custom_property_data:\n        if p.data_column.data_column_id == property_data.data_column_id:\n            existing_value = (\n                p.data_column.property_data.value\n                if p.data_column.property_data.value is not None\n                else p.data_column.property_data.string_value\n                if p.data_column.property_data.string_value is not None\n                else str(p.data_column.property_data.numeric_value)\n                if p.data_column.property_data.numeric_value is not None\n                else None\n            )\n            existing_id = p.data_column.property_data.id\n            break\n    if existing_value is not None:\n        payload = [\n            PropertyDataPatchDatum(\n                operation=PatchOperation.UPDATE,\n                id=existing_id,\n                attribute=\"value\",\n                new_value=property_data.value,\n                old_value=existing_value,\n            )\n        ]\n    else:\n        payload = [\n            PropertyDataPatchDatum(\n                operation=PatchOperation.ADD,\n                id=existing_id,\n                attribute=\"value\",\n                new_value=property_data.value,\n            )\n        ]\n\n    self.session.patch(\n        url=f\"{self.base_path}/{inventory_id}\",\n        json=[x.model_dump(exclude_none=True, by_alias=True, mode=\"json\") for x in payload],\n    )\n    return self.get_properties_on_inventory(inventory_id=inventory_id)\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.get_task_block_properties","title":"get_task_block_properties","text":"<pre><code>get_task_block_properties(\n    *,\n    inventory_id: InventoryId,\n    task_id: TaskId,\n    block_id: BlockId,\n    lot_id: LotId | None = None,\n) -&gt; TaskPropertyData\n</code></pre> <p>Returns all the properties within a Property Task block for a specific inventory item.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>InventoryId</code> <p>The ID of the inventory.</p> required <code>task_id</code> <code>TaskId</code> <p>The Property task ID.</p> required <code>block_id</code> <code>BlockId</code> <p>The Block ID of the block to retrieve properties for.</p> required <code>lot_id</code> <code>LotId | None</code> <p>The specific Lot of the inventory Item to retrieve lots for, by default None</p> <code>None</code> <p>Returns:</p> Type Description <code>TaskPropertyData</code> <p>The properties of the inventory item within the block.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef get_task_block_properties(\n    self,\n    *,\n    inventory_id: InventoryId,\n    task_id: TaskId,\n    block_id: BlockId,\n    lot_id: LotId | None = None,\n) -&gt; TaskPropertyData:\n    \"\"\"Returns all the properties within a Property Task block for a specific inventory item.\n\n    Parameters\n    ----------\n    inventory_id : InventoryId\n        The ID of the inventory.\n    task_id : TaskId\n        The Property task ID.\n    block_id : BlockId\n        The Block ID of the block to retrieve properties for.\n    lot_id : LotId | None, optional\n        The specific Lot of the inventory Item to retrieve lots for, by default None\n\n    Returns\n    -------\n    TaskPropertyData\n        The properties of the inventory item within the block.\n    \"\"\"\n    params = {\n        \"entity\": \"task\",\n        \"blockId\": block_id,\n        \"id\": task_id,\n        \"inventoryId\": inventory_id,\n        \"lotId\": lot_id,\n    }\n    params = {k: v for k, v in params.items() if v is not None}\n\n    response = self.session.get(url=self.base_path, params=params)\n    response_json = response.json()\n    return TaskPropertyData(**response_json[0])\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.check_for_task_data","title":"check_for_task_data","text":"<pre><code>check_for_task_data(\n    *, task_id: TaskId\n) -&gt; list[CheckPropertyData]\n</code></pre> <p>Checks if a task has data.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>TaskId</code> <p>The ID of the task to check for data.</p> required <p>Returns:</p> Type Description <code>list[CheckPropertyData]</code> <p>A list of CheckPropertyData entities representing the data status of each block + inventory item of the task.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef check_for_task_data(self, *, task_id: TaskId) -&gt; list[CheckPropertyData]:\n    \"\"\"Checks if a task has data.\n\n    Parameters\n    ----------\n    task_id : TaskId\n        The ID of the task to check for data.\n\n    Returns\n    -------\n    list[CheckPropertyData]\n        A list of CheckPropertyData entities representing the data status of each block + inventory item of the task.\n    \"\"\"\n    task_info = self._get_task_from_id(id=task_id)\n\n    params = {\n        \"entity\": \"block\",\n        \"action\": \"checkdata\",\n        \"parentId\": task_id,\n        \"id\": [x.id for x in task_info.blocks],\n    }\n\n    response = self.session.get(url=self.base_path, params=params)\n    return [CheckPropertyData(**x) for x in response.json()]\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.check_block_interval_for_data","title":"check_block_interval_for_data","text":"<pre><code>check_block_interval_for_data(\n    *,\n    block_id: BlockId,\n    task_id: TaskId,\n    interval_id: IntervalId,\n) -&gt; CheckPropertyData\n</code></pre> <p>Check if a specific block interval has data.</p> <p>Parameters:</p> Name Type Description Default <code>block_id</code> <code>BlockId</code> <p>The ID of the block.</p> required <code>task_id</code> <code>TaskId</code> <p>The ID of the task.</p> required <code>interval_id</code> <code>IntervalId</code> <p>The ID of the interval.</p> required <p>Returns:</p> Type Description <code>CheckPropertyData</code> <p>description</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef check_block_interval_for_data(\n    self, *, block_id: BlockId, task_id: TaskId, interval_id: IntervalId\n) -&gt; CheckPropertyData:\n    \"\"\"Check if a specific block interval has data.\n\n    Parameters\n    ----------\n    block_id : BlockId\n        The ID of the block.\n    task_id : TaskId\n        The ID of the task.\n    interval_id : IntervalId\n        The ID of the interval.\n\n    Returns\n    -------\n    CheckPropertyData\n        _description_\n    \"\"\"\n    params = {\n        \"entity\": \"block\",\n        \"action\": \"checkdata\",\n        \"id\": block_id,\n        \"parentId\": task_id,\n        \"intervalId\": interval_id,\n    }\n\n    response = self.session.get(url=self.base_path, params=params)\n    return CheckPropertyData(response.json())\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.get_all_task_properties","title":"get_all_task_properties","text":"<pre><code>get_all_task_properties(\n    *, task_id: TaskId\n) -&gt; list[TaskPropertyData]\n</code></pre> <p>Returns all the properties for a specific task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>TaskId</code> <p>The ID of the task to retrieve properties for.</p> required <p>Returns:</p> Type Description <code>list[TaskPropertyData]</code> <p>A list of TaskPropertyData entities representing the properties within the task.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef get_all_task_properties(self, *, task_id: TaskId) -&gt; list[TaskPropertyData]:\n    \"\"\"Returns all the properties for a specific task.\n\n    Parameters\n    ----------\n    task_id : TaskId\n        The ID of the task to retrieve properties for.\n\n    Returns\n    -------\n    list[TaskPropertyData]\n        A list of TaskPropertyData entities representing the properties within the task.\n    \"\"\"\n    all_info = []\n    task_data_info = self.check_for_task_data(task_id=task_id)\n    for combo_info in task_data_info:\n        all_info.append(\n            self.get_task_block_properties(\n                inventory_id=combo_info.inventory_id,\n                task_id=task_id,\n                block_id=combo_info.block_id,\n                lot_id=combo_info.lot_id,\n            )\n        )\n\n    return all_info\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.update_property_on_task","title":"update_property_on_task","text":"<pre><code>update_property_on_task(\n    *,\n    task_id: TaskId,\n    patch_payload: list[PropertyDataPatchDatum],\n) -&gt; list[TaskPropertyData]\n</code></pre> <p>Updates a specific property on a task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>TaskId</code> <p>The ID of the task.</p> required <code>patch_payload</code> <code>list[PropertyDataPatchDatum]</code> <p>The specific patch to make to update the property.</p> required <p>Returns:</p> Type Description <code>list[TaskPropertyData]</code> <p>A list of TaskPropertyData entities representing the properties within the task.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef update_property_on_task(\n    self, *, task_id: TaskId, patch_payload: list[PropertyDataPatchDatum]\n) -&gt; list[TaskPropertyData]:\n    \"\"\"Updates a specific property on a task.\n\n    Parameters\n    ----------\n    task_id : TaskId\n        The ID of the task.\n    patch_payload : list[PropertyDataPatchDatum]\n        The specific patch to make to update the property.\n\n    Returns\n    -------\n    list[TaskPropertyData]\n        A list of TaskPropertyData entities representing the properties within the task.\n    \"\"\"\n    if len(patch_payload) &gt; 0:\n        self.session.patch(\n            url=f\"{self.base_path}/{task_id}\",\n            json=[\n                x.model_dump(exclude_none=True, by_alias=True, mode=\"json\")\n                for x in patch_payload\n            ],\n        )\n    return self.get_all_task_properties(task_id=task_id)\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.add_properties_to_task","title":"add_properties_to_task","text":"<pre><code>add_properties_to_task(\n    *,\n    inventory_id: InventoryId,\n    task_id: TaskId,\n    block_id: BlockId,\n    lot_id: LotId | None = None,\n    properties: list[TaskPropertyCreate],\n)\n</code></pre> <p>Add new task properties for a given task.</p> <p>This method only works for new values. If a trial number is provided in the TaskPropertyCreate, it must relate to an existing trial. New trials must be added with no trial number provided. Do not try to create multiple new trials in one call as this will lead to unexpected behavior. Build out new trials in a loop if many new trials are needed.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>InventoryId</code> <p>The ID of the inventory.</p> required <code>task_id</code> <code>TaskId</code> <p>The ID of the task.</p> required <code>block_id</code> <code>BlockId</code> <p>The ID of the block.</p> required <code>lot_id</code> <code>LotId</code> <p>The ID of the lot, by default None.</p> <code>None</code> <code>properties</code> <code>list[TaskPropertyCreate]</code> <p>A list of TaskPropertyCreate entities representing the properties to add.</p> required <p>Returns:</p> Type Description <code>list[TaskPropertyData]</code> <p>The newly created task properties.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef add_properties_to_task(\n    self,\n    *,\n    inventory_id: InventoryId,\n    task_id: TaskId,\n    block_id: BlockId,\n    lot_id: LotId | None = None,\n    properties: list[TaskPropertyCreate],\n):\n    \"\"\"\n    Add new task properties for a given task.\n\n    This method only works for new values. If a trial number is provided in the TaskPropertyCreate,\n    it must relate to an existing trial. New trials must be added with no trial number provided.\n    Do not try to create multiple new trials in one call as this will lead to unexpected behavior.\n    Build out new trials in a loop if many new trials are needed.\n\n    Parameters\n    ----------\n    inventory_id : InventoryId\n        The ID of the inventory.\n    task_id : TaskId\n        The ID of the task.\n    block_id : BlockId\n        The ID of the block.\n    lot_id : LotId, optional\n        The ID of the lot, by default None.\n    properties : list[TaskPropertyCreate]\n        A list of TaskPropertyCreate entities representing the properties to add.\n\n    Returns\n    -------\n    list[TaskPropertyData]\n        The newly created task properties.\n    \"\"\"\n    params = {\n        \"blockId\": block_id,\n        \"inventoryId\": inventory_id,\n        \"lotId\": lot_id,\n        \"autoCalculate\": \"true\",\n        \"history\": \"true\",\n    }\n    params = {k: v for k, v in params.items() if v is not None}\n    response = self.session.post(\n        url=f\"{self.base_path}/{task_id}\",\n        json=[x.model_dump(exclude_none=True, by_alias=True, mode=\"json\") for x in properties],\n        params=params,\n    )\n\n    registered_properties = [\n        TaskPropertyCreate(**x) for x in response.json() if \"DataTemplate\" in x\n    ]\n    existing_data_rows = self.get_task_block_properties(\n        inventory_id=inventory_id, task_id=task_id, block_id=block_id, lot_id=lot_id\n    )\n    patches = self._form_calculated_task_property_patches(\n        existing_data_rows=existing_data_rows, properties=registered_properties\n    )\n    if len(patches) &gt; 0:\n        return self.update_property_on_task(task_id=task_id, patch_payload=patches)\n    else:\n        return self.get_all_task_properties(task_id=task_id)\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.update_or_create_task_properties","title":"update_or_create_task_properties","text":"<pre><code>update_or_create_task_properties(\n    *,\n    inventory_id: InventoryId,\n    task_id: TaskId,\n    block_id: BlockId,\n    lot_id: LotId | None = None,\n    properties: list[TaskPropertyCreate],\n) -&gt; list[TaskPropertyData]\n</code></pre> <p>Update or create task properties for a given task.</p> <p>If a trial number is provided in the TaskPropertyCreate, it must relate to an existing trial. New trials must be added with no trial number provided. Do not try to create multiple new trials in one call as this will lead to unexpected behavior. Build out new trials in a loop if many new trials are needed.</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>InventoryId</code> <p>The ID of the inventory.</p> required <code>task_id</code> <code>TaskId</code> <p>The ID of the task.</p> required <code>block_id</code> <code>BlockId</code> <p>The ID of the block.</p> required <code>lot_id</code> <code>LotId</code> <p>The ID of the lot, by default None.</p> <code>None</code> <code>properties</code> <code>list[TaskPropertyCreate]</code> <p>A list of TaskPropertyCreate entities representing the properties to update or create.</p> required <p>Returns:</p> Type Description <code>list[TaskPropertyData]</code> <p>The updated or newly created task properties.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef update_or_create_task_properties(\n    self,\n    *,\n    inventory_id: InventoryId,\n    task_id: TaskId,\n    block_id: BlockId,\n    lot_id: LotId | None = None,\n    properties: list[TaskPropertyCreate],\n) -&gt; list[TaskPropertyData]:\n    \"\"\"\n    Update or create task properties for a given task.\n\n    If a trial number is provided in the TaskPropertyCreate, it must relate to an existing trial.\n    New trials must be added with no trial number provided. Do not try to create multiple new trials\n    in one call as this will lead to unexpected behavior. Build out new trials in a loop if many new\n    trials are needed.\n\n    Parameters\n    ----------\n    inventory_id : InventoryId\n        The ID of the inventory.\n    task_id : TaskId\n        The ID of the task.\n    block_id : BlockId\n        The ID of the block.\n    lot_id : LotId, optional\n        The ID of the lot, by default None.\n    properties : list[TaskPropertyCreate]\n        A list of TaskPropertyCreate entities representing the properties to update or create.\n\n    Returns\n    -------\n    list[TaskPropertyData]\n        The updated or newly created task properties.\n\n    \"\"\"\n    existing_data_rows = self.get_task_block_properties(\n        inventory_id=inventory_id, task_id=task_id, block_id=block_id, lot_id=lot_id\n    )\n    update_patches, new_values = self._form_existing_row_value_patches(\n        existing_data_rows=existing_data_rows, properties=properties\n    )\n\n    calculated_patches = self._form_calculated_task_property_patches(\n        existing_data_rows=existing_data_rows, properties=properties\n    )\n    all_patches = update_patches + calculated_patches\n    if len(new_values) &gt; 0:\n        self.update_property_on_task(task_id=task_id, patch_payload=all_patches)\n        return self.add_properties_to_task(\n            inventory_id=inventory_id,\n            task_id=task_id,\n            block_id=block_id,\n            lot_id=lot_id,\n            properties=new_values,\n        )\n    else:\n        return self.update_property_on_task(task_id=task_id, patch_payload=all_patches)\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.bulk_load_task_properties","title":"bulk_load_task_properties","text":"<pre><code>bulk_load_task_properties(\n    *,\n    inventory_id: InventoryId,\n    task_id: TaskId,\n    block_id: BlockId,\n    property_data: BulkPropertyData,\n    interval=\"default\",\n    lot_id: LotId = None,\n) -&gt; list[TaskPropertyData]\n</code></pre> <p>Bulk load task properties for a given task. WARNING: This will overwrite any existing properties! BulkPropertyData column names must exactly match the names of the data columns (Case Sensitive).</p> <p>Parameters:</p> Name Type Description Default <code>inventory_id</code> <code>InventoryId</code> <p>The ID of the inventory.</p> required <code>task_id</code> <code>TaskId</code> <p>The ID of the task.</p> required <code>block_id</code> <code>BlockId</code> <p>The ID of the block.</p> required <code>lot_id</code> <code>LotId</code> <p>The ID of the lot, by default None.</p> <code>None</code> <code>interval</code> <code>str</code> <p>The interval to use for the properties, by default \"default\". Can be obtained using Workflow.get_interval_id().</p> <code>'default'</code> <code>property_data</code> <code>BulkPropertyData</code> <p>A list of columnwise data containing all your rows of data for a single interval. Can be created using BulkPropertyData.from_dataframe().</p> required <p>Returns:</p> Type Description <code>list[TaskPropertyData]</code> <p>The updated or newly created task properties.</p> Example <pre><code>from albert.resources.property_data import BulkPropertyData\n\ndata = BulkPropertyData.from_dataframe(df=my_dataframe)\nres = client.property_data.bulk_load_task_properties(\n    block_id=\"BLK1\",\n    inventory_id=\"INVEXP102748-042\",\n    property_data=data,\n    task_id=\"TASFOR291760\",\n)\n\n[TaskPropertyData(id=\"TASFOR291760\", ...)]\n</code></pre> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>def bulk_load_task_properties(\n    self,\n    *,\n    inventory_id: InventoryId,\n    task_id: TaskId,\n    block_id: BlockId,\n    property_data: BulkPropertyData,\n    interval=\"default\",\n    lot_id: LotId = None,\n) -&gt; list[TaskPropertyData]:\n    \"\"\"\n    Bulk load task properties for a given task. WARNING: This will overwrite any existing properties!\n    BulkPropertyData column names must exactly match the names of the data columns (Case Sensitive).\n\n    Parameters\n    ----------\n    inventory_id : InventoryId\n        The ID of the inventory.\n    task_id : TaskId\n        The ID of the task.\n    block_id : BlockId\n        The ID of the block.\n    lot_id : LotId, optional\n        The ID of the lot, by default None.\n    interval : str, optional\n        The interval to use for the properties, by default \"default\". Can be obtained using Workflow.get_interval_id().\n    property_data : BulkPropertyData\n        A list of columnwise data containing all your rows of data for a single interval. Can be created using BulkPropertyData.from_dataframe().\n\n    Returns\n    -------\n    list[TaskPropertyData]\n        The updated or newly created task properties.\n\n    Example\n    -------\n\n    ```python\n    from albert.resources.property_data import BulkPropertyData\n\n    data = BulkPropertyData.from_dataframe(df=my_dataframe)\n    res = client.property_data.bulk_load_task_properties(\n        block_id=\"BLK1\",\n        inventory_id=\"INVEXP102748-042\",\n        property_data=data,\n        task_id=\"TASFOR291760\",\n    )\n\n    [TaskPropertyData(id=\"TASFOR291760\", ...)]\n    ```\n    \"\"\"\n    property_df = pd.DataFrame(\n        {x.data_column_name: x.data_series for x in property_data.columns}\n    )\n\n    def _get_column_map(dataframe: pd.DataFrame, property_data: TaskPropertyData):\n        data_col_info = property_data.data[0].trials[0].data_columns  # PropertyValue\n        column_map = {}\n        for col in dataframe.columns:\n            column = [x for x in data_col_info if x.name == col]\n            if len(column) == 1:\n                column_map[col] = column[0]\n            else:\n                raise ValueError(\n                    f\"Column '{col}' not found in block data columns or multiple matches found.\"\n                )\n        return column_map\n\n    def _df_to_task_prop_create_list(\n        dataframe: pd.DataFrame,\n        column_map: dict[str, PropertyValue],\n        data_template_id: DataTemplateId,\n    ) -&gt; list[TaskPropertyCreate]:\n        task_prop_create_list = []\n        for i, row in dataframe.iterrows():\n            for col_name, col_info in column_map.items():\n                if col_name not in dataframe.columns:\n                    raise ValueError(f\"Column '{col_name}' not found in DataFrame.\")\n\n                task_prop_create = TaskPropertyCreate(\n                    data_column=TaskDataColumn(\n                        data_column_id=col_info.id,\n                        column_sequence=col_info.sequence,\n                    ),\n                    value=str(row[col_name]),\n                    visible_trial_number=i + 1,\n                    interval_combination=interval,\n                    data_template=EntityLink(id=data_template_id),\n                )\n                task_prop_create_list.append(task_prop_create)\n        return task_prop_create_list\n\n    task_prop_data = self.get_task_block_properties(\n        inventory_id=inventory_id, task_id=task_id, block_id=block_id, lot_id=lot_id\n    )\n    column_map = _get_column_map(property_df, task_prop_data)\n    all_task_prop_create = _df_to_task_prop_create_list(\n        dataframe=property_df,\n        column_map=column_map,\n        data_template_id=task_prop_data.data_template.id,\n    )\n    with suppress(NotFoundError):\n        # This is expected if the task is new and has no data yet.\n        self.bulk_delete_task_data(\n            task_id=task_id,\n            block_id=block_id,\n            inventory_id=inventory_id,\n            lot_id=lot_id,\n            interval_id=interval,\n        )\n    return self.add_properties_to_task(\n        inventory_id=inventory_id,\n        task_id=task_id,\n        block_id=block_id,\n        lot_id=lot_id,\n        properties=all_task_prop_create,\n    )\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.bulk_delete_task_data","title":"bulk_delete_task_data","text":"<pre><code>bulk_delete_task_data(\n    *,\n    task_id: TaskId,\n    block_id: BlockId,\n    inventory_id: InventoryId,\n    lot_id: LotId | None = None,\n    interval_id=None,\n) -&gt; None\n</code></pre> <p>Bulk delete task data for a given task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>TaskId</code> <p>The ID of the task.</p> required <code>block_id</code> <code>BlockId</code> <p>The ID of the block.</p> required <code>inventory_id</code> <code>InventoryId</code> <p>The ID of the inventory.</p> required <code>lot_id</code> <code>LotId</code> <p>The ID of the lot, by default None.</p> <code>None</code> <code>interval_id</code> <code>IntervalId</code> <p>The ID of the interval, by default None. If provided, will delete data for this specific interval.</p> <code>None</code> <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>def bulk_delete_task_data(\n    self,\n    *,\n    task_id: TaskId,\n    block_id: BlockId,\n    inventory_id: InventoryId,\n    lot_id: LotId | None = None,\n    interval_id=None,\n) -&gt; None:\n    \"\"\"\n    Bulk delete task data for a given task.\n\n    Parameters\n    ----------\n    task_id : TaskId\n        The ID of the task.\n    block_id : BlockId\n        The ID of the block.\n    inventory_id : InventoryId\n        The ID of the inventory.\n    lot_id : LotId, optional\n        The ID of the lot, by default None.\n    interval_id : IntervalId, optional\n        The ID of the interval, by default None. If provided, will delete data for this specific interval.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    params = {\n        \"inventoryId\": inventory_id,\n        \"blockId\": block_id,\n        \"lotId\": lot_id,\n        \"intervalRow\": interval_id if interval_id != \"default\" else None,\n    }\n    params = {k: v for k, v in params.items() if v is not None}\n    self.session.delete(f\"{self.base_path}/{task_id}\", params=params)\n</code></pre>"},{"location":"collections/property_data/#albert.collections.property_data.PropertyDataCollection.search","title":"search","text":"<pre><code>search(\n    *,\n    result: str | None = None,\n    text: str | None = None,\n    order: OrderBy | None = None,\n    sort_by: str | None = None,\n    inventory_ids: list[SearchInventoryId]\n    | SearchInventoryId\n    | None = None,\n    project_ids: list[SearchProjectId]\n    | SearchProjectId\n    | None = None,\n    lot_ids: list[LotId] | LotId | None = None,\n    data_template_ids: DataTemplateId\n    | list[DataTemplateId]\n    | None = None,\n    data_column_ids: DataColumnId\n    | list[DataColumnId]\n    | None = None,\n    category: list[DataEntity] | DataEntity | None = None,\n    data_templates: list[str] | str | None = None,\n    data_columns: list[str] | str | None = None,\n    parameters: list[str] | str | None = None,\n    parameter_group: list[str] | str | None = None,\n    unit: list[str] | str | None = None,\n    created_by: list[UserId] | UserId | None = None,\n    task_created_by: list[UserId] | UserId | None = None,\n    return_fields: list[str] | str | None = None,\n    return_facets: list[str] | str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[PropertyDataSearchItem]\n</code></pre> <p>Search for property data with various filtering options.</p> <p>Parameters:</p> Name Type Description Default <code>result</code> <code>str</code> <p>Query using syntax, e.g. result=viscosity(&lt;200)@temperature(25).</p> <code>None</code> <code>text</code> <code>str</code> <p>Free text search across all fields.</p> <code>None</code> <code>order</code> <code>OrderBy</code> <p>Sort order (ascending/descending).</p> <code>None</code> <code>sort_by</code> <code>str</code> <p>Field to sort results by.</p> <code>None</code> <code>inventory_ids</code> <code>SearchInventoryId or list[SearchInventoryId]</code> <p>Filter by inventory IDs.</p> <code>None</code> <code>project_ids</code> <code>SearchProjectId or list[SearchProjectId]</code> <p>Filter by project IDs.</p> <code>None</code> <code>lot_ids</code> <code>LotId or list[LotId]</code> <p>Filter by lot IDs.</p> <code>None</code> <code>data_template_ids</code> <code>DataTemplateId or list[DataTemplateId]</code> <p>Filter by data template IDs.</p> <code>None</code> <code>data_column_ids</code> <code>DataColumnId or list[DataColumnId]</code> <p>Filter by data column IDs.</p> <code>None</code> <code>category</code> <code>DataEntity or list[DataEntity]</code> <p>Filter by data entity categories.</p> <code>None</code> <code>data_templates</code> <code>str or list[str]</code> <p>Filter by data template names.</p> <code>None</code> <code>data_columns</code> <code>str or list[str]</code> <p>Filter by data column names.</p> <code>None</code> <code>parameters</code> <code>str or list[str]</code> <p>Filter by parameter names.</p> <code>None</code> <code>parameter_group</code> <code>str or list[str]</code> <p>Filter by parameter group names.</p> <code>None</code> <code>unit</code> <code>str or list[str]</code> <p>Filter by unit names.</p> <code>None</code> <code>created_by</code> <code>UserId or list[UserId]</code> <p>Filter by user IDs who created the data.</p> <code>None</code> <code>task_created_by</code> <code>UserId or list[UserId]</code> <p>Filter by user IDs who created the task.</p> <code>None</code> <code>return_fields</code> <code>str or list[str]</code> <p>Specific fields to return.</p> <code>None</code> <code>return_facets</code> <code>str or list[str]</code> <p>Specific facets to return.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[PropertyDataSearchItem]</code> <p>An iterator of search results matching the specified filters.</p> Source code in <code>src/albert/collections/property_data.py</code> <pre><code>@validate_call\ndef search(\n    self,\n    *,\n    result: str | None = None,\n    text: str | None = None,\n    # Sorting/pagination\n    order: OrderBy | None = None,\n    sort_by: str | None = None,\n    # Core platform identifiers\n    inventory_ids: list[SearchInventoryId] | SearchInventoryId | None = None,\n    project_ids: list[SearchProjectId] | SearchProjectId | None = None,\n    lot_ids: list[LotId] | LotId | None = None,\n    data_template_ids: DataTemplateId | list[DataTemplateId] | None = None,\n    data_column_ids: DataColumnId | list[DataColumnId] | None = None,\n    # Data structure filters\n    category: list[DataEntity] | DataEntity | None = None,\n    data_templates: list[str] | str | None = None,\n    data_columns: list[str] | str | None = None,\n    # Data content filters\n    parameters: list[str] | str | None = None,\n    parameter_group: list[str] | str | None = None,\n    unit: list[str] | str | None = None,\n    # User filters\n    created_by: list[UserId] | UserId | None = None,\n    task_created_by: list[UserId] | UserId | None = None,\n    # Response customization\n    return_fields: list[str] | str | None = None,\n    return_facets: list[str] | str | None = None,\n    # Pagination\n    max_items: int | None = None,\n) -&gt; Iterator[PropertyDataSearchItem]:\n    \"\"\"\n    Search for property data with various filtering options.\n\n    Parameters\n    ----------\n    result : str, optional\n        Query using syntax, e.g. result=viscosity(&lt;200)@temperature(25).\n    text : str, optional\n        Free text search across all fields.\n    order : OrderBy, optional\n        Sort order (ascending/descending).\n    sort_by : str, optional\n        Field to sort results by.\n    inventory_ids : SearchInventoryId or list[SearchInventoryId], optional\n        Filter by inventory IDs.\n    project_ids : SearchProjectId or list[SearchProjectId], optional\n        Filter by project IDs.\n    lot_ids : LotId or list[LotId], optional\n        Filter by lot IDs.\n    data_template_ids : DataTemplateId or list[DataTemplateId], optional\n        Filter by data template IDs.\n    data_column_ids : DataColumnId or list[DataColumnId], optional\n        Filter by data column IDs.\n    category : DataEntity or list[DataEntity], optional\n        Filter by data entity categories.\n    data_templates : str or list[str], optional\n        Filter by data template names.\n    data_columns : str or list[str], optional\n        Filter by data column names.\n    parameters : str or list[str], optional\n        Filter by parameter names.\n    parameter_group : str or list[str], optional\n        Filter by parameter group names.\n    unit : str or list[str], optional\n        Filter by unit names.\n    created_by : UserId or list[UserId], optional\n        Filter by user IDs who created the data.\n    task_created_by : UserId or list[UserId], optional\n        Filter by user IDs who created the task.\n    return_fields : str or list[str], optional\n        Specific fields to return.\n    return_facets : str or list[str], optional\n        Specific facets to return.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[PropertyDataSearchItem]\n        An iterator of search results matching the specified filters.\n    \"\"\"\n\n    def deserialize(items: list[dict]) -&gt; list[PropertyDataSearchItem]:\n        return [PropertyDataSearchItem.model_validate(x) for x in items]\n\n    def ensure_list(v):\n        if v is None:\n            return None\n        return [v] if isinstance(v, str | Enum) else v\n\n    params = {\n        \"result\": result,\n        \"text\": text,\n        \"order\": order.value if order else None,\n        \"sortBy\": sort_by,\n        \"inventoryIds\": ensure_list(inventory_ids),\n        \"projectIds\": ensure_list(project_ids),\n        \"lotIds\": ensure_list(lot_ids),\n        \"dataTemplateId\": ensure_list(data_template_ids),\n        \"dataColumnId\": ensure_list(data_column_ids),\n        \"category\": [c.value for c in ensure_list(category)] if category else None,\n        \"dataTemplates\": ensure_list(data_templates),\n        \"dataColumns\": ensure_list(data_columns),\n        \"parameters\": ensure_list(parameters),\n        \"parameterGroup\": ensure_list(parameter_group),\n        \"unit\": ensure_list(unit),\n        \"createdBy\": ensure_list(created_by),\n        \"taskCreatedBy\": ensure_list(task_created_by),\n        \"returnFields\": ensure_list(return_fields),\n        \"returnFacets\": ensure_list(return_facets),\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/search\",\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=deserialize,\n    )\n</code></pre>"},{"location":"collections/reports/","title":"Reports","text":""},{"location":"collections/reports/#albert.collections.reports.ReportCollection","title":"albert.collections.reports.ReportCollection","text":"<pre><code>ReportCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>ReportCollection is a collection class for managing Report entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_report</code> <p>Get a report by its category and report type ID.</p> <code>get_analytics_report</code> <p>Get an analytics report by its report type ID.</p> <code>get_datascience_report</code> <p>Get a datascience report by its report type ID.</p> <code>get_full_report</code> <p>Get a full analytical report by its ID.</p> <code>create_report</code> <p>Create a new analytical report.</p> <code>delete</code> <p>Delete a report.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/reports.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the ReportCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{ReportCollection._api_version}/reports\"\n</code></pre>"},{"location":"collections/reports/#albert.collections.reports.ReportCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/reports'\n</code></pre>"},{"location":"collections/reports/#albert.collections.reports.ReportCollection.get_report","title":"get_report","text":"<pre><code>get_report(\n    *,\n    category: str,\n    report_type_id: str,\n    input_data: dict[str, Any] | None = None,\n) -&gt; ReportInfo\n</code></pre> <p>Get a report by its category and report type ID.</p> <p>Parameters:</p> Name Type Description Default <code>category</code> <code>str</code> <p>The category of the report (e.g., \"datascience\", \"analytics\", etc...).</p> required <code>report_type_id</code> <code>str</code> <p>The report type ID for the report.</p> required <code>input_data</code> <code>dict[str, Any] | None</code> <p>Additional input data for generating the report (e.g., project IDs and unique IDs).</p> <code>None</code> <p>Returns:</p> Type Description <code>ReportInfo</code> <p>The info for the report.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; report = client.reports.get_report(\n...     category=\"datascience\",\n...     report_type_id=\"ALB#RET51\",\n...     input_data={\n...         \"project\": [\"PRO123\"],\n...     }\n... )\n</code></pre> Source code in <code>src/albert/collections/reports.py</code> <pre><code>def get_report(\n    self, *, category: str, report_type_id: str, input_data: dict[str, Any] | None = None\n) -&gt; ReportInfo:\n    \"\"\"Get a report by its category and report type ID.\n\n    Parameters\n    ----------\n    category : str\n        The category of the report (e.g., \"datascience\", \"analytics\", etc...).\n    report_type_id : str\n        The report type ID for the report.\n    input_data : dict[str, Any] | None\n        Additional input data for generating the report\n        (e.g., project IDs and unique IDs).\n\n    Returns\n    -------\n    ReportInfo\n        The info for the report.\n\n    Examples\n    --------\n    &gt;&gt;&gt; report = client.reports.get_report(\n    ...     category=\"datascience\",\n    ...     report_type_id=\"ALB#RET51\",\n    ...     input_data={\n    ...         \"project\": [\"PRO123\"],\n    ...     }\n    ... )\n    \"\"\"\n    path = f\"{self.base_path}/{category}/{report_type_id}\"\n\n    params = {}\n    input_data = input_data or {}\n    for key, value in input_data.items():\n        params[f\"inputData[{key}]\"] = value\n\n    response = self.session.get(path, params=params)\n    return ReportInfo(**response.json())\n</code></pre>"},{"location":"collections/reports/#albert.collections.reports.ReportCollection.get_analytics_report","title":"get_analytics_report","text":"<pre><code>get_analytics_report(\n    *,\n    report_type_id: str,\n    input_data: dict[str, Any] | None = None,\n) -&gt; ReportInfo\n</code></pre> <p>Get an analytics report by its report type ID.</p> <p>Parameters:</p> Name Type Description Default <code>report_type_id</code> <code>str</code> <p>The report type ID for the report.</p> required <code>input_data</code> <code>dict[str, Any] | None</code> <p>Additional input data for generating the report (e.g., project IDs and unique IDs).</p> <code>None</code> <p>Returns:</p> Type Description <code>ReportInfo</code> <p>The info for the report.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; report = client.reports.get_analytics_report(\n...     report_type_id=\"RET22\",\n...     input_data={\n...         \"inventoryId\": \"INVA123\"\n...     }\n... )\n</code></pre> Source code in <code>src/albert/collections/reports.py</code> <pre><code>def get_analytics_report(\n    self,\n    *,\n    report_type_id: str,\n    input_data: dict[str, Any] | None = None,\n) -&gt; ReportInfo:\n    \"\"\"Get an analytics report by its report type ID.\n\n    Parameters\n    ----------\n    report_type_id : str\n        The report type ID for the report.\n    input_data : dict[str, Any] | None\n        Additional input data for generating the report\n        (e.g., project IDs and unique IDs).\n\n    Returns\n    -------\n    ReportInfo\n        The info for the report.\n\n    Examples\n    --------\n    &gt;&gt;&gt; report = client.reports.get_analytics_report(\n    ...     report_type_id=\"RET22\",\n    ...     input_data={\n    ...         \"inventoryId\": \"INVA123\"\n    ...     }\n    ... )\n    \"\"\"\n    return self.get_report(\n        category=\"analytics\",\n        report_type_id=report_type_id,\n        input_data=input_data,\n    )\n</code></pre>"},{"location":"collections/reports/#albert.collections.reports.ReportCollection.get_datascience_report","title":"get_datascience_report","text":"<pre><code>get_datascience_report(\n    *,\n    report_type_id: str,\n    input_data: dict[str, Any] | None = None,\n) -&gt; ReportInfo\n</code></pre> <p>Get a datascience report by its report type ID.</p> <p>Parameters:</p> Name Type Description Default <code>report_type_id</code> <code>str</code> <p>The report type ID for the report.</p> required <code>input_data</code> <code>dict[str, Any] | None</code> <p>Additional input data for generating the report (e.g., project IDs and unique IDs).</p> <code>None</code> <p>Returns:</p> Type Description <code>ReportInfo</code> <p>The info for the report.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; report = client.reports.get_datascience_report(\n...     report_type_id=\"RET51\",\n...     input_data={\n...         \"projectId\": [\"PRO123\"],\n...         \"uniqueId\": [\"DAT123_DAC123\"]\n...     }\n... )\n</code></pre> Source code in <code>src/albert/collections/reports.py</code> <pre><code>def get_datascience_report(\n    self,\n    *,\n    report_type_id: str,\n    input_data: dict[str, Any] | None = None,\n) -&gt; ReportInfo:\n    \"\"\"Get a datascience report by its report type ID.\n\n    Parameters\n    ----------\n    report_type_id : str\n        The report type ID for the report.\n    input_data : dict[str, Any] | None\n        Additional input data for generating the report\n        (e.g., project IDs and unique IDs).\n\n    Returns\n    -------\n    ReportInfo\n        The info for the report.\n\n    Examples\n    --------\n    &gt;&gt;&gt; report = client.reports.get_datascience_report(\n    ...     report_type_id=\"RET51\",\n    ...     input_data={\n    ...         \"projectId\": [\"PRO123\"],\n    ...         \"uniqueId\": [\"DAT123_DAC123\"]\n    ...     }\n    ... )\n    \"\"\"\n    return self.get_report(\n        category=\"datascience\",\n        report_type_id=report_type_id,\n        input_data=input_data,\n    )\n</code></pre>"},{"location":"collections/reports/#albert.collections.reports.ReportCollection.get_full_report","title":"get_full_report","text":"<pre><code>get_full_report(\n    *, report_id: ReportId\n) -&gt; FullAnalyticalReport\n</code></pre> <p>Get a full analytical report by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>report_id</code> <code>ReportId</code> <p>The ID of the report to retrieve.</p> required <p>Returns:</p> Type Description <code>FullAnalyticalReport</code> <p>The full analytical report with all configuration and data.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; report = client.reports.get_full_report(report_id=\"REP14\")\n&gt;&gt;&gt; report_dataframe = report.get_raw_dataframe()\n</code></pre> Source code in <code>src/albert/collections/reports.py</code> <pre><code>def get_full_report(self, *, report_id: ReportId) -&gt; FullAnalyticalReport:\n    \"\"\"Get a full analytical report by its ID.\n\n    Parameters\n    ----------\n    report_id : ReportId\n        The ID of the report to retrieve.\n\n    Returns\n    -------\n    FullAnalyticalReport\n        The full analytical report with all configuration and data.\n\n    Examples\n    --------\n    &gt;&gt;&gt; report = client.reports.get_full_report(report_id=\"REP14\")\n    &gt;&gt;&gt; report_dataframe = report.get_raw_dataframe()\n    \"\"\"\n    path = f\"{self.base_path}/{report_id}\"\n    params = {\"viewReport\": \"1\"}\n\n    response = self.session.get(path, params=params)\n    return FullAnalyticalReport(**response.json())\n</code></pre>"},{"location":"collections/reports/#albert.collections.reports.ReportCollection.create_report","title":"create_report","text":"<pre><code>create_report(\n    *, report: FullAnalyticalReport\n) -&gt; FullAnalyticalReport\n</code></pre> <p>Create a new analytical report.</p> <p>Parameters:</p> Name Type Description Default <code>report</code> <code>FullAnalyticalReport</code> <p>The report configuration to create.</p> required <p>Returns:</p> Type Description <code>FullAnalyticalReport</code> <p>The created report with the generated report_data_id.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; new_report = FullAnalyticalReport(\n...     report_type_id=\"ALB#RET22\",\n...     name=\"My New Report\",\n...     description=\"A test report\"\n... )\n&gt;&gt;&gt; created_report = client.reports.create_report(report=new_report)\n</code></pre> Source code in <code>src/albert/collections/reports.py</code> <pre><code>def create_report(self, *, report: FullAnalyticalReport) -&gt; FullAnalyticalReport:\n    \"\"\"Create a new analytical report.\n\n    Parameters\n    ----------\n    report : FullAnalyticalReport\n        The report configuration to create.\n\n    Returns\n    -------\n    FullAnalyticalReport\n        The created report with the generated report_data_id.\n\n    Examples\n    --------\n    &gt;&gt;&gt; new_report = FullAnalyticalReport(\n    ...     report_type_id=\"ALB#RET22\",\n    ...     name=\"My New Report\",\n    ...     description=\"A test report\"\n    ... )\n    &gt;&gt;&gt; created_report = client.reports.create_report(report=new_report)\n    \"\"\"\n    path = self.base_path\n\n    # Prepare the data for creation (exclude read-only fields)\n    report_data = report.model_dump(\n        exclude={\"report_data_id\", \"created_by\", \"report\"}, exclude_none=True, by_alias=True\n    )\n\n    response = self.session.post(path, json=report_data)\n    return FullAnalyticalReport(**response.json())\n</code></pre>"},{"location":"collections/reports/#albert.collections.reports.ReportCollection.delete","title":"delete","text":"<pre><code>delete(*, id: ReportId) -&gt; None\n</code></pre> <p>Delete a report.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>ReportId</code> <p>The ID of the report to delete.</p> required <p>Examples:</p> <pre><code>&gt;&gt;&gt; client.reports.delete(id=\"REP14\")\n</code></pre> Source code in <code>src/albert/collections/reports.py</code> <pre><code>def delete(self, *, id: ReportId) -&gt; None:\n    \"\"\"Delete a report.\n\n    Parameters\n    ----------\n    id : ReportId\n        The ID of the report to delete.\n\n    Examples\n    --------\n    &gt;&gt;&gt; client.reports.delete(id=\"REP14\")\n    \"\"\"\n    path = f\"{self.base_path}/{id}\"\n    self.session.delete(path)\n</code></pre>"},{"location":"collections/roles/","title":"Roles","text":""},{"location":"collections/roles/#albert.collections.roles.RoleCollection","title":"albert.collections.roles.RoleCollection","text":"<pre><code>RoleCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>RoleCollection is a collection class for managing Role entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_by_id</code> <p>Retrieve a Role by its ID.</p> <code>create</code> <p>Create a new role.</p> <code>get_all</code> <p>Get all the available Roles</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/roles.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the RoleCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{RoleCollection._api_version}/acl/roles\"\n</code></pre>"},{"location":"collections/roles/#albert.collections.roles.RoleCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/acl/roles'\n</code></pre>"},{"location":"collections/roles/#albert.collections.roles.RoleCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: str) -&gt; Role\n</code></pre> <p>Retrieve a Role by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the role.</p> required <p>Returns:</p> Type Description <code>Role</code> <p>The retrieved role.</p> Source code in <code>src/albert/collections/roles.py</code> <pre><code>def get_by_id(self, *, id: str) -&gt; Role:\n    \"\"\"\n    Retrieve a Role by its ID.\n    Parameters\n    ----------\n    id : str\n        The ID of the role.\n    Returns\n    -------\n    Role\n        The retrieved role.\n    \"\"\"\n    # role IDs have # symbols\n    url = urllib.parse.quote(f\"{self.base_path}/{id}\")\n    response = self.session.get(url=url)\n    return Role(**response.json())\n</code></pre>"},{"location":"collections/roles/#albert.collections.roles.RoleCollection.create","title":"create","text":"<pre><code>create(*, role: Role)\n</code></pre> <p>Create a new role.</p> <p>Parameters:</p> Name Type Description Default <code>role</code> <code>Role</code> <p>The role to create.</p> required Source code in <code>src/albert/collections/roles.py</code> <pre><code>def create(self, *, role: Role):\n    \"\"\"\n    Create a new role.\n    Parameters\n    ----------\n    role : Role\n        The role to create.\n    \"\"\"\n    response = self.session.post(\n        self.base_path,\n        json=role.model_dump(by_alias=True, exclude_none=True, mode=\"json\"),\n    )\n    return Role(**response.json())\n</code></pre>"},{"location":"collections/roles/#albert.collections.roles.RoleCollection.get_all","title":"get_all","text":"<pre><code>get_all(*, params: dict | None = None) -&gt; list[Role]\n</code></pre> <p>Get all the available Roles</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>dict</code> <p>description, by default {}</p> <code>None</code> <p>Returns:</p> Type Description <code>List</code> <p>List of available Roles</p> Source code in <code>src/albert/collections/roles.py</code> <pre><code>def get_all(self, *, params: dict | None = None) -&gt; list[Role]:\n    \"\"\"Get all the available Roles\n\n    Parameters\n    ----------\n    params : dict, optional\n        _description_, by default {}\n\n    Returns\n    -------\n    List\n        List of available Roles\n    \"\"\"\n    if params is None:\n        params = {}\n    response = self.session.get(self.base_path, params=params)\n    role_data = response.json().get(\"Items\", [])\n    return [Role(**r) for r in role_data]\n</code></pre>"},{"location":"collections/storage_classes/","title":"Storage Classes","text":""},{"location":"collections/storage_classes/#albert.collections.storage_classes.StorageClassesCollection","title":"albert.collections.storage_classes.StorageClassesCollection","text":"<pre><code>StorageClassesCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>Collection for interacting with storage class compatibility endpoints.</p> <p>Methods:</p> Name Description <code>get_all</code> <p>Retrieve storage compatibility information for all storage classes.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/storage_classes.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    super().__init__(session=session)\n    self.base_path = f\"/api/{self._api_version}/static/storageclass\"\n</code></pre>"},{"location":"collections/storage_classes/#albert.collections.storage_classes.StorageClassesCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/static/storageclass'\n</code></pre>"},{"location":"collections/storage_classes/#albert.collections.storage_classes.StorageClassesCollection.get_all","title":"get_all","text":"<pre><code>get_all() -&gt; list[StorageClass]\n</code></pre> <p>Retrieve storage compatibility information for all storage classes.</p> Source code in <code>src/albert/collections/storage_classes.py</code> <pre><code>@validate_call\ndef get_all(self) -&gt; list[StorageClass]:\n    \"\"\"Retrieve storage compatibility information for all storage classes.\"\"\"\n    response = self.session.get(self.base_path)\n    return [StorageClass(**item) for item in response.json()]\n</code></pre>"},{"location":"collections/storage_locations/","title":"Storage Locations","text":""},{"location":"collections/storage_locations/#albert.collections.storage_locations.StorageLocationsCollection","title":"albert.collections.storage_locations.StorageLocationsCollection","text":"<pre><code>StorageLocationsCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>StorageLocationsCollection is a collection class for managing StorageLoction entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert Session information</p> required <p>Methods:</p> Name Description <code>get_by_id</code> <p>Get a storage location by its ID.</p> <code>get_all</code> <p>Get all storage locations with optional filtering.</p> <code>create</code> <p>Create a new storage location.</p> <code>get_or_create</code> <p>Get or create a storage location.</p> <code>delete</code> <p>Delete a storage location by its ID.</p> <code>update</code> <p>Update a storage location.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/storage_locations.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"Initialize the StorageLocationsCollection.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert Session information\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{StorageLocationsCollection._api_version}/storagelocations\"\n</code></pre>"},{"location":"collections/storage_locations/#albert.collections.storage_locations.StorageLocationsCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/storagelocations'\n</code></pre>"},{"location":"collections/storage_locations/#albert.collections.storage_locations.StorageLocationsCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: str) -&gt; StorageLocation\n</code></pre> <p>Get a storage location by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the storage location to retrieve.</p> required <p>Returns:</p> Type Description <code>StorageLocation</code> <p>The retrieved storage location with the given ID.</p> Source code in <code>src/albert/collections/storage_locations.py</code> <pre><code>def get_by_id(self, *, id: str) -&gt; StorageLocation:\n    \"\"\"Get a storage location by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the storage location to retrieve.\n\n    Returns\n    -------\n    StorageLocation\n        The retrieved storage location with the given ID.\n    \"\"\"\n    path = f\"{self.base_path}/{id}\"\n    response = self.session.get(path)\n    return StorageLocation(**response.json())\n</code></pre>"},{"location":"collections/storage_locations/#albert.collections.storage_locations.StorageLocationsCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    name: str | list[str] | None = None,\n    exact_match: bool = False,\n    location: str | Location | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[StorageLocation]\n</code></pre> <p>Get all storage locations with optional filtering.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or list[str]</code> <p>The name or names of the storage locations to filter by.</p> <code>None</code> <code>exact_match</code> <code>bool</code> <p>Whether to perform an exact match on the name(s). Default is False.</p> <code>False</code> <code>location</code> <code>str or Location</code> <p>A location ID or Location object to filter by.</p> <code>None</code> <code>start_key</code> <code>str</code> <p>The pagination key to start from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[StorageLocation]</code> <p>An iterator over StorageLocation items matching the search criteria.</p> Source code in <code>src/albert/collections/storage_locations.py</code> <pre><code>def get_all(\n    self,\n    *,\n    name: str | list[str] | None = None,\n    exact_match: bool = False,\n    location: str | Location | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[StorageLocation]:\n    \"\"\"\n    Get all storage locations with optional filtering.\n\n    Parameters\n    ----------\n    name : str or list[str], optional\n        The name or names of the storage locations to filter by.\n    exact_match : bool, optional\n        Whether to perform an exact match on the name(s). Default is False.\n    location : str or Location, optional\n        A location ID or Location object to filter by.\n    start_key : str, optional\n        The pagination key to start from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[StorageLocation]\n        An iterator over StorageLocation items matching the search criteria.\n    \"\"\"\n\n    # Remove explicit hydration when SUP-410 is fixed\n    def deserialize(items: list[dict]) -&gt; Iterator[StorageLocation]:\n        for x in items:\n            id = x[\"albertId\"]\n            try:\n                yield self.get_by_id(id=id)\n            except AlbertHTTPError as e:\n                logger.warning(f\"Error fetching storage location {id}: {e}\")\n\n    params = {\n        \"locationId\": location.id\n        if isinstance(location, (Location | EntityLink))\n        else location,\n        \"startKey\": start_key,\n    }\n\n    if name:\n        params[\"name\"] = [name] if isinstance(name, str) else name\n        params[\"exactMatch\"] = exact_match\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=deserialize,\n    )\n</code></pre>"},{"location":"collections/storage_locations/#albert.collections.storage_locations.StorageLocationsCollection.create","title":"create","text":"<pre><code>create(\n    *, storage_location: StorageLocation\n) -&gt; StorageLocation\n</code></pre> <p>Create a new storage location.</p> <p>Parameters:</p> Name Type Description Default <code>storage_location</code> <code>StorageLocation</code> <p>The storage location to create.</p> required <p>Returns:</p> Type Description <code>StorageLocation</code> <p>The created storage location.</p> Source code in <code>src/albert/collections/storage_locations.py</code> <pre><code>def create(self, *, storage_location: StorageLocation) -&gt; StorageLocation:\n    \"\"\"Create a new storage location.\n\n    Parameters\n    ----------\n    storage_location : StorageLocation\n        The storage location to create.\n\n    Returns\n    -------\n    StorageLocation\n        The created storage location.\n    \"\"\"\n    response = self.session.post(\n        self.base_path,\n        json=storage_location.model_dump(by_alias=True, exclude_none=True, mode=\"json\"),\n    )\n    return StorageLocation(**response.json())\n</code></pre>"},{"location":"collections/storage_locations/#albert.collections.storage_locations.StorageLocationsCollection.get_or_create","title":"get_or_create","text":"<pre><code>get_or_create(\n    *, storage_location: StorageLocation\n) -&gt; StorageLocation\n</code></pre> <p>Get or create a storage location.</p> <p>Parameters:</p> Name Type Description Default <code>storage_location</code> <code>StorageLocation</code> <p>The storage location to get or create.</p> required <p>Returns:</p> Type Description <code>StorageLocation</code> <p>The existing or newly created storage location.</p> Source code in <code>src/albert/collections/storage_locations.py</code> <pre><code>def get_or_create(self, *, storage_location: StorageLocation) -&gt; StorageLocation:\n    \"\"\"Get or create a storage location.\n\n    Parameters\n    ----------\n    storage_location : StorageLocation\n        The storage location to get or create.\n\n    Returns\n    -------\n    StorageLocation\n        The existing or newly created storage location.\n    \"\"\"\n    matching = self.get_all(\n        name=storage_location.name, location=storage_location.location, exact_match=True\n    )\n    for m in matching:\n        if m.name.lower() == storage_location.name.lower():\n            logging.warning(\n                f\"Storage location with name {storage_location.name} already exists, returning existing.\"\n            )\n            return m\n    return self.create(storage_location=storage_location)\n</code></pre>"},{"location":"collections/storage_locations/#albert.collections.storage_locations.StorageLocationsCollection.delete","title":"delete","text":"<pre><code>delete(*, id: str) -&gt; None\n</code></pre> <p>Delete a storage location by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the storage location to delete.</p> required Source code in <code>src/albert/collections/storage_locations.py</code> <pre><code>def delete(self, *, id: str) -&gt; None:\n    \"\"\"Delete a storage location by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the storage location to delete.\n    \"\"\"\n    path = f\"{self.base_path}/{id}\"\n    self.session.delete(path)\n</code></pre>"},{"location":"collections/storage_locations/#albert.collections.storage_locations.StorageLocationsCollection.update","title":"update","text":"<pre><code>update(\n    *, storage_location: StorageLocation\n) -&gt; StorageLocation\n</code></pre> <p>Update a storage location.</p> <p>Parameters:</p> Name Type Description Default <code>storage_location</code> <code>StorageLocation</code> <p>The storage location to update.</p> required <p>Returns:</p> Type Description <code>StorageLocation</code> <p>The updated storage location as returned by the server.</p> Source code in <code>src/albert/collections/storage_locations.py</code> <pre><code>def update(self, *, storage_location: StorageLocation) -&gt; StorageLocation:\n    \"\"\"Update a storage location.\n\n    Parameters\n    ----------\n    storage_location : StorageLocation\n        The storage location to update.\n\n    Returns\n    -------\n    StorageLocation\n        The updated storage location as returned by the server.\n    \"\"\"\n    path = f\"{self.base_path}/{storage_location.id}\"\n    payload = self._generate_patch_payload(\n        existing=self.get_by_id(id=storage_location.id),\n        updated=storage_location,\n    )\n    self.session.patch(path, json=payload.model_dump(mode=\"json\", by_alias=True))\n    return self.get_by_id(id=storage_location.id)\n</code></pre>"},{"location":"collections/substances/","title":"Substances","text":""},{"location":"collections/substances/#albert.collections.substance.SubstanceCollection","title":"albert.collections.substance.SubstanceCollection","text":"<pre><code>SubstanceCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>SubstanceCollection is a collection class for managing Substance entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>An instance of the Albert session used for API interactions.</p> required <p>Attributes:</p> Name Type Description <code>base_path</code> <code>str</code> <p>The base URL for making API requests related to substances.</p> <p>Methods:</p> Name Description <code>get_by_ids</code> <p>Retrieves a list of substances by their CAS IDs and optional region.</p> <code>get_by_id</code> <p>Retrieves a single substance by its CAS ID and optional region.</p> Source code in <code>src/albert/collections/substance.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    super().__init__(session=session)\n    self.base_path = f\"/api/{SubstanceCollection._api_version}/substances\"\n</code></pre>"},{"location":"collections/substances/#albert.collections.substance.SubstanceCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/substances'\n</code></pre>"},{"location":"collections/substances/#albert.collections.substance.SubstanceCollection.get_by_ids","title":"get_by_ids","text":"<pre><code>get_by_ids(\n    *,\n    cas_ids: list[str],\n    region: str = \"US\",\n    catch_errors: bool | None = None,\n) -&gt; list[SubstanceInfo]\n</code></pre> <p>Get substances by their CAS IDs.</p> <p>If <code>catch_errors</code> is set to False, the number of substances returned may be less than the number of CAS IDs provided if any of the CAS IDs result in an error.</p> <p>Parameters:</p> Name Type Description Default <code>cas_ids</code> <code>list[str]</code> <p>A list of CAS IDs to retrieve substances for.</p> required <code>region</code> <code>str</code> <p>The region to filter the subastance by, by default \"US\"</p> <code>'US'</code> <code>catch_errors</code> <code>bool</code> <p>Whether to catch errors for unknown CAS, by default True.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[SubstanceInfo]</code> <p>A list of substances with the given CAS IDs.</p> Source code in <code>src/albert/collections/substance.py</code> <pre><code>def get_by_ids(\n    self,\n    *,\n    cas_ids: list[str],\n    region: str = \"US\",\n    catch_errors: bool | None = None,\n) -&gt; list[SubstanceInfo]:\n    \"\"\"Get substances by their CAS IDs.\n\n    If `catch_errors` is set to False, the number of substances returned\n    may be less than the number of CAS IDs provided if any of the CAS IDs result in an error.\n\n    Parameters\n    ----------\n    cas_ids : list[str]\n        A list of CAS IDs to retrieve substances for.\n    region : str, optional\n        The region to filter the subastance by, by default \"US\"\n    catch_errors : bool, optional\n        Whether to catch errors for unknown CAS, by default True.\n\n    Returns\n    -------\n    list[SubstanceInfo]\n        A list of substances with the given CAS IDs.\n    \"\"\"\n    params = {\n        \"casIDs\": \",\".join(cas_ids),\n        \"region\": region,\n        \"catchErrors\": json.dumps(catch_errors) if catch_errors is not None else None,\n    }\n    params = {k: v for k, v in params.items() if v is not None}\n    response = self.session.get(self.base_path, params=params)\n    return SubstanceResponse.model_validate(response.json()).substances\n</code></pre>"},{"location":"collections/substances/#albert.collections.substance.SubstanceCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(\n    *,\n    cas_id: str,\n    region: str = \"US\",\n    catch_errors: bool | None = None,\n) -&gt; SubstanceInfo\n</code></pre> <p>Get a substance by its CAS ID.</p> <p>Parameters:</p> Name Type Description Default <code>cas_id</code> <code>str</code> <p>The CAS ID of the substance to retrieve.</p> required <code>region</code> <code>str</code> <p>The region to filter the substance by, by default \"US\".</p> <code>'US'</code> <code>catch_errors</code> <code>bool</code> <p>Whether to catch errors for unknown CAS, by default False.</p> <code>None</code> <p>Returns:</p> Type Description <code>SubstanceInfo</code> <p>The retrieved substance or raises an error if not found.</p> Source code in <code>src/albert/collections/substance.py</code> <pre><code>def get_by_id(\n    self,\n    *,\n    cas_id: str,\n    region: str = \"US\",\n    catch_errors: bool | None = None,\n) -&gt; SubstanceInfo:\n    \"\"\"\n    Get a substance by its CAS ID.\n\n    Parameters\n    ----------\n    cas_id : str\n        The CAS ID of the substance to retrieve.\n    region : str, optional\n        The region to filter the substance by, by default \"US\".\n    catch_errors : bool, optional\n        Whether to catch errors for unknown CAS, by default False.\n\n    Returns\n    -------\n    SubstanceInfo\n        The retrieved substance or raises an error if not found.\n    \"\"\"\n    return self.get_by_ids(cas_ids=[cas_id], region=region, catch_errors=catch_errors)[0]\n</code></pre>"},{"location":"collections/tags/","title":"Tags","text":""},{"location":"collections/tags/#albert.collections.tags.TagCollection","title":"albert.collections.tags.TagCollection","text":"<pre><code>TagCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>TagCollection is a collection class for managing Tag entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Attributes:</p> Name Type Description <code>base_path</code> <code>str</code> <p>The base URL for tag API requests.</p> <p>Methods:</p> Name Description <code>get_all</code> <p>Lists tag entities with optional filters.</p> <code>exists</code> <p>Checks if a tag exists by its name.</p> <code>create</code> <p>Creates a new tag entity.</p> <code>get_by_id</code> <p>Retrieves a tag by its ID.</p> <code>get_by_ids</code> <p>Retrieve a list of tags by their IDs.</p> <code>get_by_name</code> <p>Retrieves a tag by its name.</p> <code>delete</code> <p>Deletes a tag by its ID.</p> <code>rename</code> <p>Renames an existing tag entity.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required Source code in <code>src/albert/collections/tags.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the TagCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{TagCollection._api_version}/tags\"\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/tags'\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.exists","title":"exists","text":"<pre><code>exists(*, tag: str, exact_match: bool = True) -&gt; bool\n</code></pre> <p>Checks if a tag exists by its name.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>The name of the tag to check.</p> required <code>exact_match</code> <code>bool</code> <p>Whether to match the name exactly, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the tag exists, False otherwise.</p> Source code in <code>src/albert/collections/tags.py</code> <pre><code>def exists(self, *, tag: str, exact_match: bool = True) -&gt; bool:\n    \"\"\"\n    Checks if a tag exists by its name.\n\n    Parameters\n    ----------\n    tag : str\n        The name of the tag to check.\n    exact_match : bool, optional\n        Whether to match the name exactly, by default True.\n\n    Returns\n    -------\n    bool\n        True if the tag exists, False otherwise.\n    \"\"\"\n\n    return self.get_by_name(name=tag, exact_match=exact_match) is not None\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.create","title":"create","text":"<pre><code>create(*, tag: str | Tag) -&gt; Tag\n</code></pre> <p>Creates a new tag entity.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Union[str, Tag]</code> <p>The tag name or Tag entity to create.</p> required <p>Returns:</p> Type Description <code>Tag</code> <p>The created Tag entity.</p> Source code in <code>src/albert/collections/tags.py</code> <pre><code>def create(self, *, tag: str | Tag) -&gt; Tag:\n    \"\"\"\n    Creates a new tag entity.\n\n    Parameters\n    ----------\n    tag : Union[str, Tag]\n        The tag name or Tag entity to create.\n\n    Returns\n    -------\n    Tag\n        The created Tag entity.\n    \"\"\"\n    if isinstance(tag, str):\n        tag = Tag(tag=tag)\n\n    payload = {\"name\": tag.tag}\n    response = self.session.post(self.base_path, json=payload)\n    tag = Tag(**response.json())\n    return tag\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.get_or_create","title":"get_or_create","text":"<pre><code>get_or_create(*, tag: str | Tag) -&gt; Tag\n</code></pre> <p>Retrieves a Tag by its name or creates it if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Union[str, Tag]</code> <p>The tag name or Tag entity to retrieve or create.</p> required <p>Returns:</p> Type Description <code>Tag</code> <p>The existing or newly created Tag entity.</p> Source code in <code>src/albert/collections/tags.py</code> <pre><code>def get_or_create(self, *, tag: str | Tag) -&gt; Tag:\n    \"\"\"\n    Retrieves a Tag by its name or creates it if it does not exist.\n\n    Parameters\n    ----------\n    tag : Union[str, Tag]\n        The tag name or Tag entity to retrieve or create.\n\n    Returns\n    -------\n    Tag\n        The existing or newly created Tag entity.\n    \"\"\"\n    if isinstance(tag, str):\n        tag = Tag(tag=tag)\n    found = self.get_by_name(name=tag.tag, exact_match=True)\n    if found:\n        logging.warning(f\"Tag {found.tag} already exists with id {found.id}\")\n        return found\n    return self.create(tag=tag)\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: TagId) -&gt; Tag\n</code></pre> <p>Get a tag by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the tag to get.</p> required <p>Returns:</p> Type Description <code>Tag</code> <p>The Tag entity.</p> Source code in <code>src/albert/collections/tags.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: TagId) -&gt; Tag:\n    \"\"\"\n    Get a tag by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the tag to get.\n\n    Returns\n    -------\n    Tag\n        The Tag entity.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    return Tag(**response.json())\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.get_by_ids","title":"get_by_ids","text":"<pre><code>get_by_ids(*, ids: list[TagId]) -&gt; list[Tag]\n</code></pre> Source code in <code>src/albert/collections/tags.py</code> <pre><code>@validate_call\ndef get_by_ids(self, *, ids: list[TagId]) -&gt; list[Tag]:\n    url = f\"{self.base_path}/ids\"\n    batches = [ids[i : i + 100] for i in range(0, len(ids), 100)]\n    return [\n        Tag(**item)\n        for batch in batches\n        for item in self.session.get(url, params={\"id\": batch}).json()\n    ]\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(\n    *, name: str, exact_match: bool = True\n) -&gt; Tag | None\n</code></pre> <p>Retrieves a tag by its name or None if not found.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the tag to retrieve.</p> required <code>exact_match</code> <code>bool</code> <p>Whether to match the name exactly, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>Tag</code> <p>The Tag entity if found, None otherwise.</p> Source code in <code>src/albert/collections/tags.py</code> <pre><code>def get_by_name(self, *, name: str, exact_match: bool = True) -&gt; Tag | None:\n    \"\"\"\n    Retrieves a tag by its name or None if not found.\n\n    Parameters\n    ----------\n    name : str\n        The name of the tag to retrieve.\n    exact_match : bool, optional\n        Whether to match the name exactly, by default True.\n\n    Returns\n    -------\n    Tag\n        The Tag entity if found, None otherwise.\n    \"\"\"\n    found = self.get_all(name=name, exact_match=exact_match, max_items=1)\n    return next(found, None)\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.delete","title":"delete","text":"<pre><code>delete(*, id: TagId) -&gt; None\n</code></pre> <p>Deletes a tag by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the tag to delete.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/tags.py</code> <pre><code>@validate_call\ndef delete(self, *, id: TagId) -&gt; None:\n    \"\"\"\n    Deletes a tag by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the tag to delete.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.rename","title":"rename","text":"<pre><code>rename(*, old_name: str, new_name: str) -&gt; Tag\n</code></pre> <p>Renames an existing tag entity.</p> <p>Parameters:</p> Name Type Description Default <code>old_name</code> <code>str</code> <p>The current name of the tag.</p> required <code>new_name</code> <code>str</code> <p>The new name of the tag.</p> required <p>Returns:</p> Type Description <code>Tag</code> <p>The renamed Tag.</p> Source code in <code>src/albert/collections/tags.py</code> <pre><code>def rename(self, *, old_name: str, new_name: str) -&gt; Tag:\n    \"\"\"\n    Renames an existing tag entity.\n\n    Parameters\n    ----------\n    old_name : str\n        The current name of the tag.\n    new_name : str\n        The new name of the tag.\n\n    Returns\n    -------\n    Tag\n        The renamed Tag.\n    \"\"\"\n    found_tag = self.get_by_name(name=old_name, exact_match=True)\n    if not found_tag:\n        msg = f'Tag \"{old_name}\" not found.'\n        logger.error(msg)\n        raise AlbertException(msg)\n    tag_id = found_tag.id\n    payload = [\n        {\n            \"data\": [\n                {\n                    \"operation\": \"update\",\n                    \"attribute\": \"name\",\n                    \"oldValue\": old_name,\n                    \"newValue\": new_name,\n                }\n            ],\n            \"id\": tag_id,\n        }\n    ]\n    self.session.patch(self.base_path, json=payload)\n    return self.get_by_id(id=tag_id)\n</code></pre>"},{"location":"collections/tags/#albert.collections.tags.TagCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    order_by: OrderBy = DESCENDING,\n    name: str | list[str] | None = None,\n    exact_match: bool = True,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Tag]\n</code></pre> <p>Get all Tag entities with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>order_by</code> <code>OrderBy</code> <p>The order by which to sort the results. Default is DESCENDING.</p> <code>DESCENDING</code> <code>name</code> <code>str or list[str]</code> <p>Filter tags by one or more names.</p> <code>None</code> <code>exact_match</code> <code>bool</code> <p>Whether to match the name(s) exactly. Default is True.</p> <code>True</code> <code>start_key</code> <code>str</code> <p>The pagination key to start from.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Tag]</code> <p>An iterator of Tag entities matching the filters.</p> Source code in <code>src/albert/collections/tags.py</code> <pre><code>def get_all(\n    self,\n    *,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    name: str | list[str] | None = None,\n    exact_match: bool = True,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Tag]:\n    \"\"\"\n    Get all Tag entities with optional filters.\n\n    Parameters\n    ----------\n    order_by : OrderBy, optional\n        The order by which to sort the results. Default is DESCENDING.\n    name : str or list[str], optional\n        Filter tags by one or more names.\n    exact_match : bool, optional\n        Whether to match the name(s) exactly. Default is True.\n    start_key : str, optional\n        The pagination key to start from.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[Tag]\n        An iterator of Tag entities matching the filters.\n    \"\"\"\n    params = {\n        \"orderBy\": order_by.value,\n        \"startKey\": start_key,\n    }\n\n    if name:\n        params[\"name\"] = [name] if isinstance(name, str) else name\n        params[\"exactMatch\"] = exact_match\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [Tag(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/tasks/","title":"Tasks","text":""},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection","title":"albert.collections.tasks.TaskCollection","text":"<pre><code>TaskCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>TaskCollection is a collection class for managing Task entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert Session information</p> required <p>Methods:</p> Name Description <code>create</code> <p>Create a new task. Tasks can be of different types, such as PropertyTask, and are created using the provided task object.</p> <code>add_block</code> <p>Add a block to a Property task.</p> <code>update_block_workflow</code> <p>Update the workflow of a specific block within a task.</p> <code>remove_block</code> <p>Remove a block from a Property task.</p> <code>delete</code> <p>Delete a task.</p> <code>get_by_id</code> <p>Retrieve a task by its ID.</p> <code>search</code> <p>Search for Task matching the provided criteria.</p> <code>get_all</code> <p>Retrieve fully hydrated Task entities with optional filters.</p> <code>update</code> <p>Update a task.</p> <code>get_history</code> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"Initialize the TaskCollection.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert Session information\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{TaskCollection._api_version}/tasks\"\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/tasks'\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.create","title":"create","text":"<pre><code>create(\n    *, task: PropertyTask | GeneralTask | BatchTask\n) -&gt; BaseTask\n</code></pre> <p>Create a new task. Tasks can be of different types, such as PropertyTask, and are created using the provided task object.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>PropertyTask | GeneralTask | BatchTask</code> <p>The task object to create.</p> required <p>Returns:</p> Type Description <code>BaseTask</code> <p>The registered task object.</p> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>def create(self, *, task: PropertyTask | GeneralTask | BatchTask) -&gt; BaseTask:\n    \"\"\"Create a new task. Tasks can be of different types, such as PropertyTask, and are created using the provided task object.\n\n    Parameters\n    ----------\n    task : PropertyTask | GeneralTask | BatchTask\n        The task object to create.\n\n    Returns\n    -------\n    BaseTask\n        The registered task object.\n    \"\"\"\n    payload = [task.model_dump(mode=\"json\", by_alias=True, exclude_none=True)]\n    url = f\"{self.base_path}/multi?category={task.category.value}\"\n    if task.parent_id is not None:\n        url = f\"{url}&amp;parentId={task.parent_id}\"\n    response = self.session.post(url=url, json=payload)\n    task_data = response.json()[0]\n    return TaskAdapter.validate_python(task_data)\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.add_block","title":"add_block","text":"<pre><code>add_block(\n    *,\n    task_id: TaskId,\n    data_template_id: DataTemplateId,\n    workflow_id: WorkflowId,\n) -&gt; None\n</code></pre> <p>Add a block to a Property task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>TaskId</code> <p>The ID of the task to add the block to.</p> required <code>data_template_id</code> <code>DataTemplateId</code> <p>The ID of the data template to use for the block.</p> required <code>workflow_id</code> <code>WorkflowId</code> <p>The ID of the workflow to assign to the block.</p> required <p>Returns:</p> Type Description <code>None</code> <p>This method does not return any value.</p> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>@validate_call\ndef add_block(\n    self, *, task_id: TaskId, data_template_id: DataTemplateId, workflow_id: WorkflowId\n) -&gt; None:\n    \"\"\"Add a block to a Property task.\n\n    Parameters\n    ----------\n    task_id : TaskId\n        The ID of the task to add the block to.\n    data_template_id : DataTemplateId\n        The ID of the data template to use for the block.\n    workflow_id : WorkflowId\n        The ID of the workflow to assign to the block.\n\n    Returns\n    -------\n    None\n        This method does not return any value.\n\n    \"\"\"\n    url = f\"{self.base_path}/{task_id}\"\n    payload = [\n        {\n            \"id\": task_id,\n            \"data\": [\n                {\n                    \"operation\": \"add\",\n                    \"attribute\": \"Block\",\n                    \"newValue\": [{\"datId\": data_template_id, \"Workflow\": {\"id\": workflow_id}}],\n                }\n            ],\n        }\n    ]\n    self.session.patch(url=url, json=payload)\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.update_block_workflow","title":"update_block_workflow","text":"<pre><code>update_block_workflow(\n    *,\n    task_id: TaskId,\n    block_id: BlockId,\n    workflow_id: WorkflowId,\n) -&gt; None\n</code></pre> <p>Update the workflow of a specific block within a task.</p> <p>This method updates the workflow of a specified block within a task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>The ID of the task.</p> required <code>block_id</code> <code>str</code> <p>The ID of the block within the task.</p> required <code>workflow_id</code> <code>str</code> <p>The ID of the new workflow to be assigned to the block.</p> required <p>Returns:</p> Type Description <code>None</code> <p>This method does not return any value.</p> Notes <ul> <li>The method asserts that the retrieved task is an instance of <code>PropertyTask</code>.</li> <li>If the block's current workflow matches the new workflow ID, no update is performed.</li> <li>The method handles the case where the block has a default workflow named \"No Parameter Group\".</li> </ul> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>@validate_call\ndef update_block_workflow(\n    self, *, task_id: TaskId, block_id: BlockId, workflow_id: WorkflowId\n) -&gt; None:\n    \"\"\"\n    Update the workflow of a specific block within a task.\n\n    This method updates the workflow of a specified block within a task.\n    Parameters\n    ----------\n    task_id : str\n        The ID of the task.\n    block_id : str\n        The ID of the block within the task.\n    workflow_id : str\n        The ID of the new workflow to be assigned to the block.\n\n    Returns\n    -------\n    None\n        This method does not return any value.\n\n    Notes\n    -----\n    - The method asserts that the retrieved task is an instance of `PropertyTask`.\n    - If the block's current workflow matches the new workflow ID, no update is performed.\n    - The method handles the case where the block has a default workflow named \"No Parameter Group\".\n    \"\"\"\n    url = f\"{self.base_path}/{task_id}\"\n    task = self.get_by_id(id=task_id)\n    if not isinstance(task, PropertyTask):\n        logger.error(f\"Task {task_id} is not an instance of PropertyTask\")\n        raise TypeError(f\"Task {task_id} is not an instance of PropertyTask\")\n    for b in task.blocks:\n        if b.id != block_id:\n            continue\n        for w in b.workflow:\n            if w.name == \"No Parameter Group\" and len(b.workflow) &gt; 1:\n                # hardcoded default workflow\n                continue\n            existing_workflow_id = w.id\n    if existing_workflow_id == workflow_id:\n        logger.info(f\"Block {block_id} already has workflow {workflow_id}\")\n        return None\n    patch = [\n        {\n            \"data\": [\n                {\n                    \"operation\": \"update\",\n                    \"attribute\": \"workflow\",\n                    \"oldValue\": existing_workflow_id,\n                    \"newValue\": workflow_id,\n                    \"blockId\": block_id,\n                }\n            ],\n            \"id\": task_id,\n        }\n    ]\n    self.session.patch(url=url, json=patch)\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.remove_block","title":"remove_block","text":"<pre><code>remove_block(*, task_id: TaskId, block_id: BlockId) -&gt; None\n</code></pre> <p>Remove a block from a Property task.</p> <p>Parameters:</p> Name Type Description Default <code>task_id</code> <code>str</code> <p>ID of the Task to remove the block from (e.g., TASFOR1234)</p> required <code>block_id</code> <code>str</code> <p>ID of the Block to remove (e.g., BLK1)</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>@validate_call\ndef remove_block(self, *, task_id: TaskId, block_id: BlockId) -&gt; None:\n    \"\"\"Remove a block from a Property task.\n\n    Parameters\n    ----------\n    task_id : str\n        ID of the Task to remove the block from (e.g., TASFOR1234)\n    block_id : str\n        ID of the Block to remove (e.g., BLK1)\n\n    Returns\n    -------\n    None\n    \"\"\"\n    url = f\"{self.base_path}/{task_id}\"\n    payload = [\n        {\n            \"id\": task_id,\n            \"data\": [\n                {\n                    \"operation\": \"delete\",\n                    \"attribute\": \"Block\",\n                    \"oldValue\": [block_id],\n                }\n            ],\n        }\n    ]\n    self.session.patch(url=url, json=payload)\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.delete","title":"delete","text":"<pre><code>delete(*, id: TaskId) -&gt; None\n</code></pre> <p>Delete a task.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>TaskId</code> <p>The ID of the task to delete.</p> required Source code in <code>src/albert/collections/tasks.py</code> <pre><code>@validate_call\ndef delete(self, *, id: TaskId) -&gt; None:\n    \"\"\"Delete a task.\n\n    Parameters\n    ----------\n    id : TaskId\n        The ID of the task to delete.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: TaskId) -&gt; BaseTask\n</code></pre> <p>Retrieve a task by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>TaskId</code> <p>The ID of the task to retrieve.</p> required <p>Returns:</p> Type Description <code>BaseTask</code> <p>The task object with the provided ID.</p> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: TaskId) -&gt; BaseTask:\n    \"\"\"Retrieve a task by its ID.\n\n    Parameters\n    ----------\n    id : TaskId\n        The ID of the task to retrieve.\n\n    Returns\n    -------\n    BaseTask\n        The task object with the provided ID.\n    \"\"\"\n    url = f\"{self.base_path}/multi/{id}\"\n    response = self.session.get(url)\n    return TaskAdapter.validate_python(response.json())\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.search","title":"search","text":"<pre><code>search(\n    *,\n    text: str | None = None,\n    tags: list[str] | None = None,\n    task_id: list[TaskId] | None = None,\n    linked_task: list[TaskId] | None = None,\n    category: TaskCategory | None = None,\n    albert_id: list[str] | None = None,\n    data_template: list[str] | None = None,\n    assigned_to: list[str] | None = None,\n    location: list[str] | None = None,\n    priority: list[str] | None = None,\n    status: list[str] | None = None,\n    parameter_group: list[str] | None = None,\n    created_by: list[str] | None = None,\n    project_id: ProjectId | None = None,\n    order_by: OrderBy = DESCENDING,\n    sort_by: str | None = None,\n    max_items: int | None = None,\n    offset: int = 0,\n) -&gt; Iterator[TaskSearchItem]\n</code></pre> <p>Search for Task matching the provided criteria.</p> <p>\u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance. To retrieve fully detailed entities, use :meth:<code>get_all</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text search across multiple task fields.</p> <code>None</code> <code>tags</code> <code>list[str]</code> <p>Filter by tags associated with tasks.</p> <code>None</code> <code>task_id</code> <code>list[str]</code> <p>Specific task IDs to search for.</p> <code>None</code> <code>linked_task</code> <code>list[str]</code> <p>Task IDs linked to the ones being searched.</p> <code>None</code> <code>category</code> <code>TaskCategory</code> <p>Task category filter (e.g., Experiment, Analysis).</p> <code>None</code> <code>albert_id</code> <code>list[str]</code> <p>Albert-specific task identifiers.</p> <code>None</code> <code>data_template</code> <code>list[str]</code> <p>Data template names associated with tasks.</p> <code>None</code> <code>assigned_to</code> <code>list[str]</code> <p>User names assigned to the tasks.</p> <code>None</code> <code>location</code> <code>list[str]</code> <p>Locations where tasks are carried out.</p> <code>None</code> <code>priority</code> <code>list[str]</code> <p>Priority levels for filtering tasks.</p> <code>None</code> <code>status</code> <code>list[str]</code> <p>Task status values (e.g., Open, Done).</p> <code>None</code> <code>parameter_group</code> <code>list[str]</code> <p>Parameter Group names associated with tasks.</p> <code>None</code> <code>created_by</code> <code>list[str]</code> <p>User names who created the tasks.</p> <code>None</code> <code>project_id</code> <code>str</code> <p>ID of the parent project for filtering tasks.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>The order in which to return results (asc or desc), default DESCENDING.</p> <code>DESCENDING</code> <code>sort_by</code> <code>str</code> <p>Attribute to sort tasks by (e.g., createdAt, name).</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <code>offset</code> <code>int</code> <p>Number of results to skip for pagination, default 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>Iterator[TaskSearchItem]</code> <p>An iterator of matching, lightweight TaskSearchItem entities.</p> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>@validate_call\ndef search(\n    self,\n    *,\n    text: str | None = None,\n    tags: list[str] | None = None,\n    task_id: list[TaskId] | None = None,\n    linked_task: list[TaskId] | None = None,\n    category: TaskCategory | None = None,\n    albert_id: list[str] | None = None,\n    data_template: list[str] | None = None,\n    assigned_to: list[str] | None = None,\n    location: list[str] | None = None,\n    priority: list[str] | None = None,\n    status: list[str] | None = None,\n    parameter_group: list[str] | None = None,\n    created_by: list[str] | None = None,\n    project_id: ProjectId | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    sort_by: str | None = None,\n    max_items: int | None = None,\n    offset: int = 0,\n) -&gt; Iterator[TaskSearchItem]:\n    \"\"\"\n    Search for Task matching the provided criteria.\n\n    \u26a0\ufe0f This method returns partial (unhydrated) entities to optimize performance.\n    To retrieve fully detailed entities, use :meth:`get_all` instead.\n\n    Parameters\n    ----------\n    text : str, optional\n        Text search across multiple task fields.\n    tags : list[str], optional\n        Filter by tags associated with tasks.\n    task_id : list[str], optional\n        Specific task IDs to search for.\n    linked_task : list[str], optional\n        Task IDs linked to the ones being searched.\n    category : TaskCategory, optional\n        Task category filter (e.g., Experiment, Analysis).\n    albert_id : list[str], optional\n        Albert-specific task identifiers.\n    data_template : list[str], optional\n        Data template names associated with tasks.\n    assigned_to : list[str], optional\n        User names assigned to the tasks.\n    location : list[str], optional\n        Locations where tasks are carried out.\n    priority : list[str], optional\n        Priority levels for filtering tasks.\n    status : list[str], optional\n        Task status values (e.g., Open, Done).\n    parameter_group : list[str], optional\n        Parameter Group names associated with tasks.\n    created_by : list[str], optional\n        User names who created the tasks.\n    project_id : str, optional\n        ID of the parent project for filtering tasks.\n    order_by : OrderBy, optional\n        The order in which to return results (asc or desc), default DESCENDING.\n    sort_by : str, optional\n        Attribute to sort tasks by (e.g., createdAt, name).\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n    offset : int, optional\n        Number of results to skip for pagination, default 0.\n\n    Returns\n    -------\n    Iterator[TaskSearchItem]\n        An iterator of matching, lightweight TaskSearchItem entities.\n    \"\"\"\n    params = {\n        \"offset\": offset,\n        \"order\": order_by.value,\n        \"text\": text,\n        \"sortBy\": sort_by,\n        \"tags\": tags,\n        \"taskId\": task_id,\n        \"linkedTask\": linked_task,\n        \"category\": category,\n        \"albertId\": albert_id,\n        \"dataTemplate\": data_template,\n        \"assignedTo\": assigned_to,\n        \"location\": location,\n        \"priority\": priority,\n        \"status\": status,\n        \"parameterGroup\": parameter_group,\n        \"createdBy\": created_by,\n        \"projectId\": project_id,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/search\",\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [\n            TaskSearchItem(**item)._bind_collection(self) for item in items\n        ],\n    )\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    text: str | None = None,\n    tags: list[str] | None = None,\n    task_id: list[TaskId] | None = None,\n    linked_task: list[TaskId] | None = None,\n    category: TaskCategory | None = None,\n    albert_id: list[str] | None = None,\n    data_template: list[str] | None = None,\n    assigned_to: list[str] | None = None,\n    location: list[str] | None = None,\n    priority: list[str] | None = None,\n    status: list[str] | None = None,\n    parameter_group: list[str] | None = None,\n    created_by: list[str] | None = None,\n    project_id: ProjectId | None = None,\n    order_by: OrderBy = DESCENDING,\n    sort_by: str | None = None,\n    max_items: int | None = None,\n    offset: int = 0,\n) -&gt; Iterator[BaseTask]\n</code></pre> <p>Retrieve fully hydrated Task entities with optional filters.</p> <p>This method returns complete entity data using <code>get_by_id</code>. Use :meth:<code>search</code> for faster retrieval when you only need lightweight, partial (unhydrated) entities.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Text search across multiple task fields.</p> <code>None</code> <code>tags</code> <code>list[str]</code> <p>Filter by tags associated with tasks.</p> <code>None</code> <code>task_id</code> <code>list[str]</code> <p>Specific task IDs to search for.</p> <code>None</code> <code>linked_task</code> <code>list[str]</code> <p>Task IDs linked to the ones being searched.</p> <code>None</code> <code>category</code> <code>TaskCategory</code> <p>Task category filter (e.g., Experiment, Analysis).</p> <code>None</code> <code>albert_id</code> <code>list[str]</code> <p>Albert-specific task identifiers.</p> <code>None</code> <code>data_template</code> <code>list[str]</code> <p>Data template names associated with tasks.</p> <code>None</code> <code>assigned_to</code> <code>list[str]</code> <p>User names assigned to the tasks.</p> <code>None</code> <code>location</code> <code>list[str]</code> <p>Locations where tasks are carried out.</p> <code>None</code> <code>priority</code> <code>list[str]</code> <p>Priority levels for filtering tasks.</p> <code>None</code> <code>status</code> <code>list[str]</code> <p>Task status values (e.g., Open, Done).</p> <code>None</code> <code>parameter_group</code> <code>list[str]</code> <p>Parameter Group names associated with tasks.</p> <code>None</code> <code>created_by</code> <code>list[str]</code> <p>User names who created the tasks.</p> <code>None</code> <code>project_id</code> <code>str</code> <p>ID of the parent project for filtering tasks.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>The order in which to return results (asc or desc), default DESCENDING.</p> <code>DESCENDING</code> <code>sort_by</code> <code>str</code> <p>Attribute to sort tasks by (e.g., createdAt, name).</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <code>offset</code> <code>int</code> <p>Number of results to skip for pagination, default 0.</p> <code>0</code> <p>Yields:</p> Type Description <code>Iterator[BaseTask]</code> <p>A stream of fully hydrated Task entities (PropertyTask, BatchTask, or GeneralTask).</p> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>@validate_call\ndef get_all(\n    self,\n    *,\n    text: str | None = None,\n    tags: list[str] | None = None,\n    task_id: list[TaskId] | None = None,\n    linked_task: list[TaskId] | None = None,\n    category: TaskCategory | None = None,\n    albert_id: list[str] | None = None,\n    data_template: list[str] | None = None,\n    assigned_to: list[str] | None = None,\n    location: list[str] | None = None,\n    priority: list[str] | None = None,\n    status: list[str] | None = None,\n    parameter_group: list[str] | None = None,\n    created_by: list[str] | None = None,\n    project_id: ProjectId | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    sort_by: str | None = None,\n    max_items: int | None = None,\n    offset: int = 0,\n) -&gt; Iterator[BaseTask]:\n    \"\"\"\n    Retrieve fully hydrated Task entities with optional filters.\n\n    This method returns complete entity data using `get_by_id`.\n    Use :meth:`search` for faster retrieval when you only need lightweight, partial (unhydrated) entities.\n\n    Parameters\n    ----------\n    text : str, optional\n        Text search across multiple task fields.\n    tags : list[str], optional\n        Filter by tags associated with tasks.\n    task_id : list[str], optional\n        Specific task IDs to search for.\n    linked_task : list[str], optional\n        Task IDs linked to the ones being searched.\n    category : TaskCategory, optional\n        Task category filter (e.g., Experiment, Analysis).\n    albert_id : list[str], optional\n        Albert-specific task identifiers.\n    data_template : list[str], optional\n        Data template names associated with tasks.\n    assigned_to : list[str], optional\n        User names assigned to the tasks.\n    location : list[str], optional\n        Locations where tasks are carried out.\n    priority : list[str], optional\n        Priority levels for filtering tasks.\n    status : list[str], optional\n        Task status values (e.g., Open, Done).\n    parameter_group : list[str], optional\n        Parameter Group names associated with tasks.\n    created_by : list[str], optional\n        User names who created the tasks.\n    project_id : str, optional\n        ID of the parent project for filtering tasks.\n    order_by : OrderBy, optional\n        The order in which to return results (asc or desc), default DESCENDING.\n    sort_by : str, optional\n        Attribute to sort tasks by (e.g., createdAt, name).\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n    offset : int, optional\n        Number of results to skip for pagination, default 0.\n\n    Yields\n    ------\n    Iterator[BaseTask]\n        A stream of fully hydrated Task entities (PropertyTask, BatchTask, or GeneralTask).\n    \"\"\"\n    for task in self.search(\n        text=text,\n        tags=tags,\n        task_id=task_id,\n        linked_task=linked_task,\n        category=category,\n        albert_id=albert_id,\n        data_template=data_template,\n        assigned_to=assigned_to,\n        location=location,\n        priority=priority,\n        status=status,\n        parameter_group=parameter_group,\n        created_by=created_by,\n        project_id=project_id,\n        order_by=order_by,\n        sort_by=sort_by,\n        max_items=max_items,\n        offset=offset,\n    ):\n        task_id = getattr(task, \"id\", None)\n        if not task_id:\n            continue\n\n        try:\n            yield self.get_by_id(id=task_id)\n        except (AlbertHTTPError, RetryError) as e:\n            logger.warning(f\"Error fetching task '{task_id}': {e}\")\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.update","title":"update","text":"<pre><code>update(*, task: BaseTask) -&gt; BaseTask\n</code></pre> <p>Update a task.</p> <p>Parameters:</p> Name Type Description Default <code>task</code> <code>BaseTask</code> <p>The updated Task object.</p> required <p>Returns:</p> Type Description <code>BaseTask</code> <p>The updated Task object as it exists in the Albert platform.</p> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>def update(self, *, task: BaseTask) -&gt; BaseTask:\n    \"\"\"Update a task.\n\n    Parameters\n    ----------\n    task : BaseTask\n        The updated Task object.\n\n    Returns\n    -------\n    BaseTask\n        The updated Task object as it exists in the Albert platform.\n    \"\"\"\n    existing = self.get_by_id(id=task.id)\n    patch_payload = self._generate_adv_patch_payload(updated=task, existing=existing)\n\n    if len(patch_payload.data) == 0:\n        logger.info(f\"Task {task.id} is already up to date\")\n        return task\n    path = f\"{self.base_path}/{task.id}\"\n\n    for datum in patch_payload.data:\n        patch_payload = TaskPatchPayload(data=[datum], id=task.id)\n        self.session.patch(\n            url=path,\n            json=[patch_payload.model_dump(mode=\"json\", by_alias=True, exclude_none=True)],\n        )\n\n    return self.get_by_id(id=task.id)\n</code></pre>"},{"location":"collections/tasks/#albert.collections.tasks.TaskCollection.get_history","title":"get_history","text":"<pre><code>get_history(\n    *,\n    id: TaskId,\n    order: OrderBy = DESCENDING,\n    limit: int = 1000,\n    entity: HistoryEntity | None = None,\n    blockId: str | None = None,\n    startKey: str | None = None,\n) -&gt; TaskHistory\n</code></pre> Source code in <code>src/albert/collections/tasks.py</code> <pre><code>def get_history(\n    self,\n    *,\n    id: TaskId,\n    order: OrderBy = OrderBy.DESCENDING,\n    limit: int = 1000,\n    entity: HistoryEntity | None = None,\n    blockId: str | None = None,\n    startKey: str | None = None,\n) -&gt; TaskHistory:\n    params = {\n        \"limit\": limit,\n        \"orderBy\": OrderBy(order).value if order else None,\n        \"entity\": entity,\n        \"blockId\": blockId,\n        \"startKey\": startKey,\n    }\n    url = f\"{self.base_path}/{id}/history\"\n    response = self.session.get(url, params=params)\n    return TaskHistory(**response.json())\n</code></pre>"},{"location":"collections/un_numbers/","title":"UN Numbers","text":""},{"location":"collections/un_numbers/#albert.collections.un_numbers.UnNumberCollection","title":"albert.collections.un_numbers.UnNumberCollection","text":"<pre><code>UnNumberCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>UnNumberCollection is a collection class for managing UnNumber entities in the Albert platform.</p> Note <p>Creating UN Numbers is not supported via the SDK, as UN Numbers are highly controlled by Albert.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <p>This method is not implemented as UN Numbers cannot be created through the SDK.</p> <code>get_by_id</code> <p>Retrieve a UN Number by its ID.</p> <code>get_by_name</code> <p>Retrieve a UN Number by its name.</p> <code>get_all</code> <p>Get all UN Numbers matching the provided criteria.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/un_numbers.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"Initializes the UnNumberCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{UnNumberCollection._api_version}/unnumbers\"\n</code></pre>"},{"location":"collections/un_numbers/#albert.collections.un_numbers.UnNumberCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/unnumbers'\n</code></pre>"},{"location":"collections/un_numbers/#albert.collections.un_numbers.UnNumberCollection.create","title":"create","text":"<pre><code>create() -&gt; None\n</code></pre> <p>This method is not implemented as UN Numbers cannot be created through the SDK.</p> Source code in <code>src/albert/collections/un_numbers.py</code> <pre><code>def create(self) -&gt; None:\n    \"\"\"\n    This method is not implemented as UN Numbers cannot be created through the SDK.\n    \"\"\"\n    raise NotImplementedError()\n</code></pre>"},{"location":"collections/un_numbers/#albert.collections.un_numbers.UnNumberCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: str) -&gt; UnNumber\n</code></pre> <p>Retrieve a UN Number by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the UN Number to retrieve.</p> required <p>Returns:</p> Type Description <code>UnNumber</code> <p>The corresponding UN Number</p> Source code in <code>src/albert/collections/un_numbers.py</code> <pre><code>def get_by_id(self, *, id: str) -&gt; UnNumber:\n    \"\"\"Retrieve a UN Number by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the UN Number to retrieve.\n\n    Returns\n    -------\n    UnNumber\n        The corresponding UN Number\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    return UnNumber(**response.json())\n</code></pre>"},{"location":"collections/un_numbers/#albert.collections.un_numbers.UnNumberCollection.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(*, name: str) -&gt; UnNumber | None\n</code></pre> <p>Retrieve a UN Number by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the UN Number to retrieve</p> required <p>Returns:</p> Type Description <code>UnNumber | None</code> <p>The corresponding UN Number or None if not found</p> Source code in <code>src/albert/collections/un_numbers.py</code> <pre><code>def get_by_name(self, *, name: str) -&gt; UnNumber | None:\n    \"\"\"Retrieve a UN Number by its name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the UN Number to retrieve\n\n    Returns\n    -------\n    UnNumber | None\n        The corresponding UN Number or None if not found\n    \"\"\"\n    found = self.get_all(exact_match=True, name=name)\n    return next(found, None)\n</code></pre>"},{"location":"collections/un_numbers/#albert.collections.un_numbers.UnNumberCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    name: str | None = None,\n    exact_match: bool = False,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[UnNumber]\n</code></pre> <p>Get all UN Numbers matching the provided criteria.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | None</code> <p>The name of the UN Number to search for, by default None.</p> <code>None</code> <code>exact_match</code> <code>bool</code> <p>Whether to return exact matches only, by default False.</p> <code>False</code> <code>start_key</code> <code>str | None</code> <p>The pagination key to continue fetching items from, by default None.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Yields:</p> Type Description <code>Iterator[UnNumber]</code> <p>The UN Numbers matching the search criteria.</p> Source code in <code>src/albert/collections/un_numbers.py</code> <pre><code>def get_all(\n    self,\n    *,\n    name: str | None = None,\n    exact_match: bool = False,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[UnNumber]:\n    \"\"\"Get all UN Numbers matching the provided criteria.\n\n    Parameters\n    ----------\n    name : str | None, optional\n        The name of the UN Number to search for, by default None.\n    exact_match : bool, optional\n        Whether to return exact matches only, by default False.\n    start_key : str | None, optional\n        The pagination key to continue fetching items from, by default None.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Yields\n    ------\n    Iterator[UnNumber]\n        The UN Numbers matching the search criteria.\n    \"\"\"\n    params = {\"startKey\": start_key}\n    if name:\n        params[\"name\"] = name\n        params[\"exactMatch\"] = exact_match\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [UnNumber(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/units/","title":"Units","text":""},{"location":"collections/units/#albert.collections.units.UnitCollection","title":"albert.collections.units.UnitCollection","text":"<pre><code>UnitCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>UnitCollection is a collection class for managing Unit entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <p>Creates a new unit entity.</p> <code>get_or_create</code> <p>Retrieves a Unit or creates it if it does not exist.</p> <code>get_by_id</code> <p>Retrieves a unit by its ID.</p> <code>get_by_ids</code> <p>Retrieves a set of units by their IDs</p> <code>update</code> <p>Updates a unit entity by its ID.</p> <code>delete</code> <p>Deletes a unit by its ID.</p> <code>get_all</code> <p>Get all unit entities with optional filters.</p> <code>get_by_name</code> <p>Retrieves a unit by its name.</p> <code>exists</code> <p>Checks if a unit exists by its name.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/units.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the UnitCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{UnitCollection._api_version}/units\"\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/units'\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.create","title":"create","text":"<pre><code>create(*, unit: Unit) -&gt; Unit\n</code></pre> <p>Creates a new unit entity.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>Unit</code> <p>The unit object to create.</p> required <p>Returns:</p> Type Description <code>Unit</code> <p>The created Unit object.</p> Source code in <code>src/albert/collections/units.py</code> <pre><code>def create(self, *, unit: Unit) -&gt; Unit:\n    \"\"\"\n    Creates a new unit entity.\n\n    Parameters\n    ----------\n    unit : Unit\n        The unit object to create.\n\n    Returns\n    -------\n    Unit\n        The created Unit object.\n    \"\"\"\n    response = self.session.post(\n        self.base_path, json=unit.model_dump(by_alias=True, exclude_unset=True, mode=\"json\")\n    )\n    unit = Unit(**response.json())\n    return unit\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.get_or_create","title":"get_or_create","text":"<pre><code>get_or_create(*, unit: Unit) -&gt; Unit\n</code></pre> <p>Retrieves a Unit or creates it if it does not exist.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>Unit</code> <p>The unit object to find or create.</p> required <p>Returns:</p> Type Description <code>Unit</code> <p>The existing or newly created Unit object.</p> Source code in <code>src/albert/collections/units.py</code> <pre><code>def get_or_create(self, *, unit: Unit) -&gt; Unit:\n    \"\"\"\n    Retrieves a Unit or creates it if it does not exist.\n\n    Parameters\n    ----------\n    unit : Unit\n        The unit object to find or create.\n\n    Returns\n    -------\n    Unit\n        The existing or newly created Unit object.\n    \"\"\"\n    match = self.get_by_name(name=unit.name, exact_match=True)\n    if match:\n        logging.warning(\n            f\"Unit with the name {unit.name} already exists. Returning the existing unit.\"\n        )\n        return match\n    return self.create(unit=unit)\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: UnitId) -&gt; Unit\n</code></pre> <p>Retrieves a unit by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the unit to retrieve.</p> required <p>Returns:</p> Type Description <code>Unit</code> <p>The Unit object if found.</p> Source code in <code>src/albert/collections/units.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: UnitId) -&gt; Unit:\n    \"\"\"\n    Retrieves a unit by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the unit to retrieve.\n\n    Returns\n    -------\n    Unit\n        The Unit object if found.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    this_unit = Unit(**response.json())\n    return this_unit\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.get_by_ids","title":"get_by_ids","text":"<pre><code>get_by_ids(*, ids: list[UnitId]) -&gt; list[Unit]\n</code></pre> <p>Retrieves a set of units by their IDs</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[str]</code> <p>The IDs of the units to retrieve.</p> required <p>Returns:</p> Type Description <code>list[Unit]</code> <p>The Unit entities</p> Source code in <code>src/albert/collections/units.py</code> <pre><code>@validate_call\ndef get_by_ids(self, *, ids: list[UnitId]) -&gt; list[Unit]:\n    \"\"\"\n    Retrieves a set of units by their IDs\n\n    Parameters\n    ----------\n    ids : list[str]\n        The IDs of the units to retrieve.\n\n    Returns\n    -------\n    list[Unit]\n        The Unit entities\n    \"\"\"\n    url = f\"{self.base_path}/ids\"\n    batches = [ids[i : i + 500] for i in range(0, len(ids), 500)]\n    return [\n        Unit(**item)\n        for batch in batches\n        for item in self.session.get(url, params={\"id\": batch}).json()[\"Items\"]\n    ]\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.update","title":"update","text":"<pre><code>update(*, unit: Unit) -&gt; Unit\n</code></pre> <p>Updates a unit entity by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>unit</code> <code>Unit</code> <p>The updated Unit object.</p> required <p>Returns:</p> Type Description <code>Unit</code> <p>The updated Unit</p> Source code in <code>src/albert/collections/units.py</code> <pre><code>def update(self, *, unit: Unit) -&gt; Unit:\n    \"\"\"\n    Updates a unit entity by its ID.\n\n    Parameters\n    ----------\n    unit : Unit\n        The updated Unit object.\n\n    Returns\n    -------\n    Unit\n        The updated Unit\n    \"\"\"\n    unit_id = unit.id\n    original_unit = self.get_by_id(id=unit_id)\n    payload = self._generate_patch_payload(existing=original_unit, updated=unit)\n    url = f\"{self.base_path}/{unit_id}\"\n    self.session.patch(url, json=payload.model_dump(mode=\"json\", by_alias=True))\n    unit = self.get_by_id(id=unit_id)\n    return unit\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.delete","title":"delete","text":"<pre><code>delete(*, id: UnitId) -&gt; None\n</code></pre> <p>Deletes a unit by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the unit to delete.</p> required <p>Returns:</p> Type Description <code>None</code> Source code in <code>src/albert/collections/units.py</code> <pre><code>@validate_call\ndef delete(self, *, id: UnitId) -&gt; None:\n    \"\"\"\n    Deletes a unit by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the unit to delete.\n\n    Returns\n    -------\n    None\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    self.session.delete(url)\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    name: str | list[str] | None = None,\n    category: UnitCategory | None = None,\n    order_by: OrderBy = DESCENDING,\n    exact_match: bool = False,\n    verified: bool | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Unit]\n</code></pre> <p>Get all unit entities with optional filters.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str | list[str] | None</code> <p>The name(s) of the unit(s) to filter by.</p> <code>None</code> <code>category</code> <code>UnitCategory | None</code> <p>The category of the unit to filter by.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>The order by which to sort the results, by default OrderBy.DESCENDING.</p> <code>DESCENDING</code> <code>exact_match</code> <code>bool</code> <p>Whether to match the name exactly, by default False.</p> <code>False</code> <code>verified</code> <code>bool | None</code> <p>Whether the unit is verified, by default None.</p> <code>None</code> <code>start_key</code> <code>str | None</code> <p>The primary key of the first item to evaluate for pagination.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[Unit]</code> <p>An iterator of Unit entities.</p> Source code in <code>src/albert/collections/units.py</code> <pre><code>def get_all(\n    self,\n    *,\n    name: str | list[str] | None = None,\n    category: UnitCategory | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    exact_match: bool = False,\n    verified: bool | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[Unit]:\n    \"\"\"\n    Get all unit entities with optional filters.\n\n    Parameters\n    ----------\n    name : str | list[str] | None, optional\n        The name(s) of the unit(s) to filter by.\n    category : UnitCategory | None, optional\n        The category of the unit to filter by.\n    order_by : OrderBy, optional\n        The order by which to sort the results, by default OrderBy.DESCENDING.\n    exact_match : bool, optional\n        Whether to match the name exactly, by default False.\n    verified : bool | None, optional\n        Whether the unit is verified, by default None.\n    start_key : str | None, optional\n        The primary key of the first item to evaluate for pagination.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[Unit]\n        An iterator of Unit entities.\n    \"\"\"\n    params = {\n        \"orderBy\": order_by.value,\n        \"name\": [name] if isinstance(name, str) else name,\n        \"exactMatch\": exact_match,\n        \"verified\": verified,\n        \"category\": category.value if isinstance(category, UnitCategory) else category,\n        \"startKey\": start_key,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [Unit(**item) for item in items],\n    )\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.get_by_name","title":"get_by_name","text":"<pre><code>get_by_name(\n    *, name: str, exact_match: bool = False\n) -&gt; Unit | None\n</code></pre> <p>Retrieves a unit by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the unit to retrieve.</p> required <code>exact_match</code> <code>bool</code> <p>Whether to match the name exactly, by default False.</p> <code>False</code> <p>Returns:</p> Type Description <code>Optional[Unit]</code> <p>The Unit object if found, None otherwise.</p> Source code in <code>src/albert/collections/units.py</code> <pre><code>def get_by_name(self, *, name: str, exact_match: bool = False) -&gt; Unit | None:\n    \"\"\"\n    Retrieves a unit by its name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the unit to retrieve.\n    exact_match : bool, optional\n        Whether to match the name exactly, by default False.\n\n    Returns\n    -------\n    Optional[Unit]\n        The Unit object if found, None otherwise.\n    \"\"\"\n    found = self.get_all(name=name, exact_match=exact_match, max_items=1)\n    return next(found, None)\n</code></pre>"},{"location":"collections/units/#albert.collections.units.UnitCollection.exists","title":"exists","text":"<pre><code>exists(*, name: str, exact_match: bool = True) -&gt; bool\n</code></pre> <p>Checks if a unit exists by its name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the unit to check.</p> required <code>exact_match</code> <code>bool</code> <p>Whether to match the name exactly, by default True.</p> <code>True</code> <p>Returns:</p> Type Description <code>bool</code> <p>True if the unit exists, False otherwise.</p> Source code in <code>src/albert/collections/units.py</code> <pre><code>def exists(self, *, name: str, exact_match: bool = True) -&gt; bool:\n    \"\"\"\n    Checks if a unit exists by its name.\n\n    Parameters\n    ----------\n    name : str\n        The name of the unit to check.\n    exact_match : bool, optional\n        Whether to match the name exactly, by default True.\n\n    Returns\n    -------\n    bool\n        True if the unit exists, False otherwise.\n    \"\"\"\n    return self.get_by_name(name=name, exact_match=exact_match) is not None\n</code></pre>"},{"location":"collections/users/","title":"Users","text":""},{"location":"collections/users/#albert.collections.users.UserCollection","title":"albert.collections.users.UserCollection","text":"<pre><code>UserCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>UserCollection is a collection class for managing User entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>get_current_user</code> <p>Retrieves the current authenticated user.</p> <code>get_by_id</code> <p>Retrieves a User by its ID.</p> <code>search</code> <p>Searches for users matching the provided filters.</p> <code>get_all</code> <p>Retrieve fully hydrated User entities with optional filters.</p> <code>create</code> <p>Create a new User</p> <code>update</code> <p>Update a User entity.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/users.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the UserCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{UserCollection._api_version}/users\"\n</code></pre>"},{"location":"collections/users/#albert.collections.users.UserCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/users'\n</code></pre>"},{"location":"collections/users/#albert.collections.users.UserCollection.get_current_user","title":"get_current_user","text":"<pre><code>get_current_user() -&gt; User\n</code></pre> <p>Retrieves the current authenticated user.</p> <p>Returns:</p> Type Description <code>User</code> <p>The current User object.</p> Source code in <code>src/albert/collections/users.py</code> <pre><code>def get_current_user(self) -&gt; User:\n    \"\"\"\n    Retrieves the current authenticated user.\n\n    Returns\n    -------\n    User\n        The current User object.\n    \"\"\"\n    claims = jwt.decode(self.session._access_token, options={\"verify_signature\": False})\n    return self.get_by_id(id=claims[\"id\"])\n</code></pre>"},{"location":"collections/users/#albert.collections.users.UserCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: UserId) -&gt; User\n</code></pre> <p>Retrieves a User by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the user to retrieve.</p> required <p>Returns:</p> Type Description <code>User</code> <p>The User object.</p> Source code in <code>src/albert/collections/users.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: UserId) -&gt; User:\n    \"\"\"\n    Retrieves a User by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the user to retrieve.\n\n    Returns\n    -------\n    User\n        The User object.\n    \"\"\"\n    url = f\"{self.base_path}/{id}\"\n    response = self.session.get(url)\n    return User(**response.json())\n</code></pre>"},{"location":"collections/users/#albert.collections.users.UserCollection.search","title":"search","text":"<pre><code>search(\n    *,\n    text: str | None = None,\n    sort_by: str | None = None,\n    order_by: OrderBy = DESCENDING,\n    roles: list[str] | None = None,\n    teams: list[str] | None = None,\n    locations: list[str] | None = None,\n    status: list[Status] | None = None,\n    user_id: list[UserId] | None = None,\n    subscription: list[str] | None = None,\n    search_fields: list[str] | None = None,\n    facet_text: str | None = None,\n    facet_field: str | None = None,\n    contains_field: list[str] | None = None,\n    contains_text: list[str] | None = None,\n    mentions: bool | None = None,\n    offset: int = 0,\n    max_items: int | None = None,\n) -&gt; Iterator[UserSearchItem]\n</code></pre> <p>Searches for users matching the provided filters.</p> <p>\u26a0\ufe0f This method returns partial (unhydrated) search results for performance. To retrieve fully detailed entities, use :meth:<code>get_all</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>str</code> <p>Free text search across multiple user fields.</p> <code>None</code> <code>sort_by</code> <code>str</code> <p>Field to sort results by.</p> <code>None</code> <code>order_by</code> <code>OrderBy</code> <p>Sort order, ascending or descending.</p> <code>DESCENDING</code> <code>roles</code> <code>list[str]</code> <p>Filter by assigned roles.</p> <code>None</code> <code>teams</code> <code>list[str]</code> <p>Filter by teams.</p> <code>None</code> <code>locations</code> <code>list[str]</code> <p>Filter by associated location IDs.</p> <code>None</code> <code>status</code> <code>list[Status]</code> <p>Filter by user status.</p> <code>None</code> <code>user_id</code> <code>list[str]</code> <p>Filter by specific user IDs.</p> <code>None</code> <code>subscription</code> <code>list[str]</code> <p>Filter by subscription type.</p> <code>None</code> <code>search_fields</code> <code>list[str]</code> <p>Fields to apply text search across.</p> <code>None</code> <code>facet_text</code> <code>str</code> <p>Text to search within facets.</p> <code>None</code> <code>facet_field</code> <code>str</code> <p>Facet field to apply facet_text on.</p> <code>None</code> <code>contains_field</code> <code>list[str]</code> <p>Field names for \"contains\" filter logic.</p> <code>None</code> <code>contains_text</code> <code>list[str]</code> <p>Text snippets to search in \"contains\" fields.</p> <code>None</code> <code>mentions</code> <code>bool</code> <p>Filter by users who are mentioned.</p> <code>None</code> <code>offset</code> <code>int</code> <p>Number of results to skip for pagination. Default is 0.</p> <code>0</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[UserSearchItem]</code> <p>An iterator of partial user results matching the criteria.</p> Source code in <code>src/albert/collections/users.py</code> <pre><code>@validate_call\ndef search(\n    self,\n    *,\n    text: str | None = None,\n    sort_by: str | None = None,\n    order_by: OrderBy = OrderBy.DESCENDING,\n    roles: list[str] | None = None,\n    teams: list[str] | None = None,\n    locations: list[str] | None = None,\n    status: list[Status] | None = None,\n    user_id: list[UserId] | None = None,\n    subscription: list[str] | None = None,\n    search_fields: list[str] | None = None,\n    facet_text: str | None = None,\n    facet_field: str | None = None,\n    contains_field: list[str] | None = None,\n    contains_text: list[str] | None = None,\n    mentions: bool | None = None,\n    offset: int = 0,\n    max_items: int | None = None,\n) -&gt; Iterator[UserSearchItem]:\n    \"\"\"\n    Searches for users matching the provided filters.\n\n    \u26a0\ufe0f This method returns partial (unhydrated) search results for performance.\n    To retrieve fully detailed entities, use :meth:`get_all` instead.\n\n    Parameters\n    ----------\n    text : str, optional\n        Free text search across multiple user fields.\n    sort_by : str, optional\n        Field to sort results by.\n    order_by : OrderBy, optional\n        Sort order, ascending or descending.\n    roles : list[str], optional\n        Filter by assigned roles.\n    teams : list[str], optional\n        Filter by teams.\n    locations : list[str], optional\n        Filter by associated location IDs.\n    status : list[Status], optional\n        Filter by user status.\n    user_id : list[str], optional\n        Filter by specific user IDs.\n    subscription : list[str], optional\n        Filter by subscription type.\n    search_fields : list[str], optional\n        Fields to apply text search across.\n    facet_text : str, optional\n        Text to search within facets.\n    facet_field : str, optional\n        Facet field to apply facet_text on.\n    contains_field : list[str], optional\n        Field names for \"contains\" filter logic.\n    contains_text : list[str], optional\n        Text snippets to search in \"contains\" fields.\n    mentions : bool, optional\n        Filter by users who are mentioned.\n    offset : int, optional\n        Number of results to skip for pagination. Default is 0.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[UserSearchItem]\n        An iterator of partial user results matching the criteria.\n    \"\"\"\n    params = {\n        \"text\": text,\n        \"sortBy\": sort_by,\n        \"order\": order_by.value,\n        \"roles\": roles,\n        \"teams\": teams,\n        \"locations\": locations,\n        \"status\": status,\n        \"userId\": user_id,\n        \"subscription\": subscription,\n        \"searchFields\": search_fields,\n        \"facetText\": facet_text,\n        \"facetField\": facet_field,\n        \"containsField\": contains_field,\n        \"containsText\": contains_text,\n        \"mentions\": mentions,\n        \"offset\": offset,\n    }\n\n    return AlbertPaginator(\n        mode=PaginationMode.OFFSET,\n        path=f\"{self.base_path}/search\",\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=lambda items: [\n            UserSearchItem(**item)._bind_collection(self) for item in items\n        ],\n    )\n</code></pre>"},{"location":"collections/users/#albert.collections.users.UserCollection.get_all","title":"get_all","text":"<pre><code>get_all(\n    *,\n    status: Status | None = None,\n    type: UserFilterType | None = None,\n    id: list[UserId] | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[User]\n</code></pre> <p>Retrieve fully hydrated User entities with optional filters.</p> <p>This method uses <code>get_by_id</code> to hydrate the results for convenience. Use :meth:<code>search</code> for better performance.</p> <p>Parameters:</p> Name Type Description Default <code>status</code> <code>Status</code> <p>Filter by user status.</p> <code>None</code> <code>type</code> <code>UserFilterType</code> <p>Attribute name to filter by (e.g., 'role').</p> <code>None</code> <code>id</code> <code>list[str]</code> <p>Values of the attribute to filter on.</p> <code>None</code> <code>start_key</code> <code>str</code> <p>The starting point for the next set of results.</p> <code>None</code> <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Returns:</p> Type Description <code>Iterator[User]</code> <p>User entities.</p> Source code in <code>src/albert/collections/users.py</code> <pre><code>@validate_call\ndef get_all(\n    self,\n    *,\n    status: Status | None = None,\n    type: UserFilterType | None = None,\n    id: list[UserId] | None = None,\n    start_key: str | None = None,\n    max_items: int | None = None,\n) -&gt; Iterator[User]:\n    \"\"\"\n    Retrieve fully hydrated User entities with optional filters.\n\n    This method uses `get_by_id` to hydrate the results for convenience.\n    Use :meth:`search` for better performance.\n\n    Parameters\n    ----------\n    status : Status, optional\n        Filter by user status.\n    type : UserFilterType, optional\n        Attribute name to filter by (e.g., 'role').\n    id : list[str], optional\n        Values of the attribute to filter on.\n    start_key : str, optional\n        The starting point for the next set of results.\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Returns\n    -------\n    Iterator[User]\n        User entities.\n    \"\"\"\n    params = {\n        \"status\": status,\n        \"type\": type.value if type else None,\n        \"id\": id,\n        \"startKey\": start_key,\n    }\n\n    def deserialize(items: list[dict]) -&gt; Iterator[User]:\n        for item in items:\n            user_id = item.get(\"albertId\")\n            if user_id:\n                try:\n                    yield self.get_by_id(id=user_id)\n                except AlbertHTTPError as e:\n                    logger.warning(f\"Error fetching user '{user_id}': {e}\")\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        session=self.session,\n        params=params,\n        max_items=max_items,\n        deserialize=deserialize,\n    )\n</code></pre>"},{"location":"collections/users/#albert.collections.users.UserCollection.create","title":"create","text":"<pre><code>create(*, user: User) -&gt; User\n</code></pre> <p>Create a new User</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>The user to create</p> required <p>Returns:</p> Type Description <code>User</code> <p>The created User</p> Source code in <code>src/albert/collections/users.py</code> <pre><code>def create(self, *, user: User) -&gt; User:  # pragma: no cover\n    \"\"\"Create a new User\n\n    Parameters\n    ----------\n    user : User\n        The user to create\n\n    Returns\n    -------\n    User\n        The created User\n    \"\"\"\n\n    response = self.session.post(\n        self.base_path,\n        json=user.model_dump(by_alias=True, exclude_none=True, mode=\"json\"),\n    )\n    return User(**response.json())\n</code></pre>"},{"location":"collections/users/#albert.collections.users.UserCollection.update","title":"update","text":"<pre><code>update(*, user: User) -&gt; User\n</code></pre> <p>Update a User entity.</p> <p>Parameters:</p> Name Type Description Default <code>user</code> <code>User</code> <p>The updated User entity.</p> required <p>Returns:</p> Type Description <code>User</code> <p>The updated User entity as returned by the server.</p> Source code in <code>src/albert/collections/users.py</code> <pre><code>def update(self, *, user: User) -&gt; User:\n    \"\"\"Update a User entity.\n\n    Parameters\n    ----------\n    user : User\n        The updated User entity.\n\n    Returns\n    -------\n    User\n        The updated User entity as returned by the server.\n    \"\"\"\n    # Fetch the current object state from the server or database\n    current_object = self.get_by_id(id=user.id)\n\n    # Generate the PATCH payload\n    payload = self._generate_patch_payload(existing=current_object, updated=user)\n\n    url = f\"{self.base_path}/{user.id}\"\n    self.session.patch(url, json=payload.model_dump(mode=\"json\", by_alias=True))\n\n    updated_user = self.get_by_id(id=user.id)\n    return updated_user\n</code></pre>"},{"location":"collections/workflows/","title":"Workflows","text":""},{"location":"collections/workflows/#albert.collections.workflows.WorkflowCollection","title":"albert.collections.workflows.WorkflowCollection","text":"<pre><code>WorkflowCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>WorkflowCollection is a collection class for managing Workflow entities in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>session</code> <code>AlbertSession</code> <p>The Albert session instance.</p> required <p>Methods:</p> Name Description <code>create</code> <p>Create or return matching workflows for the provided list of workflows.</p> <code>get_by_id</code> <p>Retrieve a Workflow by its ID.</p> <code>get_by_ids</code> <p>Returns a list of Workflow entities by their IDs.</p> <code>get_all</code> <p>Get all workflows. Unlikely to be used in production.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/workflows.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    \"\"\"\n    Initializes the WorkflowCollection with the provided session.\n\n    Parameters\n    ----------\n    session : AlbertSession\n        The Albert session instance.\n    \"\"\"\n    super().__init__(session=session)\n    self.base_path = f\"/api/{WorkflowCollection._api_version}/workflows\"\n</code></pre>"},{"location":"collections/workflows/#albert.collections.workflows.WorkflowCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/workflows'\n</code></pre>"},{"location":"collections/workflows/#albert.collections.workflows.WorkflowCollection.create","title":"create","text":"<pre><code>create(*, workflows: list[Workflow]) -&gt; list[Workflow]\n</code></pre> <p>Create or return matching workflows for the provided list of workflows. This endpoint automatically tries to find an existing workflow with the same parameter setpoints, and will either return the existing workflow or create a new one.</p> <p>Parameters:</p> Name Type Description Default <code>workflows</code> <code>list[Workflow]</code> <p>A list of Workflow entities to find or create.</p> required <p>Returns:</p> Type Description <code>list[Workflow]</code> <p>A list of created or found Workflow entities.</p> Source code in <code>src/albert/collections/workflows.py</code> <pre><code>def create(self, *, workflows: list[Workflow]) -&gt; list[Workflow]:\n    \"\"\"Create or return matching workflows for the provided list of workflows.\n    This endpoint automatically tries to find an existing workflow with the same parameter setpoints, and will either return the existing workflow or create a new one.\n\n    Parameters\n    ----------\n    workflows : list[Workflow]\n        A list of Workflow entities to find or create.\n\n    Returns\n    -------\n    list[Workflow]\n        A list of created or found Workflow entities.\n    \"\"\"\n    if isinstance(workflows, Workflow):\n        # in case the user forgets this should be a list\n        workflows = [workflows]\n\n    # Hydrate any parameter groups provided only by ID with their parameters\n    for wf in workflows:\n        self._hydrate_parameter_groups(workflow=wf)\n\n    response = self.session.post(\n        url=f\"{self.base_path}/bulk\",\n        json=[\n            x.model_dump(\n                mode=\"json\",\n                by_alias=True,\n                exclude_none=True,\n                exclude={\"created\", \"updated\"},\n            )\n            for x in workflows\n        ],\n    )\n    return [Workflow(**x) for x in response.json()]\n</code></pre>"},{"location":"collections/workflows/#albert.collections.workflows.WorkflowCollection.get_by_id","title":"get_by_id","text":"<pre><code>get_by_id(*, id: WorkflowId) -&gt; Workflow\n</code></pre> <p>Retrieve a Workflow by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>str</code> <p>The ID of the Workflow to retrieve.</p> required <p>Returns:</p> Type Description <code>Workflow</code> <p>The Workflow object.</p> Source code in <code>src/albert/collections/workflows.py</code> <pre><code>@validate_call\ndef get_by_id(self, *, id: WorkflowId) -&gt; Workflow:\n    \"\"\"Retrieve a Workflow by its ID.\n\n    Parameters\n    ----------\n    id : str\n        The ID of the Workflow to retrieve.\n\n    Returns\n    -------\n    Workflow\n        The Workflow object.\n    \"\"\"\n    response = self.session.get(f\"{self.base_path}/{id}\")\n    return Workflow(**response.json())\n</code></pre>"},{"location":"collections/workflows/#albert.collections.workflows.WorkflowCollection.get_by_ids","title":"get_by_ids","text":"<pre><code>get_by_ids(*, ids: list[WorkflowId]) -&gt; list[Workflow]\n</code></pre> <p>Returns a list of Workflow entities by their IDs.</p> <p>Parameters:</p> Name Type Description Default <code>ids</code> <code>list[str]</code> <p>The list of Workflow IDs to retrieve.</p> required <p>Returns:</p> Type Description <code>list[Workflow]</code> <p>The list of Workflow entities matching the provided IDs.</p> Source code in <code>src/albert/collections/workflows.py</code> <pre><code>@validate_call\ndef get_by_ids(self, *, ids: list[WorkflowId]) -&gt; list[Workflow]:\n    \"\"\"Returns a list of Workflow entities by their IDs.\n\n    Parameters\n    ----------\n    ids : list[str]\n        The list of Workflow IDs to retrieve.\n\n    Returns\n    -------\n    list[Workflow]\n        The list of Workflow entities matching the provided IDs.\n    \"\"\"\n    url = f\"{self.base_path}/ids\"\n    batches = [ids[i : i + 100] for i in range(0, len(ids), 100)]\n    return [\n        Workflow(**item)\n        for batch in batches\n        for item in self.session.get(url, params={\"id\": batch}).json()[\"Items\"]\n    ]\n</code></pre>"},{"location":"collections/workflows/#albert.collections.workflows.WorkflowCollection.get_all","title":"get_all","text":"<pre><code>get_all(max_items: int | None = None) -&gt; Iterator[Workflow]\n</code></pre> <p>Get all workflows. Unlikely to be used in production.</p> <p>Parameters:</p> Name Type Description Default <code>max_items</code> <code>int</code> <p>Maximum number of items to return in total. If None, fetches all available items.</p> <code>None</code> <p>Yields:</p> Type Description <code>Iterator[Workflow]</code> <p>An iterator of Workflow entities.</p> Source code in <code>src/albert/collections/workflows.py</code> <pre><code>def get_all(\n    self,\n    max_items: int | None = None,\n) -&gt; Iterator[Workflow]:\n    \"\"\"\n    Get all workflows. Unlikely to be used in production.\n\n    Parameters\n    ----------\n    max_items : int, optional\n        Maximum number of items to return in total. If None, fetches all available items.\n\n    Yields\n    ------\n    Iterator[Workflow]\n        An iterator of Workflow entities.\n    \"\"\"\n\n    def deserialize(items: list[dict]) -&gt; list[Workflow]:\n        return self.get_by_ids(ids=[x[\"albertId\"] for x in items])\n\n    return AlbertPaginator(\n        mode=PaginationMode.KEY,\n        path=self.base_path,\n        params={},\n        session=self.session,\n        deserialize=deserialize,\n        max_items=max_items,\n    )\n</code></pre>"},{"location":"collections/worksheets/","title":"Worksheets","text":""},{"location":"collections/worksheets/#albert.collections.worksheets.WorksheetCollection","title":"albert.collections.worksheets.WorksheetCollection","text":"<pre><code>WorksheetCollection(*, session: AlbertSession)\n</code></pre> <p>               Bases: <code>BaseCollection</code></p> <p>WorksheetCollection is a collection class for managing Worksheet entities in the Albert platform.</p> <p>Methods:</p> Name Description <code>get_by_project_id</code> <p>Retrieve a worksheet by its project ID. Projects and Worksheets are 1:1 in the Albert platform.</p> <code>setup_worksheet</code> <p>Setup a new worksheet for a project.</p> <code>setup_new_sheet_from_template</code> <p>Create a new sheet in the Worksheet related to the specified Project from a template.</p> <code>add_sheet</code> <p>Create a new blank sheet in the Worksheet with the specified name.</p> <p>Attributes:</p> Name Type Description <code>base_path</code> Source code in <code>src/albert/collections/worksheets.py</code> <pre><code>def __init__(self, *, session: AlbertSession):\n    super().__init__(session=session)\n    self.base_path = f\"/api/{WorksheetCollection._api_version}/worksheet\"\n</code></pre>"},{"location":"collections/worksheets/#albert.collections.worksheets.WorksheetCollection.base_path","title":"base_path","text":"<pre><code>base_path = f'/api/{_api_version}/worksheet'\n</code></pre>"},{"location":"collections/worksheets/#albert.collections.worksheets.WorksheetCollection.get_by_project_id","title":"get_by_project_id","text":"<pre><code>get_by_project_id(*, project_id: ProjectId) -&gt; Worksheet\n</code></pre> <p>Retrieve a worksheet by its project ID. Projects and Worksheets are 1:1 in the Albert platform.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The project ID to retrieve the worksheet for.</p> required <p>Returns:</p> Type Description <code>Worksheet</code> <p>The Worksheet object for that project.</p> Source code in <code>src/albert/collections/worksheets.py</code> <pre><code>@validate_call\ndef get_by_project_id(self, *, project_id: ProjectId) -&gt; Worksheet:\n    \"\"\"Retrieve a worksheet by its project ID. Projects and Worksheets are 1:1 in the Albert platform.\n\n    Parameters\n    ----------\n    project_id : str\n        The project ID to retrieve the worksheet for.\n\n    Returns\n    -------\n    Worksheet\n        The Worksheet object for that project.\n    \"\"\"\n\n    params = {\"type\": \"project\", \"id\": project_id}\n    response = self.session.get(self.base_path, params=params)\n\n    response_json = response.json()\n\n    # Sheets are themselves collections, and therefore need access to the session\n    response_json = self._add_session_to_sheets(response_json)\n    return Worksheet(**response_json)\n</code></pre>"},{"location":"collections/worksheets/#albert.collections.worksheets.WorksheetCollection.setup_worksheet","title":"setup_worksheet","text":"<pre><code>setup_worksheet(\n    *, project_id: ProjectId, add_sheet=False\n) -&gt; Worksheet\n</code></pre> <p>Setup a new worksheet for a project.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The project ID to setup the worksheet for.</p> required <code>add_sheet</code> <code>bool</code> <p>Whether to add a blank sheet to the worksheet, by default False</p> <code>False</code> <p>Returns:</p> Type Description <code>Worksheet</code> <p>The Worksheet object for the project.</p> Source code in <code>src/albert/collections/worksheets.py</code> <pre><code>def setup_worksheet(self, *, project_id: ProjectId, add_sheet=False) -&gt; Worksheet:\n    \"\"\"Setup a new worksheet for a project.\n\n    Parameters\n    ----------\n    project_id : str\n        The project ID to setup the worksheet for.\n    add_sheet : bool, optional\n        Whether to add a blank sheet to the worksheet, by default False\n\n    Returns\n    -------\n    Worksheet\n        The Worksheet object for the project.\n    \"\"\"\n\n    params = {\"sheets\": str(add_sheet).lower()}\n    path = f\"{self.base_path}/{project_id}/setup\"\n    self.session.post(path, json=params)\n    return self.get_by_project_id(project_id=project_id)\n</code></pre>"},{"location":"collections/worksheets/#albert.collections.worksheets.WorksheetCollection.setup_new_sheet_from_template","title":"setup_new_sheet_from_template","text":"<pre><code>setup_new_sheet_from_template(\n    *,\n    project_id: ProjectId,\n    sheet_template_id: str,\n    sheet_name: str,\n) -&gt; Worksheet\n</code></pre> <p>Create a new sheet in the Worksheet related to the specified Project from a template.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>description</p> required <code>sheet_template_id</code> <code>str</code> <p>description</p> required <code>sheet_name</code> <code>str</code> <p>description</p> required <p>Returns:</p> Type Description <code>Worksheet</code> <p>The Worksheet object for the project.</p> Source code in <code>src/albert/collections/worksheets.py</code> <pre><code>def setup_new_sheet_from_template(\n    self, *, project_id: ProjectId, sheet_template_id: str, sheet_name: str\n) -&gt; Worksheet:\n    \"\"\"Create a new sheet in the Worksheet related to the specified Project from a template.\n\n    Parameters\n    ----------\n    project_id : str\n        _description_\n    sheet_template_id : str\n        _description_\n    sheet_name : str\n        _description_\n\n    Returns\n    -------\n    Worksheet\n        The Worksheet object for the project.\n    \"\"\"\n    payload = {\"name\": sheet_name}\n    params = {\"templateId\": sheet_template_id}\n    path = f\"{self.base_path}/project/{project_id}/sheets\"\n    self.session.post(path, json=payload, params=params)\n    return self.get_by_project_id(project_id=project_id)\n</code></pre>"},{"location":"collections/worksheets/#albert.collections.worksheets.WorksheetCollection.add_sheet","title":"add_sheet","text":"<pre><code>add_sheet(\n    *, project_id: ProjectId, sheet_name: str\n) -&gt; Worksheet\n</code></pre> <p>Create a new blank sheet in the Worksheet with the specified name.</p> <p>Parameters:</p> Name Type Description Default <code>project_id</code> <code>str</code> <p>The project ID for the Worksheet to add the sheet to.</p> required <code>sheet_name</code> <code>str</code> <p>The name of the new sheet.</p> required <p>Returns:</p> Type Description <code>Worksheet</code> <p>The Worksheet object for the project.</p> Source code in <code>src/albert/collections/worksheets.py</code> <pre><code>def add_sheet(self, *, project_id: ProjectId, sheet_name: str) -&gt; Worksheet:\n    \"\"\"Create a new blank sheet in the Worksheet with the specified name.\n\n    Parameters\n    ----------\n    project_id : str\n        The project ID for the Worksheet to add the sheet to.\n    sheet_name : str\n        The name of the new sheet.\n\n    Returns\n    -------\n    Worksheet\n        The Worksheet object for the project.\n    \"\"\"\n    payload = {\"name\": sheet_name}\n    url = f\"{self.base_path}/project/{project_id}/sheets\"\n    self.session.put(url=url, json=payload)\n    return self.get_by_project_id(project_id=project_id)\n</code></pre>"},{"location":"resources/activities/","title":"Activities","text":""},{"location":"resources/activities/#albert.resources.activities","title":"albert.resources.activities","text":""},{"location":"resources/activities/#albert.resources.activities.ActivityOperationId","title":"ActivityOperationId","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>POST_SDS</code> <code>POST_LABEL</code>"},{"location":"resources/activities/#albert.resources.activities.ActivityOperationId.POST_SDS","title":"POST_SDS","text":"<pre><code>POST_SDS = 'post.sds'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.ActivityOperationId.POST_LABEL","title":"POST_LABEL","text":"<pre><code>POST_LABEL = 'post.label'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.ActivityAction","title":"ActivityAction","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>READ</code> <code>WRITE</code>"},{"location":"resources/activities/#albert.resources.activities.ActivityAction.READ","title":"READ","text":"<pre><code>READ = 'read'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.ActivityAction.WRITE","title":"WRITE","text":"<pre><code>WRITE = 'write'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.ActivityType","title":"ActivityType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>ENTITY_ID</code> <code>USER_ID</code> <code>PARENT_ID</code> <code>UUID</code> <code>DATE</code> <code>DATE_RANGE</code>"},{"location":"resources/activities/#albert.resources.activities.ActivityType.ENTITY_ID","title":"ENTITY_ID","text":"<pre><code>ENTITY_ID = 'entityId'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.ActivityType.USER_ID","title":"USER_ID","text":"<pre><code>USER_ID = 'userId'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.ActivityType.PARENT_ID","title":"PARENT_ID","text":"<pre><code>PARENT_ID = 'parentId'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.ActivityType.UUID","title":"UUID","text":"<pre><code>UUID = 'uuid'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.ActivityType.DATE","title":"DATE","text":"<pre><code>DATE = 'date'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.ActivityType.DATE_RANGE","title":"DATE_RANGE","text":"<pre><code>DATE_RANGE = 'dateRange'\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity","title":"Activity","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str | None</code> <code>activity_id</code> <code>str | None</code> <code>action</code> <code>str | None</code> <code>operation_id</code> <code>str | None</code> <code>data</code> <code>dict | None</code> <code>env</code> <code>str | None</code> <code>name</code> <code>str | None</code> <code>module</code> <code>str | None</code> <code>sub_module</code> <code>str | None</code> <code>uri</code> <code>str | None</code> <code>uuid</code> <code>str | None</code> <code>expires_at</code> <code>float | None</code> <code>region</code> <code>str | None</code>"},{"location":"resources/activities/#albert.resources.activities.Activity.id","title":"id","text":"<pre><code>id: str | None = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.activity_id","title":"activity_id","text":"<pre><code>activity_id: str | None = Field(\n    default=None, alias=\"activityId\"\n)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.action","title":"action","text":"<pre><code>action: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.operation_id","title":"operation_id","text":"<pre><code>operation_id: str | None = Field(\n    default=None, alias=\"operationId\"\n)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.data","title":"data","text":"<pre><code>data: dict | None = Field(default=None)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.env","title":"env","text":"<pre><code>env: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.name","title":"name","text":"<pre><code>name: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.module","title":"module","text":"<pre><code>module: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.sub_module","title":"sub_module","text":"<pre><code>sub_module: str | None = Field(\n    default=None, alias=\"subModule\"\n)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.uri","title":"uri","text":"<pre><code>uri: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.uuid","title":"uuid","text":"<pre><code>uuid: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.expires_at","title":"expires_at","text":"<pre><code>expires_at: float | None = Field(\n    default=None, alias=\"expiresAt\"\n)\n</code></pre>"},{"location":"resources/activities/#albert.resources.activities.Activity.region","title":"region","text":"<pre><code>region: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/attachments/","title":"Attachments","text":""},{"location":"resources/attachments/#albert.resources.attachments","title":"albert.resources.attachments","text":""},{"location":"resources/attachments/#albert.resources.attachments.AttachmentCategory","title":"AttachmentCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>OTHER</code> <code>SDS</code> <code>LABEL</code> <code>SCRIPT</code>"},{"location":"resources/attachments/#albert.resources.attachments.AttachmentCategory.OTHER","title":"OTHER","text":"<pre><code>OTHER = 'Other'\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.AttachmentCategory.SDS","title":"SDS","text":"<pre><code>SDS = 'SDS'\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.AttachmentCategory.LABEL","title":"LABEL","text":"<pre><code>LABEL = 'Label'\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.AttachmentCategory.SCRIPT","title":"SCRIPT","text":"<pre><code>SCRIPT = 'Script'\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment","title":"Attachment","text":"<p>               Bases: <code>BaseResource</code></p> <p>Used for attching files to Notes on Tasks, Projects, Inventory, etc. Key should match File.name</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>AttachmentId | None</code> <code>parent_id</code> <code>str</code> <code>name</code> <code>str</code> <code>key</code> <code>str</code> <code>namespace</code> <code>str</code> <code>category</code> <code>AttachmentCategory | None</code> <code>revision_date</code> <code>date | None</code> <code>file_size</code> <code>int | None</code> <code>mime_type</code> <code>str | None</code> <code>signed_url</code> <code>str | None</code> <code>signed_url_v2</code> <code>str | None</code> <code>metadata</code> <code>dict[str, MetadataItem] | None</code>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.id","title":"id","text":"<pre><code>id: AttachmentId | None = Field(\n    default=None, alias=\"albertId\"\n)\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.parent_id","title":"parent_id","text":"<pre><code>parent_id: str = Field(..., alias='parentId')\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.key","title":"key","text":"<pre><code>key: str\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.namespace","title":"namespace","text":"<pre><code>namespace: str = Field(default='result', alias='nameSpace')\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.category","title":"category","text":"<pre><code>category: AttachmentCategory | None = None\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.revision_date","title":"revision_date","text":"<pre><code>revision_date: date | None = Field(\n    default=None, alias=\"revisionDate\"\n)\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.file_size","title":"file_size","text":"<pre><code>file_size: int | None = Field(\n    default=None,\n    alias=\"fileSize\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.mime_type","title":"mime_type","text":"<pre><code>mime_type: str | None = Field(\n    default=None,\n    alias=\"mimeType\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.signed_url","title":"signed_url","text":"<pre><code>signed_url: str | None = Field(\n    default=None,\n    alias=\"signedURL\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.signed_url_v2","title":"signed_url_v2","text":"<pre><code>signed_url_v2: str | None = Field(\n    default=None,\n    alias=\"signedURLV2\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/attachments/#albert.resources.attachments.Attachment.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] | None = Field(\n    default=None,\n    alias=\"Metadata\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/batch_data/","title":"Batch Data","text":""},{"location":"resources/batch_data/#albert.resources.batch_data","title":"albert.resources.batch_data","text":""},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchDatum","title":"BatchValuePatchDatum","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"attribute\": {\n      \"default\": \"lotId\",\n      \"title\": \"Attribute\",\n      \"type\": \"string\"\n    },\n    \"lotId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lotid\"\n    },\n    \"newValue\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Newvalue\"\n    },\n    \"oldValue\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Oldvalue\"\n    },\n    \"operation\": {\n      \"title\": \"Operation\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"operation\"\n  ],\n  \"title\": \"BatchValuePatchDatum\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>attribute</code>                 (<code>str</code>)             </li> <li> <code>lot_id</code>                 (<code>str | None</code>)             </li> <li> <code>new_value</code>                 (<code>str | None</code>)             </li> <li> <code>old_value</code>                 (<code>str | None</code>)             </li> <li> <code>operation</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchDatum.attribute","title":"attribute","text":"<pre><code>attribute: str = 'lotId'\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchDatum.lot_id","title":"lot_id","text":"<pre><code>lot_id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchDatum.new_value","title":"new_value","text":"<pre><code>new_value: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchDatum.old_value","title":"old_value","text":"<pre><code>old_value: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchDatum.operation","title":"operation","text":"<pre><code>operation: str\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValueId","title":"BatchValueId","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"colId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Colid\"\n    },\n    \"rowId\": {\n      \"title\": \"Rowid\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"rowId\"\n  ],\n  \"title\": \"BatchValueId\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>col_id</code>                 (<code>str | None</code>)             </li> <li> <code>row_id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValueId.col_id","title":"col_id","text":"<pre><code>col_id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValueId.row_id","title":"row_id","text":"<pre><code>row_id: str\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchPayload","title":"BatchValuePatchPayload","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BatchValueId\": {\n      \"properties\": {\n        \"colId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Colid\"\n        },\n        \"rowId\": {\n          \"title\": \"Rowid\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"rowId\"\n      ],\n      \"title\": \"BatchValueId\",\n      \"type\": \"object\"\n    },\n    \"BatchValuePatchDatum\": {\n      \"properties\": {\n        \"attribute\": {\n          \"default\": \"lotId\",\n          \"title\": \"Attribute\",\n          \"type\": \"string\"\n        },\n        \"lotId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lotid\"\n        },\n        \"newValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Newvalue\"\n        },\n        \"oldValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Oldvalue\"\n        },\n        \"operation\": {\n          \"title\": \"Operation\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"operation\"\n      ],\n      \"title\": \"BatchValuePatchDatum\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"Id\": {\n      \"$ref\": \"#/$defs/BatchValueId\"\n    },\n    \"data\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/BatchValuePatchDatum\"\n      },\n      \"title\": \"Data\",\n      \"type\": \"array\"\n    },\n    \"lotId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lotid\"\n    }\n  },\n  \"required\": [\n    \"Id\"\n  ],\n  \"title\": \"BatchValuePatchPayload\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>BatchValueId</code>)             </li> <li> <code>data</code>                 (<code>list[BatchValuePatchDatum]</code>)             </li> <li> <code>lot_id</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchPayload.id","title":"id","text":"<pre><code>id: BatchValueId\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchPayload.data","title":"data","text":"<pre><code>data: list[BatchValuePatchDatum]\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchValuePatchPayload.lot_id","title":"lot_id","text":"<pre><code>lot_id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataType","title":"BatchDataType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>TASK_ID</code>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataType.TASK_ID","title":"TASK_ID","text":"<pre><code>TASK_ID = 'taskId'\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataValue","title":"BatchDataValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"colId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Colid\"\n    },\n    \"type\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Type\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"isEditable\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Iseditable\"\n    },\n    \"unitCategory\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unitcategory\"\n    },\n    \"referenceValue\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Referencevalue\"\n    }\n  },\n  \"title\": \"BatchDataValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>col_id</code>                 (<code>str | None</code>)             </li> <li> <code>type</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> <li> <code>is_editable</code>                 (<code>bool | None</code>)             </li> <li> <code>unit_category</code>                 (<code>str | None</code>)             </li> <li> <code>reference_value</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataValue.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataValue.col_id","title":"col_id","text":"<pre><code>col_id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataValue.type","title":"type","text":"<pre><code>type: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataValue.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataValue.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataValue.is_editable","title":"is_editable","text":"<pre><code>is_editable: bool | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataValue.unit_category","title":"unit_category","text":"<pre><code>unit_category: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataValue.reference_value","title":"reference_value","text":"<pre><code>reference_value: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow","title":"BatchDataRow","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BatchDataRow\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Type\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"manufacturer\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Manufacturer\"\n        },\n        \"unitCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unitcategory\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Category\"\n        },\n        \"isFormula\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Isformula\"\n        },\n        \"isLotParent\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Islotparent\"\n        },\n        \"Values\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/BatchDataValue\"\n          },\n          \"title\": \"Values\",\n          \"type\": \"array\"\n        },\n        \"ChildRows\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/BatchDataRow\"\n          },\n          \"title\": \"Childrows\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"BatchDataRow\",\n      \"type\": \"object\"\n    },\n    \"BatchDataValue\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"colId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Colid\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Type\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"isEditable\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Iseditable\"\n        },\n        \"unitCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unitcategory\"\n        },\n        \"referenceValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Referencevalue\"\n        }\n      },\n      \"title\": \"BatchDataValue\",\n      \"type\": \"object\"\n    }\n  },\n  \"$ref\": \"#/$defs/BatchDataRow\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>row_id</code>                 (<code>str | None</code>)             </li> <li> <code>type</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>manufacturer</code>                 (<code>str | None</code>)             </li> <li> <code>unit_category</code>                 (<code>str | None</code>)             </li> <li> <code>category</code>                 (<code>str | None</code>)             </li> <li> <code>is_formula</code>                 (<code>bool | None</code>)             </li> <li> <code>is_lot_parent</code>                 (<code>bool | None</code>)             </li> <li> <code>values</code>                 (<code>list[BatchDataValue]</code>)             </li> <li> <code>child_rows</code>                 (<code>list[BatchDataRow]</code>)             </li> </ul>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.row_id","title":"row_id","text":"<pre><code>row_id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.type","title":"type","text":"<pre><code>type: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.manufacturer","title":"manufacturer","text":"<pre><code>manufacturer: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.unit_category","title":"unit_category","text":"<pre><code>unit_category: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.category","title":"category","text":"<pre><code>category: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.is_formula","title":"is_formula","text":"<pre><code>is_formula: bool | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.is_lot_parent","title":"is_lot_parent","text":"<pre><code>is_lot_parent: bool | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.values","title":"values","text":"<pre><code>values: list[BatchDataValue]\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataRow.child_rows","title":"child_rows","text":"<pre><code>child_rows: list[BatchDataRow]\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn","title":"BatchDataColumn","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BatchDataColumn\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"colId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Colid\"\n        },\n        \"batchTotal\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Batchtotal\"\n        },\n        \"referenceTotal\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Referencetotal\"\n        },\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"productTotal\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Producttotal\"\n        },\n        \"parentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentid\"\n        },\n        \"designColId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Designcolid\"\n        },\n        \"Lots\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/BatchDataColumn\"\n          },\n          \"title\": \"Lots\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"BatchDataColumn\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    }\n  },\n  \"$ref\": \"#/$defs/BatchDataColumn\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>col_id</code>                 (<code>str | None</code>)             </li> <li> <code>batch_total</code>                 (<code>str | None</code>)             </li> <li> <code>reference_total</code>                 (<code>str | None</code>)             </li> <li> <code>status</code>                 (<code>Status | None</code>)             </li> <li> <code>product_total</code>                 (<code>float | None</code>)             </li> <li> <code>parent_id</code>                 (<code>str | None</code>)             </li> <li> <code>design_col_id</code>                 (<code>str | None</code>)             </li> <li> <code>lots</code>                 (<code>list[BatchDataColumn]</code>)             </li> </ul>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.col_id","title":"col_id","text":"<pre><code>col_id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.batch_total","title":"batch_total","text":"<pre><code>batch_total: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.reference_total","title":"reference_total","text":"<pre><code>reference_total: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.status","title":"status","text":"<pre><code>status: Status | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.product_total","title":"product_total","text":"<pre><code>product_total: float | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.parent_id","title":"parent_id","text":"<pre><code>parent_id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.design_col_id","title":"design_col_id","text":"<pre><code>design_col_id: str | None = None\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchDataColumn.lots","title":"lots","text":"<pre><code>lots: list[BatchDataColumn]\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchData","title":"BatchData","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>id</code> <code>TaskId | None</code> <code>size</code> <code>int | None</code> <code>last_key</code> <code>str | None</code> <code>product</code> <code>list[BatchDataColumn] | None</code> <code>rows</code> <code>list[BatchDataRow] | None</code>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchData.id","title":"id","text":"<pre><code>id: TaskId | None = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchData.size","title":"size","text":"<pre><code>size: int | None = Field(default=None)\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchData.last_key","title":"last_key","text":"<pre><code>last_key: str | None = Field(default=None, alias='lastKey')\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchData.product","title":"product","text":"<pre><code>product: list[BatchDataColumn] | None = Field(\n    default=None, alias=\"Product\"\n)\n</code></pre>"},{"location":"resources/batch_data/#albert.resources.batch_data.BatchData.rows","title":"rows","text":"<pre><code>rows: list[BatchDataRow] | None = Field(\n    default=None, alias=\"Rows\"\n)\n</code></pre>"},{"location":"resources/btdataset/","title":"Breakthrough Datasets","text":""},{"location":"resources/btdataset/#albert.resources.btdataset","title":"albert.resources.btdataset","text":""},{"location":"resources/btdataset/#albert.resources.btdataset.BTDatasetReferences","title":"BTDatasetReferences","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"project_ids\": {\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Project Ids\",\n      \"type\": \"array\"\n    },\n    \"data_column_ids\": {\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Data Column Ids\",\n      \"type\": \"array\"\n    },\n    \"sheet_ids\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sheet Ids\"\n    },\n    \"filter\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Filter\"\n    }\n  },\n  \"required\": [\n    \"project_ids\",\n    \"data_column_ids\"\n  ],\n  \"title\": \"BTDatasetReferences\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>project_ids</code>                 (<code>list[str]</code>)             </li> <li> <code>data_column_ids</code>                 (<code>list[str]</code>)             </li> <li> <code>sheet_ids</code>                 (<code>list[str] | None</code>)             </li> <li> <code>filter</code>                 (<code>dict[str, Any] | None</code>)             </li> </ul>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDatasetReferences.project_ids","title":"project_ids","text":"<pre><code>project_ids: list[str]\n</code></pre>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDatasetReferences.data_column_ids","title":"data_column_ids","text":"<pre><code>data_column_ids: list[str]\n</code></pre>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDatasetReferences.sheet_ids","title":"sheet_ids","text":"<pre><code>sheet_ids: list[str] | None = None\n</code></pre>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDatasetReferences.filter","title":"filter","text":"<pre><code>filter: dict[str, Any] | None = None\n</code></pre>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDataset","title":"BTDataset","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <code>id</code> <code>BTDatasetId | None</code> <code>key</code> <code>str | None</code> <code>file_name</code> <code>str | None</code> <code>report</code> <code>EntityLink | None</code> <code>references</code> <code>BTDatasetReferences | None</code>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDataset.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDataset.id","title":"id","text":"<pre><code>id: BTDatasetId | None = Field(\n    default=None, alias=\"albertId\"\n)\n</code></pre>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDataset.key","title":"key","text":"<pre><code>key: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDataset.file_name","title":"file_name","text":"<pre><code>file_name: str | None = Field(\n    default=None, alias=\"fileName\"\n)\n</code></pre>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDataset.report","title":"report","text":"<pre><code>report: EntityLink | None = Field(\n    default=None, alias=\"Report\"\n)\n</code></pre>"},{"location":"resources/btdataset/#albert.resources.btdataset.BTDataset.references","title":"references","text":"<pre><code>references: BTDatasetReferences | None = Field(\n    default=None, alias=\"References\"\n)\n</code></pre>"},{"location":"resources/btinsight/","title":"Breakthrough Insights","text":""},{"location":"resources/btinsight/#albert.resources.btinsight","title":"albert.resources.btinsight","text":""},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightCategory","title":"BTInsightCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>OPTIMIZER</code> <code>CUSTOM_OPTIMIZER</code> <code>IMPACT_CHART</code> <code>MOLECULE</code> <code>SMART_DOE</code> <code>GENERATE</code>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightCategory.OPTIMIZER","title":"OPTIMIZER","text":"<pre><code>OPTIMIZER = 'Optimizer'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightCategory.CUSTOM_OPTIMIZER","title":"CUSTOM_OPTIMIZER","text":"<pre><code>CUSTOM_OPTIMIZER = 'Custom Optimizer'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightCategory.IMPACT_CHART","title":"IMPACT_CHART","text":"<pre><code>IMPACT_CHART = 'Impact Chart'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightCategory.MOLECULE","title":"MOLECULE","text":"<pre><code>MOLECULE = 'Molecule'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightCategory.SMART_DOE","title":"SMART_DOE","text":"<pre><code>SMART_DOE = 'Smart DOE'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightCategory.GENERATE","title":"GENERATE","text":"<pre><code>GENERATE = 'Generate'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightState","title":"BTInsightState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>QUEUED</code> <code>BUILDING_MODELS</code> <code>GENERATING_CANDIDATES</code> <code>COMPLETE</code> <code>ERROR</code>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightState.QUEUED","title":"QUEUED","text":"<pre><code>QUEUED = 'Queued'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightState.BUILDING_MODELS","title":"BUILDING_MODELS","text":"<pre><code>BUILDING_MODELS = 'Building Models'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightState.GENERATING_CANDIDATES","title":"GENERATING_CANDIDATES","text":"<pre><code>GENERATING_CANDIDATES = 'Generating Candidates'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightState.COMPLETE","title":"COMPLETE","text":"<pre><code>COMPLETE = 'Complete'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightState.ERROR","title":"ERROR","text":"<pre><code>ERROR = 'Error'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightPayloadType","title":"BTInsightPayloadType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>BREAKTHROUGH</code> <code>ALBERTO</code>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightPayloadType.BREAKTHROUGH","title":"BREAKTHROUGH","text":"<pre><code>BREAKTHROUGH = 'Breakthrough'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightPayloadType.ALBERTO","title":"ALBERTO","text":"<pre><code>ALBERTO = 'Alberto'\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightRegistry","title":"BTInsightRegistry","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Registry for the BTInsight.</p> <p>Registry contains result metadata for the BTInsight. Additional attributes can be added to the registry as needed.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Registry for the BTInsight.\\n\\nRegistry contains result metadata for the BTInsight.\\nAdditional attributes can be added to the registry as needed.\",\n  \"properties\": {\n    \"BuildLogs\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Buildlogs\"\n    },\n    \"Metrics\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Metrics\"\n    },\n    \"Settings\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Settings\"\n    }\n  },\n  \"title\": \"BTInsightRegistry\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>build_logs</code>                 (<code>dict[str, Any] | None</code>)             </li> <li> <code>metrics</code>                 (<code>dict[str, Any] | None</code>)             </li> <li> <code>settings</code>                 (<code>dict[str, Any] | None</code>)             </li> </ul>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightRegistry.build_logs","title":"build_logs","text":"<pre><code>build_logs: dict[str, Any] | None = None\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightRegistry.metrics","title":"metrics","text":"<pre><code>metrics: dict[str, Any] | None = None\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsightRegistry.settings","title":"settings","text":"<pre><code>settings: dict[str, Any] | None = None\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight","title":"BTInsight","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <code>category</code> <code>BTInsightCategory</code> <code>metadata</code> <code>dict[str, Any] | None</code> <code>state</code> <code>BTInsightState | None</code> <code>id</code> <code>BTInsightId | None</code> <code>dataset_id</code> <code>BTDatasetId | None</code> <code>model_session_id</code> <code>BTModelSessionId | None</code> <code>model_id</code> <code>BTModelId | None</code> <code>output_key</code> <code>str | None</code> <code>start_time</code> <code>str | None</code> <code>end_time</code> <code>str | None</code> <code>total_time</code> <code>str | None</code> <code>raw_payload</code> <code>dict[str, Any] | None</code> <code>payload_type</code> <code>BTInsightPayloadType | None</code> <code>registry</code> <code>BTInsightRegistry | None</code> <code>content_edited</code> <code>bool | None</code>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.category","title":"category","text":"<pre><code>category: BTInsightCategory\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, Any] | None = Field(\n    default=None, alias=\"Metadata\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.state","title":"state","text":"<pre><code>state: BTInsightState | None = Field(default=None)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.id","title":"id","text":"<pre><code>id: BTInsightId | None = Field(\n    default=None, alias=\"albertId\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.dataset_id","title":"dataset_id","text":"<pre><code>dataset_id: BTDatasetId | None = Field(\n    default=None, alias=\"datasetId\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.model_session_id","title":"model_session_id","text":"<pre><code>model_session_id: BTModelSessionId | None = Field(\n    default=None, alias=\"modelSessionId\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.model_id","title":"model_id","text":"<pre><code>model_id: BTModelId | None = Field(\n    default=None, alias=\"modelId\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.output_key","title":"output_key","text":"<pre><code>output_key: str | None = Field(\n    default=None, alias=\"outputKey\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.start_time","title":"start_time","text":"<pre><code>start_time: str | None = Field(\n    default=None, alias=\"startTime\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.end_time","title":"end_time","text":"<pre><code>end_time: str | None = Field(default=None, alias='endTime')\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.total_time","title":"total_time","text":"<pre><code>total_time: str | None = Field(\n    default=None, alias=\"totalTime\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.raw_payload","title":"raw_payload","text":"<pre><code>raw_payload: dict[str, Any] | None = Field(\n    default=None, alias=\"RawPayload\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.payload_type","title":"payload_type","text":"<pre><code>payload_type: BTInsightPayloadType | None = Field(\n    default=None, alias=\"payloadType\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.registry","title":"registry","text":"<pre><code>registry: BTInsightRegistry | None = Field(\n    default=None, alias=\"Registry\"\n)\n</code></pre>"},{"location":"resources/btinsight/#albert.resources.btinsight.BTInsight.content_edited","title":"content_edited","text":"<pre><code>content_edited: bool | None = Field(\n    default=None, alias=\"contentEdited\"\n)\n</code></pre>"},{"location":"resources/btmodel/","title":"Breakthrough Model","text":""},{"location":"resources/btmodel/#albert.resources.btmodel","title":"albert.resources.btmodel","text":""},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSessionCategory","title":"BTModelSessionCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration for BTModelSession categories.</p> <p>Attributes:</p> Name Type Description <code>USER_MODEL</code> <code>ALBERT_MODEL</code>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSessionCategory.USER_MODEL","title":"USER_MODEL","text":"<pre><code>USER_MODEL = 'userModel'\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSessionCategory.ALBERT_MODEL","title":"ALBERT_MODEL","text":"<pre><code>ALBERT_MODEL = 'albertModel'\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelRegistry","title":"BTModelRegistry","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Registry for BTModelSession.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Registry for BTModelSession.\",\n  \"properties\": {\n    \"BuildLogs\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Buildlogs\"\n    },\n    \"Metrics\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Metrics\"\n    }\n  },\n  \"title\": \"BTModelRegistry\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>build_logs</code>                 (<code>dict[str, Any] | None</code>)             </li> <li> <code>metrics</code>                 (<code>dict[str, Any] | None</code>)             </li> </ul>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelRegistry.build_logs","title":"build_logs","text":"<pre><code>build_logs: dict[str, Any] | None = None\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelRegistry.metrics","title":"metrics","text":"<pre><code>metrics: dict[str, Any] | None = None\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession","title":"BTModelSession","text":"<p>               Bases: <code>BaseResource</code></p> <p>Parent session for a set of BTModels.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the model session.</p> <code>category</code> <code>BTModelSessionCategory</code> <p>The category of the model session (e.g., userModel, albertModel).</p> <code>id</code> <code>BTModelSessionId | None</code> <p>The unique identifier for the model session.</p> <code>dataset_id</code> <code>BTDatasetId</code> <p>The identifier for the dataset associated with the model session.</p> <code>default_model</code> <code>str | None</code> <p>The default model name for the session, if applicable.</p> <code>total_time</code> <code>str | None</code> <p>The total time taken for the session, if applicable.</p> <code>model_count</code> <code>int | None</code> <p>The number of models in the session, if applicable.</p> <code>target</code> <code>list[str] | None</code> <p>The target variables for the models in the session, if applicable.</p> <code>registry</code> <code>BTModelRegistry | None</code> <p>The registry containing build logs and metrics for the session, if applicable.</p> <code>albert_model_details</code> <code>dict[str, Any] | None</code> <p>Details specific to the Albert model, if applicable.</p>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.category","title":"category","text":"<pre><code>category: BTModelSessionCategory\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.id","title":"id","text":"<pre><code>id: BTModelSessionId | None = Field(default=None)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.dataset_id","title":"dataset_id","text":"<pre><code>dataset_id: BTDatasetId = Field(..., alias='datasetId')\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.default_model","title":"default_model","text":"<pre><code>default_model: str | None = Field(\n    default=None, alias=\"defaultModel\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.total_time","title":"total_time","text":"<pre><code>total_time: str | None = Field(\n    default=None, alias=\"totalTime\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.model_count","title":"model_count","text":"<pre><code>model_count: int | None = Field(\n    default=None, alias=\"modelCount\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.target","title":"target","text":"<pre><code>target: list[str] | None = Field(default=None)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.registry","title":"registry","text":"<pre><code>registry: BTModelRegistry | None = Field(\n    default=None, alias=\"Registry\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.albert_model_details","title":"albert_model_details","text":"<pre><code>albert_model_details: dict[str, Any] | None = Field(\n    default=None, alias=\"albertModelDetails\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelSession.flag","title":"flag","text":"<pre><code>flag: bool = Field(default=False)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelType","title":"BTModelType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration for BTModel types.</p> <p>Attributes:</p> Name Type Description <code>SESSION</code> <code>DETACHED</code>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelType.SESSION","title":"SESSION","text":"<pre><code>SESSION = 'Session'\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelType.DETACHED","title":"DETACHED","text":"<pre><code>DETACHED = 'Detached'\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelState","title":"BTModelState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Enumeration for BTModel states.</p> <p>Attributes:</p> Name Type Description <code>QUEUED</code> <code>BUILDING_MODELS</code> <code>GENERATING_CANDIDATES</code> <code>COMPLETE</code> <code>ERROR</code>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelState.QUEUED","title":"QUEUED","text":"<pre><code>QUEUED = 'Queued'\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelState.BUILDING_MODELS","title":"BUILDING_MODELS","text":"<pre><code>BUILDING_MODELS = 'Building Models'\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelState.GENERATING_CANDIDATES","title":"GENERATING_CANDIDATES","text":"<pre><code>GENERATING_CANDIDATES = 'Generating Candidates'\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelState.COMPLETE","title":"COMPLETE","text":"<pre><code>COMPLETE = 'Complete'\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModelState.ERROR","title":"ERROR","text":"<pre><code>ERROR = 'Error'\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel","title":"BTModel","text":"<p>               Bases: <code>BaseResource</code></p> <p>A single Breakthrough model.</p> <p>A BTModel may have a <code>parent_id</code> or be a detached, standalone model.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the model.</p> <code>id</code> <code>BTModelId | None</code> <p>The unique identifier for the model.</p> <code>dataset_id</code> <code>BTDatasetId | None</code> <p>The identifier for the dataset associated with the model.</p> <code>parent_id</code> <code>BTModelSessionId | None</code> <p>The identifier for the parent model session, if applicable.</p> <code>metadata</code> <code>dict[str, Any] | None</code> <p>Metadata associated with the model, if applicable.</p> <code>type</code> <code>BTModelType | None</code> <p>The type of the model (e.g., Session, Detached).</p> <code>state</code> <code>BTModelState | None</code> <p>The current state of the model (e.g., Queued, Building Models, Complete).</p> <code>target</code> <code>list[str] | None</code> <p>The target variables for the model, if applicable.</p> <code>start_time</code> <code>str | None</code> <p>The start time of the model creation, if applicable.</p> <code>end_time</code> <code>str | None</code> <p>The end time of the model creation, if applicable.</p> <code>total_time</code> <code>str | None</code> <p>The total time taken for the model creation, if applicable.</p> <code>model_binary_key</code> <code>str | None</code> <p>The storage key for the model data, if applicable.</p>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.id","title":"id","text":"<pre><code>id: BTModelId | None = Field(default=None)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.dataset_id","title":"dataset_id","text":"<pre><code>dataset_id: BTDatasetId | None = Field(\n    default=None, alias=\"datasetId\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.parent_id","title":"parent_id","text":"<pre><code>parent_id: BTModelSessionId | None = Field(\n    default=None, alias=\"parentId\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, Any] | None = Field(\n    default=None, alias=\"Metadata\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.type","title":"type","text":"<pre><code>type: BTModelType | None = Field(default=None)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.state","title":"state","text":"<pre><code>state: BTModelState | None = Field(default=None)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.target","title":"target","text":"<pre><code>target: list[str] | None = Field(default=None)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.start_time","title":"start_time","text":"<pre><code>start_time: str | None = Field(\n    default=None, alias=\"startTime\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.end_time","title":"end_time","text":"<pre><code>end_time: str | None = Field(default=None, alias='endTime')\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.total_time","title":"total_time","text":"<pre><code>total_time: str | None = Field(\n    default=None, alias=\"totalTime\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.model_binary_key","title":"model_binary_key","text":"<pre><code>model_binary_key: str | None = Field(\n    default=None, alias=\"modelBinaryKey\"\n)\n</code></pre>"},{"location":"resources/btmodel/#albert.resources.btmodel.BTModel.flag","title":"flag","text":"<pre><code>flag: bool = Field(default=False)\n</code></pre>"},{"location":"resources/cas/","title":"Cas","text":""},{"location":"resources/cas/#albert.resources.cas","title":"albert.resources.cas","text":""},{"location":"resources/cas/#albert.resources.cas.CasCategory","title":"CasCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>USER</code> <code>VERISK</code> <code>TSCA_PUBLIC</code> <code>TSCA_PRIVATE</code> <code>NOT_TSCA</code> <code>EXTERNAL</code> <code>UNKNOWN</code> <code>CL_INVENTORY_UPLOAD</code>"},{"location":"resources/cas/#albert.resources.cas.CasCategory.USER","title":"USER","text":"<pre><code>USER = 'User'\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.CasCategory.VERISK","title":"VERISK","text":"<pre><code>VERISK = 'Verisk'\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.CasCategory.TSCA_PUBLIC","title":"TSCA_PUBLIC","text":"<pre><code>TSCA_PUBLIC = 'TSCA - Public'\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.CasCategory.TSCA_PRIVATE","title":"TSCA_PRIVATE","text":"<pre><code>TSCA_PRIVATE = 'TSCA - Private'\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.CasCategory.NOT_TSCA","title":"NOT_TSCA","text":"<pre><code>NOT_TSCA = 'not TSCA'\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.CasCategory.EXTERNAL","title":"EXTERNAL","text":"<pre><code>EXTERNAL = 'CAS linked to External Database'\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.CasCategory.UNKNOWN","title":"UNKNOWN","text":"<pre><code>UNKNOWN = 'Unknown (Trade Secret)'\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.CasCategory.CL_INVENTORY_UPLOAD","title":"CL_INVENTORY_UPLOAD","text":"<pre><code>CL_INVENTORY_UPLOAD = 'CL_Inventory Upload'\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Hazard","title":"Hazard","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Represents a chemical hazard.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Represents a chemical hazard.\",\n  \"properties\": {\n    \"subCategory\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Hazard subcategory\",\n      \"title\": \"Subcategory\"\n    },\n    \"hCode\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Hazard code\",\n      \"title\": \"Hcode\"\n    },\n    \"category\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Hazard category\",\n      \"title\": \"Category\"\n    },\n    \"class\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Hazard classification\",\n      \"title\": \"Class\"\n    },\n    \"hCodeText\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"Hazard code text\",\n      \"title\": \"Hcodetext\"\n    }\n  },\n  \"title\": \"Hazard\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>sub_category</code>                 (<code>str | None</code>)             </li> <li> <code>h_code</code>                 (<code>str | None</code>)             </li> <li> <code>category</code>                 (<code>str | float | None</code>)             </li> <li> <code>hazard_class</code>                 (<code>str | None</code>)             </li> <li> <code>h_code_text</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/cas/#albert.resources.cas.Hazard.sub_category","title":"sub_category","text":"<pre><code>sub_category: str | None = None\n</code></pre> <p>Hazard subcategory</p>"},{"location":"resources/cas/#albert.resources.cas.Hazard.h_code","title":"h_code","text":"<pre><code>h_code: str | None = None\n</code></pre> <p>Hazard code</p>"},{"location":"resources/cas/#albert.resources.cas.Hazard.category","title":"category","text":"<pre><code>category: str | float | None = None\n</code></pre> <p>Hazard category</p>"},{"location":"resources/cas/#albert.resources.cas.Hazard.hazard_class","title":"hazard_class","text":"<pre><code>hazard_class: str | None = None\n</code></pre> <p>Hazard classification</p>"},{"location":"resources/cas/#albert.resources.cas.Hazard.h_code_text","title":"h_code_text","text":"<pre><code>h_code_text: str | None = None\n</code></pre> <p>Hazard code text</p>"},{"location":"resources/cas/#albert.resources.cas.Cas","title":"Cas","text":"<p>               Bases: <code>BaseResource</code></p> <p>Represents a CAS entity.</p> <p>Methods:</p> Name Description <code>from_string</code> <p>Creates a Cas object from a string.</p> <p>Attributes:</p> Name Type Description <code>number</code> <code>str</code> <code>name</code> <code>str | None</code> <code>description</code> <code>str | None</code> <code>notes</code> <code>str | None</code> <code>category</code> <code>CasCategory | None</code> <code>smiles</code> <code>str | None</code> <code>inchi_key</code> <code>str | None</code> <code>iupac_name</code> <code>str | None</code> <code>id</code> <code>str | None</code> <code>hazards</code> <code>list[Hazard] | None</code> <code>wgk</code> <code>str | None</code> <code>ec_number</code> <code>str | None</code> <code>type</code> <code>str | None</code> <code>classification_type</code> <code>str | None</code> <code>order</code> <code>str | None</code> <code>metadata</code> <code>dict[str, MetadataItem]</code>"},{"location":"resources/cas/#albert.resources.cas.Cas.number","title":"number","text":"<pre><code>number: str = Field(..., description='The CAS number.')\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.name","title":"name","text":"<pre><code>name: str | None = Field(\n    None, description=\"Name of the CAS.\"\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.description","title":"description","text":"<pre><code>description: str | None = Field(\n    None, description=\"The description or name of the CAS.\"\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.notes","title":"notes","text":"<pre><code>notes: str | None = Field(\n    None, description=\"Notes related to the CAS.\"\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.category","title":"category","text":"<pre><code>category: CasCategory | None = Field(\n    None, description=\"The category of the CAS.\"\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.smiles","title":"smiles","text":"<pre><code>smiles: str | None = Field(\n    None,\n    alias=\"casSmiles\",\n    description=\"CAS SMILES notation.\",\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.inchi_key","title":"inchi_key","text":"<pre><code>inchi_key: str | None = Field(\n    None,\n    alias=\"inchiKey\",\n    description=\"InChIKey of the CAS.\",\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.iupac_name","title":"iupac_name","text":"<pre><code>iupac_name: str | None = Field(\n    None,\n    alias=\"iUpacName\",\n    description=\"IUPAC name of the CAS.\",\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.id","title":"id","text":"<pre><code>id: str | None = Field(\n    None,\n    alias=\"albertId\",\n    description=\"The AlbertID of the CAS.\",\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.hazards","title":"hazards","text":"<pre><code>hazards: list[Hazard] | None = Field(\n    None, description=\"Hazards associated with the CAS.\"\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.wgk","title":"wgk","text":"<pre><code>wgk: str | None = Field(\n    None,\n    description=\"German Water Hazard Class (WGK) number.\",\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.ec_number","title":"ec_number","text":"<pre><code>ec_number: str | None = Field(\n    None,\n    alias=\"ecListNo\",\n    description=\"European Community (EC) number.\",\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.type","title":"type","text":"<pre><code>type: str | None = Field(\n    None, description=\"Type of the CAS.\"\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.classification_type","title":"classification_type","text":"<pre><code>classification_type: str | None = Field(\n    None,\n    alias=\"classificationType\",\n    description=\"Classification type of the CAS.\",\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.order","title":"order","text":"<pre><code>order: str | None = Field(None, description='CAS order.')\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] = Field(\n    alias=\"Metadata\", default_factory=dict\n)\n</code></pre>"},{"location":"resources/cas/#albert.resources.cas.Cas.from_string","title":"from_string","text":"<pre><code>from_string(*, number: str) -&gt; Cas\n</code></pre> <p>Creates a Cas object from a string.</p> <p>Parameters:</p> Name Type Description Default <code>number</code> <code>str</code> <p>The CAS number.</p> required <p>Returns:</p> Type Description <code>Cas</code> <p>The Cas object created from the string.</p> Source code in <code>src/albert/resources/cas.py</code> <pre><code>@classmethod\ndef from_string(cls, *, number: str) -&gt; \"Cas\":\n    \"\"\"\n    Creates a Cas object from a string.\n\n    Parameters\n    ----------\n    number : str\n        The CAS number.\n\n    Returns\n    -------\n    Cas\n        The Cas object created from the string.\n    \"\"\"\n    return cls(number=number)\n</code></pre>"},{"location":"resources/companies/","title":"Companies","text":""},{"location":"resources/companies/#albert.resources.companies","title":"albert.resources.companies","text":""},{"location":"resources/companies/#albert.resources.companies.Company","title":"Company","text":"<p>               Bases: <code>BaseResource</code></p> <p>Company is a Pydantic model representing a company entity.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the company.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the company. Set when the company is retrieved from Albert.</p> <code>distance</code> <code>float | None</code> <p>The scores of a company in a search result, optional. Read-only.</p>"},{"location":"resources/companies/#albert.resources.companies.Company.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/companies/#albert.resources.companies.Company.id","title":"id","text":"<pre><code>id: str | None = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/companies/#albert.resources.companies.Company.distance","title":"distance","text":"<pre><code>distance: float | None = Field(\n    default=None, exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/custom_fields/","title":"Custom Fields","text":""},{"location":"resources/custom_fields/#albert.resources.custom_fields","title":"albert.resources.custom_fields","text":"<p>Attributes:</p> Name Type Description <code>Default</code>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.Default","title":"Default","text":"<pre><code>Default = Annotated[\n    StringDefault | NumberDefault | ListDefault,\n    Field(discriminator=\"type\"),\n]\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.FieldType","title":"FieldType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The type (list or string) of the custom field</p> <p>Attributes:</p> Name Type Description <code>LIST</code> <code>STRING</code> <code>NUMBER</code>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.FieldType.LIST","title":"LIST","text":"<pre><code>LIST = 'list'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.FieldType.STRING","title":"STRING","text":"<pre><code>STRING = 'string'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.FieldType.NUMBER","title":"NUMBER","text":"<pre><code>NUMBER = 'number'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType","title":"ServiceType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The service type the custom field is associated with</p> <p>Attributes:</p> Name Type Description <code>INVENTORIES</code> <code>LOTS</code> <code>PROJECTS</code> <code>TASKS</code> <code>USERS</code> <code>PARAMETERS</code> <code>DATA_COLUMNS</code> <code>DATA_TEMPLATES</code> <code>PARAMETER_GROUPS</code> <code>CAS</code>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.INVENTORIES","title":"INVENTORIES","text":"<pre><code>INVENTORIES = 'inventories'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.LOTS","title":"LOTS","text":"<pre><code>LOTS = 'lots'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.PROJECTS","title":"PROJECTS","text":"<pre><code>PROJECTS = 'projects'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.TASKS","title":"TASKS","text":"<pre><code>TASKS = 'tasks'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.USERS","title":"USERS","text":"<pre><code>USERS = 'users'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.PARAMETERS","title":"PARAMETERS","text":"<pre><code>PARAMETERS = 'parameters'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.DATA_COLUMNS","title":"DATA_COLUMNS","text":"<pre><code>DATA_COLUMNS = 'datacolumns'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.DATA_TEMPLATES","title":"DATA_TEMPLATES","text":"<pre><code>DATA_TEMPLATES = 'datatemplates'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.PARAMETER_GROUPS","title":"PARAMETER_GROUPS","text":"<pre><code>PARAMETER_GROUPS = 'parametergroups'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ServiceType.CAS","title":"CAS","text":"<pre><code>CAS = 'cas'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.FieldCategory","title":"FieldCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The ACL level of the custom field</p> <p>Attributes:</p> Name Type Description <code>BUSINESS_DEFINED</code> <code>USER_DEFINED</code>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.FieldCategory.BUSINESS_DEFINED","title":"BUSINESS_DEFINED","text":"<pre><code>BUSINESS_DEFINED = 'businessDefined'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.FieldCategory.USER_DEFINED","title":"USER_DEFINED","text":"<pre><code>USER_DEFINED = 'userDefined'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.EntityCategory","title":"EntityCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The entity category of the custom field. Only some categories are allowed for certain services</p> <p>Attributes:</p> Name Type Description <code>FORMULAS</code> <code>RAW_MATERIALS</code> <code>CONSUMABLES</code> <code>EQUIPMENT</code> <code>PROPERTY</code> <code>BATCH</code> <code>GENERAL</code>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.EntityCategory.FORMULAS","title":"FORMULAS","text":"<pre><code>FORMULAS = 'Formulas'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.EntityCategory.RAW_MATERIALS","title":"RAW_MATERIALS","text":"<pre><code>RAW_MATERIALS = 'RawMaterials'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.EntityCategory.CONSUMABLES","title":"CONSUMABLES","text":"<pre><code>CONSUMABLES = 'Consumables'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.EntityCategory.EQUIPMENT","title":"EQUIPMENT","text":"<pre><code>EQUIPMENT = 'Equipment'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.EntityCategory.PROPERTY","title":"PROPERTY","text":"<pre><code>PROPERTY = 'Property'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.EntityCategory.BATCH","title":"BATCH","text":"<pre><code>BATCH = 'Batch'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.EntityCategory.GENERAL","title":"GENERAL","text":"<pre><code>GENERAL = 'General'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.UIComponent","title":"UIComponent","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The UI component available to the custom field</p> <p>Attributes:</p> Name Type Description <code>CREATE</code> <code>DETAILS</code>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.UIComponent.CREATE","title":"CREATE","text":"<pre><code>CREATE = 'create'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.UIComponent.DETAILS","title":"DETAILS","text":"<pre><code>DETAILS = 'details'\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ListDefaultValue","title":"ListDefaultValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"albertId\",\n    \"name\"\n  ],\n  \"title\": \"ListDefaultValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ListDefaultValue.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ListDefaultValue.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.StringDefault","title":"StringDefault","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"type\": {\n      \"const\": \"string\",\n      \"default\": \"string\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"title\": \"Value\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"value\"\n  ],\n  \"title\": \"StringDefault\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>Literal[STRING]</code>)             </li> <li> <code>value</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.StringDefault.type","title":"type","text":"<pre><code>type: Literal[STRING] = STRING\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.StringDefault.value","title":"value","text":"<pre><code>value: str\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.NumberDefault","title":"NumberDefault","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"type\": {\n      \"const\": \"number\",\n      \"default\": \"number\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"number\"\n        }\n      ],\n      \"title\": \"Value\"\n    }\n  },\n  \"required\": [\n    \"value\"\n  ],\n  \"title\": \"NumberDefault\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>Literal[NUMBER]</code>)             </li> <li> <code>value</code>                 (<code>int | float</code>)             </li> </ul>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.NumberDefault.type","title":"type","text":"<pre><code>type: Literal[NUMBER] = NUMBER\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.NumberDefault.value","title":"value","text":"<pre><code>value: int | float\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ListDefault","title":"ListDefault","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Note</p> <p>For multi-select custom fields, <code>value</code> must be <code>list[ListDefaultValue]</code>.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ListDefaultValue\": {\n      \"properties\": {\n        \"albertId\": {\n          \"title\": \"Albertid\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"albertId\",\n        \"name\"\n      ],\n      \"title\": \"ListDefaultValue\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"!!! note\\n    For multi-select custom fields, `value` must be `list[ListDefaultValue]`.\",\n  \"properties\": {\n    \"type\": {\n      \"const\": \"list\",\n      \"default\": \"list\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/ListDefaultValue\"\n        },\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ListDefaultValue\"\n          },\n          \"type\": \"array\"\n        }\n      ],\n      \"title\": \"Value\"\n    }\n  },\n  \"required\": [\n    \"value\"\n  ],\n  \"title\": \"ListDefault\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>Literal[LIST]</code>)             </li> <li> <code>value</code>                 (<code>ListDefaultValue | list[ListDefaultValue]</code>)             </li> </ul>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ListDefault.type","title":"type","text":"<pre><code>type: Literal[LIST] = LIST\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.ListDefault.value","title":"value","text":"<pre><code>value: ListDefaultValue | list[ListDefaultValue]\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField","title":"CustomField","text":"<p>               Bases: <code>BaseResource</code></p> <p>A custom field for an entity in Albert.</p> <p>Returns:</p> Type Description <code>CustomField</code> <p>A CustomField that can be used to attach Metadata to an entity in Albert.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the custom field. Cannot contain spaces.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the custom field.</p> <code>field_type</code> <code>FieldType</code> <p>The type of the custom field. Allowed values are <code>list</code> and <code>string</code>. String fields cannot be searchable and are used to set uncontrolled metadata. List fields can be searchable and are used to set controlled metadata.</p> <code>display_name</code> <code>str</code> <p>The display name of the custom field. Can contain spaces.</p> <code>searchable</code> <code>bool | None</code> <p>Whether the custom field is searchable, optional. Defaults to False.</p> <code>service</code> <code>ServiceType</code> <p>The service type the custom field is associated with.</p> <code>hidden</code> <code>bool | None</code> <p>Whether the custom field is hidden, optional. Defaults to False.</p> <code>lookup_column</code> <code>bool | None</code> <p>Whether the custom field is a lookup column, optional. Defaults to False. Only allowed for inventories.</p> <code>lookup_row</code> <code>bool | None</code> <p>Whether the custom field is a lookup row, optional. Defaults to False. Only allowed for formulas in inventories.</p> <code>category</code> <code>FieldCategory | None</code> <p>The category of the custom field, optional. Defaults to None. Required for list fields. Allowed values are <code>businessDefined</code> and <code>userDefined</code>.</p> <code>min</code> <code>int | None</code> <p>The minimum value of the custom field, optional. Defaults to None.</p> <code>max</code> <code>int | None</code> <p>The maximum value of the custom field, optional. Defaults to None.</p> <code>entity_categories</code> <code>list[EntityCategory] | None</code> <p>The entity categories of the custom field, optional. Defaults to None. Required for lookup row fields. Allowed values are <code>Formulas</code>, <code>RawMaterials</code>, <code>Consumables</code>, <code>Equipment</code>, <code>Property</code>, <code>Batch</code>, and <code>General</code>.</p> <code>ui_components</code> <code>list[UIComponent] | None</code> <p>The UI components available to the custom field, optional. Defaults to None. Allowed values are <code>create</code> and <code>details</code>.</p> <code>default</code> <code>Default | None</code> <p>The default value of the custom field, optional. Defaults to None.</p> <code>editable</code> <code>Default | None</code> <p>Decides whether the field should be editable on UI or not.</p> <p>Methods:</p> Name Description <code>confirm_field_compatability</code> <code>ensure_default_has_type</code>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.id","title":"id","text":"<pre><code>id: str | None = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.field_type","title":"field_type","text":"<pre><code>field_type: FieldType = Field(alias='type')\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.display_name","title":"display_name","text":"<pre><code>display_name: str = Field(alias='labelName')\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.searchable","title":"searchable","text":"<pre><code>searchable: bool | None = Field(\n    default=None, alias=\"search\"\n)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.service","title":"service","text":"<pre><code>service: ServiceType\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.hidden","title":"hidden","text":"<pre><code>hidden: bool | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.lookup_column","title":"lookup_column","text":"<pre><code>lookup_column: bool | None = Field(\n    default=None, alias=\"lkpColumn\"\n)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.lookup_row","title":"lookup_row","text":"<pre><code>lookup_row: bool | None = Field(\n    default=None, alias=\"lkpRow\"\n)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.category","title":"category","text":"<pre><code>category: FieldCategory | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.min","title":"min","text":"<pre><code>min: int | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.max","title":"max","text":"<pre><code>max: int | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.entity_categories","title":"entity_categories","text":"<pre><code>entity_categories: list[EntityCategory] | None = Field(\n    default=None, alias=\"entityCategory\"\n)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.ui_components","title":"ui_components","text":"<pre><code>ui_components: list[UIComponent] | None = Field(\n    default=None, alias=\"ui_components\"\n)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.required","title":"required","text":"<pre><code>required: bool | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.multiselect","title":"multiselect","text":"<pre><code>multiselect: bool | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.pattern","title":"pattern","text":"<pre><code>pattern: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.default","title":"default","text":"<pre><code>default: Default | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.editable","title":"editable","text":"<pre><code>editable: bool | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.confirm_field_compatability","title":"confirm_field_compatability","text":"<pre><code>confirm_field_compatability() -&gt; CustomField\n</code></pre> Source code in <code>src/albert/resources/custom_fields.py</code> <pre><code>@model_validator(mode=\"after\")\ndef confirm_field_compatability(self) -&gt; \"CustomField\":\n    if self.field_type == FieldType.LIST and self.category is None:\n        raise ValueError(\"Category must be set for list fields\")\n    return self\n</code></pre>"},{"location":"resources/custom_fields/#albert.resources.custom_fields.CustomField.ensure_default_has_type","title":"ensure_default_has_type","text":"<pre><code>ensure_default_has_type(v: Any) -&gt; Any\n</code></pre> Source code in <code>src/albert/resources/custom_fields.py</code> <pre><code>@field_validator(\"default\", mode=\"before\")\n@classmethod\ndef ensure_default_has_type(cls, v: Any) -&gt; Any:\n    if v is None:\n        return v\n\n    if isinstance(v, dict) and \"type\" in v:\n        return v\n\n    if isinstance(v, dict) and \"value\" in v:\n        raw_val = v[\"value\"]\n\n        if isinstance(raw_val, str):\n            inferred_type = FieldType.STRING\n        elif isinstance(raw_val, (int | float)):\n            inferred_type = FieldType.NUMBER\n        elif isinstance(raw_val, dict) and \"albertId\" in raw_val or isinstance(raw_val, list):\n            inferred_type = FieldType.LIST\n        else:\n            raise ValueError(f\"Cannot infer default type from value: {raw_val!r}\")\n\n        return {\"type\": inferred_type, \"value\": raw_val}\n\n    return v\n</code></pre>"},{"location":"resources/custom_templates/","title":"Custom Templates","text":""},{"location":"resources/custom_templates/#albert.resources.custom_templates","title":"albert.resources.custom_templates","text":"<p>Attributes:</p> Name Type Description <code>CustomTemplateData</code> <code>ACLEntry</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateData","title":"CustomTemplateData","text":"<pre><code>CustomTemplateData = Annotated[\n    _CustomTemplateDataUnion,\n    Field(discriminator=\"category\"),\n]\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.ACLEntry","title":"ACLEntry","text":"<pre><code>ACLEntry = Annotated[\n    TeamACL | OwnerACL | MemberACL | ViewerACL,\n    Field(discriminator=\"type\"),\n]\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.DataTemplateInventory","title":"DataTemplateInventory","text":"<p>               Bases: <code>EntityLink</code></p> <p>Attributes:</p> Name Type Description <code>batch_size</code> <code>float | None</code> <code>sheet</code> <code>list[Sheet | EntityLink] | None</code> <code>category</code> <code>InventoryCategory | None</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.DataTemplateInventory.batch_size","title":"batch_size","text":"<pre><code>batch_size: float | None = Field(\n    default=None, alias=\"batchSize\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.DataTemplateInventory.sheet","title":"sheet","text":"<pre><code>sheet: list[Sheet | EntityLink] | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.DataTemplateInventory.category","title":"category","text":"<pre><code>category: InventoryCategory | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.DesignLink","title":"DesignLink","text":"<p>               Bases: <code>EntityLink</code></p> <p>Attributes:</p> Name Type Description <code>type</code> <code>DesignType</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.DesignLink.type","title":"type","text":"<pre><code>type: DesignType\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateCategory","title":"TemplateCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>PROPERTY_LIST</code> <code>PROPERTY</code> <code>BATCH</code> <code>SHEET</code> <code>NOTEBOOK</code> <code>GENERAL</code> <code>QC_BATCH</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateCategory.PROPERTY_LIST","title":"PROPERTY_LIST","text":"<pre><code>PROPERTY_LIST = 'Property Task'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateCategory.PROPERTY","title":"PROPERTY","text":"<pre><code>PROPERTY = 'Property'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateCategory.BATCH","title":"BATCH","text":"<pre><code>BATCH = 'Batch'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateCategory.SHEET","title":"SHEET","text":"<pre><code>SHEET = 'Sheet'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateCategory.NOTEBOOK","title":"NOTEBOOK","text":"<pre><code>NOTEBOOK = 'Notebook'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateCategory.GENERAL","title":"GENERAL","text":"<pre><code>GENERAL = 'General'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateCategory.QC_BATCH","title":"QC_BATCH","text":"<pre><code>QC_BATCH = 'BatchWithQC'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Priority","title":"Priority","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>LOW</code> <code>MEDIUM</code> <code>HIGH</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Priority.LOW","title":"LOW","text":"<pre><code>LOW = 'Low'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Priority.MEDIUM","title":"MEDIUM","text":"<pre><code>MEDIUM = 'Medium'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Priority.HIGH","title":"HIGH","text":"<pre><code>HIGH = 'High'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData","title":"GeneralData","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Attributes:</p> Name Type Description <code>category</code> <code>Literal[GENERAL]</code> <code>name</code> <code>str | None</code> <code>project</code> <code>SerializeAsEntityLink[Project] | None</code> <code>location</code> <code>SerializeAsEntityLink[Location] | None</code> <code>assigned_to</code> <code>SerializeAsEntityLink[User] | None</code> <code>notebook_id</code> <code>NotebookId | None</code> <code>priority</code> <code>Priority | None</code> <code>sources</code> <code>list[TaskSource] | None</code> <code>parent_id</code> <code>str | None</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData.category","title":"category","text":"<pre><code>category: Literal[GENERAL] = GENERAL\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData.name","title":"name","text":"<pre><code>name: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData.project","title":"project","text":"<pre><code>project: SerializeAsEntityLink[Project] | None = Field(\n    alias=\"Project\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData.location","title":"location","text":"<pre><code>location: SerializeAsEntityLink[Location] | None = Field(\n    alias=\"Location\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData.assigned_to","title":"assigned_to","text":"<pre><code>assigned_to: SerializeAsEntityLink[User] | None = Field(\n    alias=\"AssignedTo\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData.notebook_id","title":"notebook_id","text":"<pre><code>notebook_id: NotebookId | None = Field(\n    alias=\"notebookId\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData.priority","title":"priority","text":"<pre><code>priority: Priority | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData.sources","title":"sources","text":"<pre><code>sources: list[TaskSource] | None = Field(\n    alias=\"Sources\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.GeneralData.parent_id","title":"parent_id","text":"<pre><code>parent_id: str | None = Field(\n    alias=\"parentId\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.JobStatus","title":"JobStatus","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>ACTIVE</code> <code>INACTIVE</code> <code>QUEUED</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.JobStatus.ACTIVE","title":"ACTIVE","text":"<pre><code>ACTIVE = 'active'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.JobStatus.INACTIVE","title":"INACTIVE","text":"<pre><code>INACTIVE = 'inactive'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.JobStatus.QUEUED","title":"QUEUED","text":"<pre><code>QUEUED = 'queued'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamInput","title":"SamInput","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>value</code> <code>str | None</code> <code>unit</code> <code>str | None</code> <code>name</code> <code>str</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamInput.value","title":"value","text":"<pre><code>value: str | None = Field(alias='Value', default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamInput.unit","title":"unit","text":"<pre><code>unit: str | None = Field(alias='Unit', default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamInput.name","title":"name","text":"<pre><code>name: str = Field(alias='Name')\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamConfig","title":"SamConfig","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>configuration_name</code> <code>str</code> <code>configurationId</code> <code>str</code> <code>machineId</code> <code>str | None</code> <code>input</code> <code>list[SamInput] | None</code> <code>job_status</code> <code>JobStatus | None</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamConfig.configuration_name","title":"configuration_name","text":"<pre><code>configuration_name: str = Field(alias='configurationName')\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamConfig.configurationId","title":"configurationId","text":"<pre><code>configurationId: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamConfig.machineId","title":"machineId","text":"<pre><code>machineId: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamConfig.input","title":"input","text":"<pre><code>input: list[SamInput] | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SamConfig.job_status","title":"job_status","text":"<pre><code>job_status: JobStatus | None = Field(\n    default=None, alias=\"status\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Workflow","title":"Workflow","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <code>name</code> <code>str</code> <code>sam_config</code> <code>list[SamConfig] | None</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Workflow.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Workflow.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Workflow.sam_config","title":"sam_config","text":"<pre><code>sam_config: list[SamConfig] | None = Field(\n    default=None, alias=\"SamConfig\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Block","title":"Block","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Attributes:</p> Name Type Description <code>workflow</code> <code>list[Workflow]</code> <code>datatemplate</code> <code>list[EntityLink] | None</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Block.workflow","title":"workflow","text":"<pre><code>workflow: list[Workflow] = Field(\n    default=None, alias=\"Workflow\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.Block.datatemplate","title":"datatemplate","text":"<pre><code>datatemplate: list[EntityLink] | None = Field(\n    default=None, alias=\"Datatemplate\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData","title":"QCBatchData","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Attributes:</p> Name Type Description <code>category</code> <code>Literal[QC_BATCH]</code> <code>project</code> <code>SerializeAsEntityLink[Project] | None</code> <code>inventories</code> <code>list[DataTemplateInventory] | None</code> <code>workflow</code> <code>list[EntityLink]</code> <code>location</code> <code>SerializeAsEntityLink[Location] | None</code> <code>batch_size_unit</code> <code>str | None</code> <code>batch_size</code> <code>str | None</code> <code>priority</code> <code>Priority</code> <code>name</code> <code>str | None</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData.category","title":"category","text":"<pre><code>category: Literal[QC_BATCH] = QC_BATCH\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData.project","title":"project","text":"<pre><code>project: SerializeAsEntityLink[Project] | None = Field(\n    alias=\"Project\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData.inventories","title":"inventories","text":"<pre><code>inventories: list[DataTemplateInventory] | None = Field(\n    default=None, alias=\"Inventories\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData.workflow","title":"workflow","text":"<pre><code>workflow: list[EntityLink] = Field(\n    default=None, alias=\"Workflow\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData.location","title":"location","text":"<pre><code>location: SerializeAsEntityLink[Location] | None = Field(\n    alias=\"Location\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData.batch_size_unit","title":"batch_size_unit","text":"<pre><code>batch_size_unit: str | None = Field(\n    alias=\"batchSizeUnit\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData.batch_size","title":"batch_size","text":"<pre><code>batch_size: str | None = Field(\n    alias=\"batchSize\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData.priority","title":"priority","text":"<pre><code>priority: Priority\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.QCBatchData.name","title":"name","text":"<pre><code>name: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData","title":"BatchData","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str | None</code> <code>category</code> <code>Literal[BATCH]</code> <code>assigned_to</code> <code>SerializeAsEntityLink[User] | None</code> <code>project</code> <code>SerializeAsEntityLink[Project] | None</code> <code>location</code> <code>SerializeAsEntityLink[Location] | None</code> <code>batch_size_unit</code> <code>str</code> <code>inventories</code> <code>list[DataTemplateInventory] | None</code> <code>priority</code> <code>Priority</code> <code>workflow</code> <code>list[EntityLink]</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData.name","title":"name","text":"<pre><code>name: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData.category","title":"category","text":"<pre><code>category: Literal[BATCH] = BATCH\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData.assigned_to","title":"assigned_to","text":"<pre><code>assigned_to: SerializeAsEntityLink[User] | None = Field(\n    alias=\"AssignedTo\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData.project","title":"project","text":"<pre><code>project: SerializeAsEntityLink[Project] | None = Field(\n    alias=\"Project\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData.location","title":"location","text":"<pre><code>location: SerializeAsEntityLink[Location] | None = Field(\n    alias=\"Location\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData.batch_size_unit","title":"batch_size_unit","text":"<pre><code>batch_size_unit: str = Field(\n    alias=\"batchSizeUnit\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData.inventories","title":"inventories","text":"<pre><code>inventories: list[DataTemplateInventory] | None = Field(\n    default=None, alias=\"Inventories\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData.priority","title":"priority","text":"<pre><code>priority: Priority\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.BatchData.workflow","title":"workflow","text":"<pre><code>workflow: list[EntityLink] = Field(\n    default=None, alias=\"Workflow\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData","title":"PropertyData","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Attributes:</p> Name Type Description <code>category</code> <code>Literal[PROPERTY]</code> <code>name</code> <code>str | None</code> <code>blocks</code> <code>list[Block]</code> <code>priority</code> <code>Priority</code> <code>location</code> <code>SerializeAsEntityLink[Location] | None</code> <code>assigned_to</code> <code>SerializeAsEntityLink[User] | None</code> <code>project</code> <code>SerializeAsEntityLink[Project] | None</code> <code>inventories</code> <code>list[DataTemplateInventory] | None</code> <code>due_date</code> <code>str | None</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData.category","title":"category","text":"<pre><code>category: Literal[PROPERTY] = PROPERTY\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData.name","title":"name","text":"<pre><code>name: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData.blocks","title":"blocks","text":"<pre><code>blocks: list[Block] = Field(\n    default_factory=list, alias=\"Blocks\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData.priority","title":"priority","text":"<pre><code>priority: Priority\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData.location","title":"location","text":"<pre><code>location: SerializeAsEntityLink[Location] | None = Field(\n    alias=\"Location\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData.assigned_to","title":"assigned_to","text":"<pre><code>assigned_to: SerializeAsEntityLink[User] | None = Field(\n    alias=\"AssignedTo\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData.project","title":"project","text":"<pre><code>project: SerializeAsEntityLink[Project] | None = Field(\n    alias=\"Project\", default=None\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData.inventories","title":"inventories","text":"<pre><code>inventories: list[DataTemplateInventory] | None = Field(\n    default=None, alias=\"Inventories\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.PropertyData.due_date","title":"due_date","text":"<pre><code>due_date: str | None = Field(alias='dueDate', default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SheetData","title":"SheetData","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Attributes:</p> Name Type Description <code>category</code> <code>Literal[SHEET]</code> <code>designs</code> <code>list[DesignLink]</code> <code>formula_info</code> <code>list</code> <code>task_rows</code> <code>list[EntityLink]</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SheetData.category","title":"category","text":"<pre><code>category: Literal[SHEET] = SHEET\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SheetData.designs","title":"designs","text":"<pre><code>designs: list[DesignLink] = Field(\n    default=None, alias=\"Designs\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SheetData.formula_info","title":"formula_info","text":"<pre><code>formula_info: list = Field(\n    default_factory=list, alias=\"FormulaInfo\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.SheetData.task_rows","title":"task_rows","text":"<pre><code>task_rows: list[EntityLink] = Field(\n    default_factory=list, alias=\"TaskRows\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.NotebookData","title":"NotebookData","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Attributes:</p> Name Type Description <code>category</code> <code>Literal[NOTEBOOK]</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.NotebookData.category","title":"category","text":"<pre><code>category: Literal[NOTEBOOK] = NOTEBOOK\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.ACLType","title":"ACLType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>TEAM</code> <code>MEMBER</code> <code>OWNER</code> <code>VIEWER</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.ACLType.TEAM","title":"TEAM","text":"<pre><code>TEAM = 'team'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.ACLType.MEMBER","title":"MEMBER","text":"<pre><code>MEMBER = 'member'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.ACLType.OWNER","title":"OWNER","text":"<pre><code>OWNER = 'owner'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.ACLType.VIEWER","title":"VIEWER","text":"<pre><code>VIEWER = 'viewer'\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TeamACL","title":"TeamACL","text":"<p>               Bases: <code>ACL</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"description\": \"The id of the user for which this ACL applies\",\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"fgc\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/AccessControlLevel\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"The Fine-Grain Control Level\"\n    },\n    \"type\": {\n      \"const\": \"team\",\n      \"default\": \"team\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"TeamACL\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>fgc</code>                 (<code>AccessControlLevel | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[TEAM]</code>)             </li> </ul>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TeamACL.type","title":"type","text":"<pre><code>type: Literal[TEAM] = TEAM\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.OwnerACL","title":"OwnerACL","text":"<p>               Bases: <code>ACL</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"description\": \"The id of the user for which this ACL applies\",\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"fgc\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/AccessControlLevel\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"The Fine-Grain Control Level\"\n    },\n    \"type\": {\n      \"const\": \"owner\",\n      \"default\": \"owner\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"OwnerACL\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>fgc</code>                 (<code>AccessControlLevel | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[OWNER]</code>)             </li> </ul>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.OwnerACL.type","title":"type","text":"<pre><code>type: Literal[OWNER] = OWNER\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.MemberACL","title":"MemberACL","text":"<p>               Bases: <code>ACL</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"description\": \"The id of the user for which this ACL applies\",\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"fgc\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/AccessControlLevel\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"The Fine-Grain Control Level\"\n    },\n    \"type\": {\n      \"const\": \"member\",\n      \"default\": \"member\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"MemberACL\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>fgc</code>                 (<code>AccessControlLevel | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[MEMBER]</code>)             </li> </ul>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.MemberACL.type","title":"type","text":"<pre><code>type: Literal[MEMBER] = MEMBER\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.ViewerACL","title":"ViewerACL","text":"<p>               Bases: <code>ACL</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"description\": \"The id of the user for which this ACL applies\",\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"fgc\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/AccessControlLevel\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"The Fine-Grain Control Level\"\n    },\n    \"type\": {\n      \"const\": \"viewer\",\n      \"default\": \"viewer\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"ViewerACL\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>fgc</code>                 (<code>AccessControlLevel | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[VIEWER]</code>)             </li> </ul>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.ViewerACL.type","title":"type","text":"<pre><code>type: Literal[VIEWER] = VIEWER\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateACL","title":"TemplateACL","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>fgclist</code> <code>list[ACLEntry]</code> <code>acl_class</code> <code>str | None</code>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateACL.fgclist","title":"fgclist","text":"<pre><code>fgclist: list[ACLEntry] = Field(default=None)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.TemplateACL.acl_class","title":"acl_class","text":"<pre><code>acl_class: str | None = Field(default=None, alias='class')\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplate","title":"CustomTemplate","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>A custom template entity.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the template.</p> <code>id</code> <code>str</code> <p>The Albert ID of the template. Set when the template is retrieved from Albert.</p> <code>category</code> <code>TemplateCategory</code> <p>The category of the template. Allowed values are <code>Property Task</code>, <code>Property</code>, <code>Batch</code>, <code>Sheet</code>, <code>Notebook</code>, and <code>General</code>.</p> <code>metadata</code> <code>Dict[str, str | List[EntityLink] | EntityLink] | None</code> <p>The metadata of the template. Allowed Metadata fields can be found using Custim Fields.</p> <code>data</code> <code>CustomTemplateData | None</code> <p>The data of the template.</p> <code>team</code> <code>List[TeamACL] | None</code> <p>The team of the template.</p> <code>acl</code> <code>TemplateACL | None</code> <p>Methods:</p> Name Description <code>add_missing_category</code> <p>Initialize private attributes from the incoming data dictionary before the model is fully constructed.</p>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplate.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplate.id","title":"id","text":"<pre><code>id: CustomTemplateId = Field(alias='albertId')\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplate.category","title":"category","text":"<pre><code>category: TemplateCategory = Field(default=GENERAL)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplate.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] | None = Field(\n    default=None, alias=\"Metadata\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplate.data","title":"data","text":"<pre><code>data: CustomTemplateData | None = Field(\n    default=None, alias=\"Data\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplate.team","title":"team","text":"<pre><code>team: list[TeamACL] | None = Field(default_factory=list)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplate.acl","title":"acl","text":"<pre><code>acl: TemplateACL | None = Field(\n    default_factory=list, alias=\"ACL\"\n)\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplate.add_missing_category","title":"add_missing_category","text":"<pre><code>add_missing_category(\n    data: dict[str, Any],\n) -&gt; dict[str, Any]\n</code></pre> <p>Initialize private attributes from the incoming data dictionary before the model is fully constructed.</p> Source code in <code>src/albert/resources/custom_templates.py</code> <pre><code>@model_validator(mode=\"before\")  # Must happen before construction so the data are captured\n@classmethod\ndef add_missing_category(cls, data: dict[str, Any]) -&gt; dict[str, Any]:\n    \"\"\"\n    Initialize private attributes from the incoming data dictionary before the model is fully constructed.\n    \"\"\"\n\n    if \"Data\" in data and \"category\" in data and \"category\" not in data[\"Data\"]:\n        data[\"Data\"][\"category\"] = data[\"category\"]\n    return data\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemData","title":"CustomTemplateSearchItemData","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"DesignLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"type\": {\n          \"$ref\": \"#/$defs/DesignType\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"type\"\n      ],\n      \"title\": \"DesignLink\",\n      \"type\": \"object\"\n    },\n    \"DesignType\": {\n      \"description\": \"The type of Design\",\n      \"enum\": [\n        \"apps\",\n        \"products\",\n        \"results\",\n        \"process\"\n      ],\n      \"title\": \"DesignType\",\n      \"type\": \"string\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"Designs\": {\n      \"default\": null,\n      \"items\": {\n        \"$ref\": \"#/$defs/DesignLink\"\n      },\n      \"title\": \"Designs\",\n      \"type\": \"array\"\n    },\n    \"FormulaInfo\": {\n      \"items\": {},\n      \"title\": \"Formulainfo\",\n      \"type\": \"array\"\n    },\n    \"TaskRows\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/EntityLink\"\n      },\n      \"title\": \"Taskrows\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"CustomTemplateSearchItemData\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>designs</code>                 (<code>list[DesignLink]</code>)             </li> <li> <code>formula_info</code>                 (<code>list</code>)             </li> <li> <code>task_rows</code>                 (<code>list[EntityLink]</code>)             </li> </ul>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemData.designs","title":"designs","text":"<pre><code>designs: list[DesignLink] = None\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemData.formula_info","title":"formula_info","text":"<pre><code>formula_info: list\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemData.task_rows","title":"task_rows","text":"<pre><code>task_rows: list[EntityLink]\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemACL","title":"CustomTemplateSearchItemACL","text":"<p>               Bases: <code>ACL</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ACLType\": {\n      \"enum\": [\n        \"team\",\n        \"member\",\n        \"owner\",\n        \"viewer\"\n      ],\n      \"title\": \"ACLType\",\n      \"type\": \"string\"\n    },\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    },\n    \"UserClass\": {\n      \"description\": \"The ACL class level of the user\",\n      \"enum\": [\n        \"guest\",\n        \"standard\",\n        \"trusted\",\n        \"privileged\",\n        \"admin\"\n      ],\n      \"title\": \"UserClass\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"description\": \"The id of the user for which this ACL applies\",\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"fgc\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/AccessControlLevel\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"The Fine-Grain Control Level\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"userType\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/UserClass\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"type\": {\n      \"$ref\": \"#/$defs/ACLType\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"type\"\n  ],\n  \"title\": \"CustomTemplateSearchItemACL\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>fgc</code>                 (<code>AccessControlLevel | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>user_type</code>                 (<code>UserClass | None</code>)             </li> <li> <code>type</code>                 (<code>ACLType</code>)             </li> </ul>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemACL.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemACL.user_type","title":"user_type","text":"<pre><code>user_type: UserClass | None = None\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemACL.type","title":"type","text":"<pre><code>type: ACLType\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemTeam","title":"CustomTemplateSearchItemTeam","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ACLType\": {\n      \"enum\": [\n        \"team\",\n        \"member\",\n        \"owner\",\n        \"viewer\"\n      ],\n      \"title\": \"ACLType\",\n      \"type\": \"string\"\n    },\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/ACLType\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"fgc\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/AccessControlLevel\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"name\"\n  ],\n  \"title\": \"CustomTemplateSearchItemTeam\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>ACLType | None</code>)             </li> <li> <code>fgc</code>                 (<code>AccessControlLevel | None</code>)             </li> </ul>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemTeam.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemTeam.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemTeam.type","title":"type","text":"<pre><code>type: ACLType | None = None\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItemTeam.fgc","title":"fgc","text":"<pre><code>fgc: AccessControlLevel | None = None\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem","title":"CustomTemplateSearchItem","text":"<p>               Bases: <code>BaseAlbertModel</code>, <code>HydrationMixin[CustomTemplate]</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ACLType\": {\n      \"enum\": [\n        \"team\",\n        \"member\",\n        \"owner\",\n        \"viewer\"\n      ],\n      \"title\": \"ACLType\",\n      \"type\": \"string\"\n    },\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    },\n    \"CustomTemplateSearchItemACL\": {\n      \"properties\": {\n        \"id\": {\n          \"description\": \"The id of the user for which this ACL applies\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"fgc\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AccessControlLevel\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The Fine-Grain Control Level\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"userType\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UserClass\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"type\": {\n          \"$ref\": \"#/$defs/ACLType\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"type\"\n      ],\n      \"title\": \"CustomTemplateSearchItemACL\",\n      \"type\": \"object\"\n    },\n    \"CustomTemplateSearchItemData\": {\n      \"properties\": {\n        \"Designs\": {\n          \"default\": null,\n          \"items\": {\n            \"$ref\": \"#/$defs/DesignLink\"\n          },\n          \"title\": \"Designs\",\n          \"type\": \"array\"\n        },\n        \"FormulaInfo\": {\n          \"items\": {},\n          \"title\": \"Formulainfo\",\n          \"type\": \"array\"\n        },\n        \"TaskRows\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/EntityLink\"\n          },\n          \"title\": \"Taskrows\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"CustomTemplateSearchItemData\",\n      \"type\": \"object\"\n    },\n    \"CustomTemplateSearchItemTeam\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ACLType\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"fgc\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AccessControlLevel\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"name\"\n      ],\n      \"title\": \"CustomTemplateSearchItemTeam\",\n      \"type\": \"object\"\n    },\n    \"DesignLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"type\": {\n          \"$ref\": \"#/$defs/DesignType\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"type\"\n      ],\n      \"title\": \"DesignLink\",\n      \"type\": \"object\"\n    },\n    \"DesignType\": {\n      \"description\": \"The type of Design\",\n      \"enum\": [\n        \"apps\",\n        \"products\",\n        \"results\",\n        \"process\"\n      ],\n      \"title\": \"DesignType\",\n      \"type\": \"string\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"SecurityClass\": {\n      \"description\": \"The security class of a resource\",\n      \"enum\": [\n        \"shared\",\n        \"restricted\",\n        \"confidential\",\n        \"private\"\n      ],\n      \"title\": \"SecurityClass\",\n      \"type\": \"string\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"UserClass\": {\n      \"description\": \"The ACL class level of the user\",\n      \"enum\": [\n        \"guest\",\n        \"standard\",\n        \"trusted\",\n        \"privileged\",\n        \"admin\"\n      ],\n      \"title\": \"UserClass\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"createdByName\": {\n      \"title\": \"Createdbyname\",\n      \"type\": \"string\"\n    },\n    \"createdAt\": {\n      \"title\": \"Createdat\",\n      \"type\": \"string\"\n    },\n    \"category\": {\n      \"title\": \"Category\",\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Status\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"resourceClass\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/SecurityClass\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"data\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/CustomTemplateSearchItemData\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"acl\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/CustomTemplateSearchItemACL\"\n      },\n      \"title\": \"Acl\",\n      \"type\": \"array\"\n    },\n    \"team\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/CustomTemplateSearchItemTeam\"\n      },\n      \"title\": \"Team\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"albertId\",\n    \"createdByName\",\n    \"createdAt\",\n    \"category\",\n    \"acl\",\n    \"team\"\n  ],\n  \"title\": \"CustomTemplateSearchItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>_collection</code>                 (<code>BaseCollection | None</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>id</code>                 (<code>CustomTemplateId</code>)             </li> <li> <code>created_by_name</code>                 (<code>str</code>)             </li> <li> <code>created_at</code>                 (<code>str</code>)             </li> <li> <code>category</code>                 (<code>str</code>)             </li> <li> <code>status</code>                 (<code>Status | None</code>)             </li> <li> <code>resource_class</code>                 (<code>SecurityClass | None</code>)             </li> <li> <code>data</code>                 (<code>CustomTemplateSearchItemData | None</code>)             </li> <li> <code>acl</code>                 (<code>list[CustomTemplateSearchItemACL]</code>)             </li> <li> <code>team</code>                 (<code>list[CustomTemplateSearchItemTeam]</code>)             </li> </ul>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.id","title":"id","text":"<pre><code>id: CustomTemplateId\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.created_by_name","title":"created_by_name","text":"<pre><code>created_by_name: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.created_at","title":"created_at","text":"<pre><code>created_at: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.category","title":"category","text":"<pre><code>category: str\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.status","title":"status","text":"<pre><code>status: Status | None = None\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.resource_class","title":"resource_class","text":"<pre><code>resource_class: SecurityClass | None = None\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.data","title":"data","text":"<pre><code>data: CustomTemplateSearchItemData | None = None\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.acl","title":"acl","text":"<pre><code>acl: list[CustomTemplateSearchItemACL]\n</code></pre>"},{"location":"resources/custom_templates/#albert.resources.custom_templates.CustomTemplateSearchItem.team","title":"team","text":"<pre><code>team: list[CustomTemplateSearchItemTeam]\n</code></pre>"},{"location":"resources/data_columns/","title":"Data Columns","text":""},{"location":"resources/data_columns/#albert.resources.data_columns","title":"albert.resources.data_columns","text":""},{"location":"resources/data_columns/#albert.resources.data_columns.DataColumn","title":"DataColumn","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <code>defalt</code> <code>bool</code> <code>metadata</code> <code>dict[str, MetadataItem] | None</code> <code>id</code> <code>str</code>"},{"location":"resources/data_columns/#albert.resources.data_columns.DataColumn.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/data_columns/#albert.resources.data_columns.DataColumn.defalt","title":"defalt","text":"<pre><code>defalt: bool = False\n</code></pre>"},{"location":"resources/data_columns/#albert.resources.data_columns.DataColumn.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] | None = Field(\n    alias=\"Metadata\", default=None\n)\n</code></pre>"},{"location":"resources/data_columns/#albert.resources.data_columns.DataColumn.id","title":"id","text":"<pre><code>id: str = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/data_templates/","title":"Data Templates","text":""},{"location":"resources/data_templates/#albert.resources.data_templates","title":"albert.resources.data_templates","text":""},{"location":"resources/data_templates/#albert.resources.data_templates.CSVMapping","title":"CSVMapping","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"mapId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"examples\": \"Header1:DAC2900#Header2:DAC4707\",\n      \"title\": \"Mapid\"\n    },\n    \"mapData\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"examples\": {\n        \"Header1\": \"DAC2900\",\n        \"Header2\": \"DAC4707\"\n      },\n      \"title\": \"Mapdata\"\n    }\n  },\n  \"title\": \"CSVMapping\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>map_id</code>                 (<code>str | None</code>)             </li> <li> <code>map_data</code>                 (<code>dict[str, str] | None</code>)             </li> </ul>"},{"location":"resources/data_templates/#albert.resources.data_templates.CSVMapping.map_id","title":"map_id","text":"<pre><code>map_id: str | None = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.CSVMapping.map_data","title":"map_data","text":"<pre><code>map_data: dict[str, str] | None = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue","title":"DataColumnValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"DataColumn\": {\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"defalt\": {\n          \"default\": false,\n          \"title\": \"Defalt\",\n          \"type\": \"boolean\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"albertId\": {\n          \"default\": null,\n          \"title\": \"Albertid\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"DataColumn\",\n      \"type\": \"object\"\n    },\n    \"DataType\": {\n      \"enum\": [\n        \"number\",\n        \"string\",\n        \"enum\"\n      ],\n      \"title\": \"DataType\",\n      \"type\": \"string\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"EnumValidationValue\": {\n      \"description\": \"Represents a value for an enum type validation.\\n\\nAttributes\\n----------\\ntext : str\\n    The text of the enum value.\\nid : str | None\\n    The ID of the enum value. If not provided, the ID will be generated upon creation.\",\n      \"properties\": {\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"originalText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originaltext\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ],\n      \"title\": \"EnumValidationValue\",\n      \"type\": \"object\"\n    },\n    \"Operator\": {\n      \"enum\": [\n        \"between\",\n        \"lt\",\n        \"lte\",\n        \"gte\",\n        \"gt\",\n        \"eq\"\n      ],\n      \"title\": \"Operator\",\n      \"type\": \"string\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    },\n    \"ValueValidation\": {\n      \"properties\": {\n        \"datatype\": {\n          \"$ref\": \"#/$defs/DataType\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/EnumValidationValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Min\"\n        },\n        \"max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max\"\n        },\n        \"operator\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Operator\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"datatype\"\n      ],\n      \"title\": \"ValueValidation\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"data_column\": {\n      \"$ref\": \"#/$defs/DataColumn\",\n      \"default\": null\n    },\n    \"id\": {\n      \"default\": null,\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"hidden\": {\n      \"default\": false,\n      \"title\": \"Hidden\",\n      \"type\": \"boolean\"\n    },\n    \"Unit\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Unit\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    },\n    \"calculation\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Calculation\"\n    },\n    \"sequence\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sequence\"\n    },\n    \"validation\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ValueValidation\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Validation\"\n    }\n  },\n  \"title\": \"DataColumnValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data_column</code>                 (<code>DataColumn</code>)             </li> <li> <code>data_column_id</code>                 (<code>str</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> <li> <code>hidden</code>                 (<code>bool</code>)             </li> <li> <code>unit</code>                 (<code>SerializeAsEntityLink[Unit] | None</code>)             </li> <li> <code>calculation</code>                 (<code>str | None</code>)             </li> <li> <code>sequence</code>                 (<code>str | None</code>)             </li> <li> <code>validation</code>                 (<code>list[ValueValidation] | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>check_for_id</code> </li> </ul>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue.data_column","title":"data_column","text":"<pre><code>data_column: DataColumn = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue.data_column_id","title":"data_column_id","text":"<pre><code>data_column_id: str = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue.hidden","title":"hidden","text":"<pre><code>hidden: bool = False\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue.unit","title":"unit","text":"<pre><code>unit: SerializeAsEntityLink[Unit] | None = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue.calculation","title":"calculation","text":"<pre><code>calculation: str | None = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue.sequence","title":"sequence","text":"<pre><code>sequence: str | None = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue.validation","title":"validation","text":"<pre><code>validation: list[ValueValidation] | None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataColumnValue.check_for_id","title":"check_for_id","text":"<pre><code>check_for_id()\n</code></pre> Source code in <code>src/albert/resources/data_templates.py</code> <pre><code>@model_validator(mode=\"after\")\ndef check_for_id(self):\n    if self.data_column_id is None and self.data_column is None:\n        raise ValueError(\"Either data_column_id or data_column must be set\")\n    elif (\n        self.data_column_id is not None\n        and self.data_column is not None\n        and self.data_column.id != self.data_column_id\n    ):\n        raise ValueError(\"If both are provided, data_column_id and data_column.id must match\")\n    elif self.data_column_id is None:\n        self.data_column_id = self.data_column.id\n    return self\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate","title":"DataTemplate","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <code>id</code> <code>DataTemplateId | None</code> <code>description</code> <code>str | None</code> <code>security_class</code> <code>SecurityClass | None</code> <code>verified</code> <code>bool</code> <code>users_with_access</code> <code>list[SerializeAsEntityLink[User]] | None</code> <code>data_column_values</code> <code>list[DataColumnValue] | None</code> <code>parameter_values</code> <code>list[ParameterValue] | None</code> <code>deleted_parameters</code> <code>list[ParameterValue] | None</code> <code>metadata</code> <code>dict[str, MetadataItem] | None</code>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.id","title":"id","text":"<pre><code>id: DataTemplateId | None = Field(None, alias='albertId')\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.description","title":"description","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.security_class","title":"security_class","text":"<pre><code>security_class: SecurityClass | None = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.verified","title":"verified","text":"<pre><code>verified: bool = False\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.users_with_access","title":"users_with_access","text":"<pre><code>users_with_access: (\n    list[SerializeAsEntityLink[User]] | None\n) = Field(alias=\"ACL\", default=None)\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.data_column_values","title":"data_column_values","text":"<pre><code>data_column_values: list[DataColumnValue] | None = Field(\n    alias=\"DataColumns\", default=None\n)\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.parameter_values","title":"parameter_values","text":"<pre><code>parameter_values: list[ParameterValue] | None = Field(\n    alias=\"Parameters\", default=None\n)\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.deleted_parameters","title":"deleted_parameters","text":"<pre><code>deleted_parameters: list[ParameterValue] | None = Field(\n    alias=\"DeletedParameters\",\n    default=None,\n    frozen=True,\n    exclude=True,\n)\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplate.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] | None = Field(\n    default=None, alias=\"Metadata\"\n)\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplateSearchItemDataColumn","title":"DataTemplateSearchItemDataColumn","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"LocalizedNames\": {\n      \"properties\": {\n        \"de\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"De\"\n        },\n        \"ja\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Ja\"\n        },\n        \"zh\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Zh\"\n        },\n        \"es\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Es\"\n        }\n      },\n      \"title\": \"LocalizedNames\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"localizedNames\": {\n      \"$ref\": \"#/$defs/LocalizedNames\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"localizedNames\"\n  ],\n  \"title\": \"DataTemplateSearchItemDataColumn\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>localized_names</code>                 (<code>LocalizedNames</code>)             </li> </ul>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplateSearchItemDataColumn.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplateSearchItemDataColumn.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplateSearchItemDataColumn.localized_names","title":"localized_names","text":"<pre><code>localized_names: LocalizedNames\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplateSearchItem","title":"DataTemplateSearchItem","text":"<p>               Bases: <code>BaseAlbertModel</code>, <code>HydrationMixin[DataTemplate]</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"DataTemplateSearchItemDataColumn\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"localizedNames\": {\n          \"$ref\": \"#/$defs/LocalizedNames\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"localizedNames\"\n      ],\n      \"title\": \"DataTemplateSearchItemDataColumn\",\n      \"type\": \"object\"\n    },\n    \"LocalizedNames\": {\n      \"properties\": {\n        \"de\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"De\"\n        },\n        \"ja\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Ja\"\n        },\n        \"zh\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Zh\"\n        },\n        \"es\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Es\"\n        }\n      },\n      \"title\": \"LocalizedNames\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"dataColumns\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/DataTemplateSearchItemDataColumn\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Datacolumns\"\n    }\n  },\n  \"required\": [\n    \"albertId\",\n    \"name\"\n  ],\n  \"title\": \"DataTemplateSearchItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>_collection</code>                 (<code>BaseCollection | None</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>data_columns</code>                 (<code>list[DataTemplateSearchItemDataColumn] | None</code>)             </li> </ul>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplateSearchItem.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplateSearchItem.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/data_templates/#albert.resources.data_templates.DataTemplateSearchItem.data_columns","title":"data_columns","text":"<pre><code>data_columns: (\n    list[DataTemplateSearchItemDataColumn] | None\n) = None\n</code></pre>"},{"location":"resources/files/","title":"Files","text":""},{"location":"resources/files/#albert.resources.files","title":"albert.resources.files","text":""},{"location":"resources/files/#albert.resources.files.FileNamespace","title":"FileNamespace","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>AGENT</code> <code>BREAKTHROUGH</code> <code>PIPELINE</code> <code>PUBLIC</code> <code>RESULT</code> <code>SDS</code>"},{"location":"resources/files/#albert.resources.files.FileNamespace.AGENT","title":"AGENT","text":"<pre><code>AGENT = 'agent'\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileNamespace.BREAKTHROUGH","title":"BREAKTHROUGH","text":"<pre><code>BREAKTHROUGH = 'breakthrough'\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileNamespace.PIPELINE","title":"PIPELINE","text":"<pre><code>PIPELINE = 'pipeline'\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileNamespace.PUBLIC","title":"PUBLIC","text":"<pre><code>PUBLIC = 'public'\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileNamespace.RESULT","title":"RESULT","text":"<pre><code>RESULT = 'result'\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileNamespace.SDS","title":"SDS","text":"<pre><code>SDS = 'sds'\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileCategory","title":"FileCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>SDS</code> <code>OTHER</code>"},{"location":"resources/files/#albert.resources.files.FileCategory.SDS","title":"SDS","text":"<pre><code>SDS = 'SDS'\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileCategory.OTHER","title":"OTHER","text":"<pre><code>OTHER = 'Other'\n</code></pre>"},{"location":"resources/files/#albert.resources.files.SignURLPOSTFile","title":"SignURLPOSTFile","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"FileCategory\": {\n      \"enum\": [\n        \"SDS\",\n        \"Other\"\n      ],\n      \"title\": \"FileCategory\",\n      \"type\": \"string\"\n    },\n    \"FileNamespace\": {\n      \"enum\": [\n        \"agent\",\n        \"breakthrough\",\n        \"pipeline\",\n        \"public\",\n        \"result\",\n        \"sds\"\n      ],\n      \"title\": \"FileNamespace\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"namespace\": {\n      \"$ref\": \"#/$defs/FileNamespace\"\n    },\n    \"contentType\": {\n      \"title\": \"Contenttype\",\n      \"type\": \"string\"\n    },\n    \"metadata\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"additionalProperties\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Metadata\"\n    },\n    \"category\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/FileCategory\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"url\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Url\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"namespace\",\n    \"contentType\"\n  ],\n  \"title\": \"SignURLPOSTFile\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>namespace</code>                 (<code>FileNamespace</code>)             </li> <li> <code>content_type</code>                 (<code>str</code>)             </li> <li> <code>metadata</code>                 (<code>list[dict[str, str]] | None</code>)             </li> <li> <code>category</code>                 (<code>FileCategory | None</code>)             </li> <li> <code>url</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/files/#albert.resources.files.SignURLPOSTFile.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/files/#albert.resources.files.SignURLPOSTFile.namespace","title":"namespace","text":"<pre><code>namespace: FileNamespace\n</code></pre>"},{"location":"resources/files/#albert.resources.files.SignURLPOSTFile.content_type","title":"content_type","text":"<pre><code>content_type: str\n</code></pre>"},{"location":"resources/files/#albert.resources.files.SignURLPOSTFile.metadata","title":"metadata","text":"<pre><code>metadata: list[dict[str, str]] | None = None\n</code></pre>"},{"location":"resources/files/#albert.resources.files.SignURLPOSTFile.category","title":"category","text":"<pre><code>category: FileCategory | None = None\n</code></pre>"},{"location":"resources/files/#albert.resources.files.SignURLPOSTFile.url","title":"url","text":"<pre><code>url: str | None = None\n</code></pre>"},{"location":"resources/files/#albert.resources.files.SignURLPOST","title":"SignURLPOST","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"FileCategory\": {\n      \"enum\": [\n        \"SDS\",\n        \"Other\"\n      ],\n      \"title\": \"FileCategory\",\n      \"type\": \"string\"\n    },\n    \"FileNamespace\": {\n      \"enum\": [\n        \"agent\",\n        \"breakthrough\",\n        \"pipeline\",\n        \"public\",\n        \"result\",\n        \"sds\"\n      ],\n      \"title\": \"FileNamespace\",\n      \"type\": \"string\"\n    },\n    \"SignURLPOSTFile\": {\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"namespace\": {\n          \"$ref\": \"#/$defs/FileNamespace\"\n        },\n        \"contentType\": {\n          \"title\": \"Contenttype\",\n          \"type\": \"string\"\n        },\n        \"metadata\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"additionalProperties\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/FileCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"url\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Url\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"namespace\",\n        \"contentType\"\n      ],\n      \"title\": \"SignURLPOSTFile\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"files\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/SignURLPOSTFile\"\n      },\n      \"title\": \"Files\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"files\"\n  ],\n  \"title\": \"SignURLPOST\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>files</code>                 (<code>list[SignURLPOSTFile]</code>)             </li> </ul>"},{"location":"resources/files/#albert.resources.files.SignURLPOST.files","title":"files","text":"<pre><code>files: list[SignURLPOSTFile]\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileInfo","title":"FileInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"FileNamespace\": {\n      \"enum\": [\n        \"agent\",\n        \"breakthrough\",\n        \"pipeline\",\n        \"public\",\n        \"result\",\n        \"sds\"\n      ],\n      \"title\": \"FileNamespace\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"size\": {\n      \"title\": \"Size\",\n      \"type\": \"integer\"\n    },\n    \"etag\": {\n      \"title\": \"Etag\",\n      \"type\": \"string\"\n    },\n    \"namespace\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/FileNamespace\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"contentType\": {\n      \"title\": \"Contenttype\",\n      \"type\": \"string\"\n    },\n    \"lastModified\": {\n      \"format\": \"date-time\",\n      \"title\": \"Lastmodified\",\n      \"type\": \"string\"\n    },\n    \"metadata\": {\n      \"items\": {\n        \"additionalProperties\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"object\"\n      },\n      \"title\": \"Metadata\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"size\",\n    \"etag\",\n    \"contentType\",\n    \"lastModified\"\n  ],\n  \"title\": \"FileInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>size</code>                 (<code>int</code>)             </li> <li> <code>etag</code>                 (<code>str</code>)             </li> <li> <code>namespace</code>                 (<code>FileNamespace | None</code>)             </li> <li> <code>content_type</code>                 (<code>str</code>)             </li> <li> <code>last_modified</code>                 (<code>datetime</code>)             </li> <li> <code>metadata</code>                 (<code>list[dict[str, str]]</code>)             </li> </ul>"},{"location":"resources/files/#albert.resources.files.FileInfo.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileInfo.size","title":"size","text":"<pre><code>size: int\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileInfo.etag","title":"etag","text":"<pre><code>etag: str\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileInfo.namespace","title":"namespace","text":"<pre><code>namespace: FileNamespace | None = None\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileInfo.content_type","title":"content_type","text":"<pre><code>content_type: str\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileInfo.last_modified","title":"last_modified","text":"<pre><code>last_modified: datetime\n</code></pre>"},{"location":"resources/files/#albert.resources.files.FileInfo.metadata","title":"metadata","text":"<pre><code>metadata: list[dict[str, str]]\n</code></pre>"},{"location":"resources/hazards/","title":"Hazards","text":""},{"location":"resources/hazards/#albert.resources.hazards","title":"albert.resources.hazards","text":""},{"location":"resources/hazards/#albert.resources.hazards.HazardSymbol","title":"HazardSymbol","text":"<p>               Bases: <code>EntityLinkWithName</code></p> <p>Model representing a hazard symbol.</p> <p>Attributes:</p> Name Type Description <code>status</code> <code>Status | None</code>"},{"location":"resources/hazards/#albert.resources.hazards.HazardSymbol.status","title":"status","text":"<pre><code>status: Status | None = Field(default=None)\n</code></pre>"},{"location":"resources/hazards/#albert.resources.hazards.HazardStatement","title":"HazardStatement","text":"<p>               Bases: <code>EntityLinkWithName</code></p> <p>Model representing a hazard statement.</p>"},{"location":"resources/identifiers/","title":"Identifiers","text":""},{"location":"resources/identifiers/#albert.core.shared.identifiers","title":"albert.core.shared.identifiers","text":"<p>Functions:</p> Name Description <code>ensure_attachment_id</code> <code>ensure_block_id</code> <code>ensure_btinsight_id</code> <code>ensure_btdataset_id</code> <code>ensure_btmodel_id</code> <code>ensure_btmodel_session_id</code> <code>ensure_inventory_id</code> <code>ensure_search_inventory_id</code> <code>ensure_interval_id</code> <code>ensure_parameter_id</code> <code>ensure_paramter_group_id</code> <code>ensure_cas_id</code> <code>ensure_company_id</code> <code>ensure_custom_field_id</code> <code>ensure_custom_template_id</code> <code>ensure_entity_type_id</code> <code>ensure_data_column_id</code> <code>ensure_datatemplate_id</code> <code>ensure_propertydata_id</code> <code>ensure_task_id</code> <code>ensure_project_id</code> <code>ensure_project_search_id</code> <code>ensure_link_id</code> <code>ensure_lot_id</code> <code>ensure_notebook_id</code> <code>ensure_synthesis_id</code> <code>ensure_tag_id</code> <code>ensure_worksheet_id</code> <code>ensure_user_id</code> <code>ensure_unit_id</code> <code>ensure_workflow_id</code> <code>ensure_row_id</code> <code>ensure_report_id</code> <p>Attributes:</p> Name Type Description <code>AttachmentId</code> <code>BlockId</code> <code>BTInsightId</code> <code>BTDatasetId</code> <code>BTModelId</code> <code>BTModelSessionId</code> <code>InventoryId</code> <code>SearchInventoryId</code> <code>IntervalId</code> <code>ParameterId</code> <code>ParameterGroupId</code> <code>CasId</code> <code>CompanyId</code> <code>CustomFieldId</code> <code>CustomTemplateId</code> <code>EntityTypeId</code> <code>DataColumnId</code> <code>DataTemplateId</code> <code>PropertyDataId</code> <code>TaskId</code> <code>ProjectId</code> <code>SearchProjectId</code> <code>LinkId</code> <code>LotId</code> <code>NotebookId</code> <code>SynthesisId</code> <code>TagId</code> <code>WorksheetId</code> <code>UserId</code> <code>UnitId</code> <code>WorkflowId</code> <code>RowId</code> <code>ReportId</code>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.AttachmentId","title":"AttachmentId","text":"<pre><code>AttachmentId = Annotated[\n    str, AfterValidator(ensure_attachment_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.BlockId","title":"BlockId","text":"<pre><code>BlockId = Annotated[str, AfterValidator(ensure_block_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.BTInsightId","title":"BTInsightId","text":"<pre><code>BTInsightId = Annotated[\n    str, AfterValidator(ensure_btinsight_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.BTDatasetId","title":"BTDatasetId","text":"<pre><code>BTDatasetId = Annotated[\n    str, AfterValidator(ensure_btdataset_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.BTModelId","title":"BTModelId","text":"<pre><code>BTModelId = Annotated[\n    str, AfterValidator(ensure_btmodel_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.BTModelSessionId","title":"BTModelSessionId","text":"<pre><code>BTModelSessionId = Annotated[\n    str, AfterValidator(ensure_btmodel_session_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.InventoryId","title":"InventoryId","text":"<pre><code>InventoryId = Annotated[\n    str, AfterValidator(ensure_inventory_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.SearchInventoryId","title":"SearchInventoryId","text":"<pre><code>SearchInventoryId = Annotated[\n    str, AfterValidator(ensure_search_inventory_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.IntervalId","title":"IntervalId","text":"<pre><code>IntervalId = Annotated[\n    str, AfterValidator(ensure_interval_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ParameterId","title":"ParameterId","text":"<pre><code>ParameterId = Annotated[\n    str, AfterValidator(ensure_parameter_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ParameterGroupId","title":"ParameterGroupId","text":"<pre><code>ParameterGroupId = Annotated[\n    str, AfterValidator(ensure_paramter_group_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.CasId","title":"CasId","text":"<pre><code>CasId = Annotated[str, AfterValidator(ensure_cas_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.CompanyId","title":"CompanyId","text":"<pre><code>CompanyId = Annotated[\n    str, AfterValidator(ensure_company_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.CustomFieldId","title":"CustomFieldId","text":"<pre><code>CustomFieldId = Annotated[\n    str, AfterValidator(ensure_custom_field_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.CustomTemplateId","title":"CustomTemplateId","text":"<pre><code>CustomTemplateId = Annotated[\n    str, AfterValidator(ensure_custom_template_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.EntityTypeId","title":"EntityTypeId","text":"<pre><code>EntityTypeId = Annotated[\n    str, AfterValidator(ensure_entity_type_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.DataColumnId","title":"DataColumnId","text":"<pre><code>DataColumnId = Annotated[\n    str, AfterValidator(ensure_data_column_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.DataTemplateId","title":"DataTemplateId","text":"<pre><code>DataTemplateId = Annotated[\n    str, AfterValidator(ensure_datatemplate_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.PropertyDataId","title":"PropertyDataId","text":"<pre><code>PropertyDataId = Annotated[\n    str, AfterValidator(ensure_propertydata_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.TaskId","title":"TaskId","text":"<pre><code>TaskId = Annotated[str, AfterValidator(ensure_task_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ProjectId","title":"ProjectId","text":"<pre><code>ProjectId = Annotated[\n    str, AfterValidator(ensure_project_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.SearchProjectId","title":"SearchProjectId","text":"<pre><code>SearchProjectId = Annotated[\n    str, AfterValidator(ensure_project_search_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.LinkId","title":"LinkId","text":"<pre><code>LinkId = Annotated[str, AfterValidator(ensure_link_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.LotId","title":"LotId","text":"<pre><code>LotId = Annotated[str, AfterValidator(ensure_lot_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.NotebookId","title":"NotebookId","text":"<pre><code>NotebookId = Annotated[\n    str, AfterValidator(ensure_notebook_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.SynthesisId","title":"SynthesisId","text":"<pre><code>SynthesisId = Annotated[\n    str, AfterValidator(ensure_synthesis_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.TagId","title":"TagId","text":"<pre><code>TagId = Annotated[str, AfterValidator(ensure_tag_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.WorksheetId","title":"WorksheetId","text":"<pre><code>WorksheetId = Annotated[\n    str, AfterValidator(ensure_worksheet_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.UserId","title":"UserId","text":"<pre><code>UserId = Annotated[str, AfterValidator(ensure_user_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.UnitId","title":"UnitId","text":"<pre><code>UnitId = Annotated[str, AfterValidator(ensure_unit_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.WorkflowId","title":"WorkflowId","text":"<pre><code>WorkflowId = Annotated[\n    str, AfterValidator(ensure_workflow_id)\n]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.RowId","title":"RowId","text":"<pre><code>RowId = Annotated[str, AfterValidator(ensure_row_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ReportId","title":"ReportId","text":"<pre><code>ReportId = Annotated[str, AfterValidator(ensure_report_id)]\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_attachment_id","title":"ensure_attachment_id","text":"<pre><code>ensure_attachment_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_attachment_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"AttachmentId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_block_id","title":"ensure_block_id","text":"<pre><code>ensure_block_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_block_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"BlockId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_btinsight_id","title":"ensure_btinsight_id","text":"<pre><code>ensure_btinsight_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_btinsight_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"BTInsightId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_btdataset_id","title":"ensure_btdataset_id","text":"<pre><code>ensure_btdataset_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_btdataset_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"BTDatasetId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_btmodel_id","title":"ensure_btmodel_id","text":"<pre><code>ensure_btmodel_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_btmodel_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"BTModelId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_btmodel_session_id","title":"ensure_btmodel_session_id","text":"<pre><code>ensure_btmodel_session_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_btmodel_session_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"BTModelSessionId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_inventory_id","title":"ensure_inventory_id","text":"<pre><code>ensure_inventory_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_inventory_id(id: str) -&gt; str:\n    id = _validate_coded_id(id, \"InventoryId\")\n    return _ensure_albert_id(id, \"InventoryId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_search_inventory_id","title":"ensure_search_inventory_id","text":"<pre><code>ensure_search_inventory_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_search_inventory_id(id: str) -&gt; str:\n    id = _validate_coded_id(id, \"SearchInventoryId\")\n    if id.upper().startswith(\"INV\"):\n        id = id[3:]  # Remove INV prefix\n    return id\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_interval_id","title":"ensure_interval_id","text":"<pre><code>ensure_interval_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_interval_id(id: str) -&gt; str:\n    if not id:\n        raise ValueError(\"IntervalId cannot be empty\")\n\n    # Check if it matches ROW# or ROW#XROW# pattern\n    parts = id.upper().split(\"X\")\n    if len(parts) &gt; 2:\n        raise ValueError(f\"IntervalId {id} is invalid. Must be in format ROW# or ROW#XROW#\")\n\n    for part in parts:\n        if not part.startswith(\"ROW\") or not part[3:].isdigit():\n            raise ValueError(f\"IntervalId {id} is invalid. Must be in format ROW# or ROW#XROW#\")\n\n    return id.upper()\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_parameter_id","title":"ensure_parameter_id","text":"<pre><code>ensure_parameter_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_parameter_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"ParameterId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_paramter_group_id","title":"ensure_paramter_group_id","text":"<pre><code>ensure_paramter_group_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_paramter_group_id(id: str) -&gt; str:\n    if id and id.upper().startswith(\"PG\"):\n        id = f\"PRG{id[2:]}\"  # Replace PG with PRG\n    return _ensure_albert_id(id, \"ParameterGroupId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_cas_id","title":"ensure_cas_id","text":"<pre><code>ensure_cas_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_cas_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"CasId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_company_id","title":"ensure_company_id","text":"<pre><code>ensure_company_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_company_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"CompanyId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_custom_field_id","title":"ensure_custom_field_id","text":"<pre><code>ensure_custom_field_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_custom_field_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"CustomFieldId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_custom_template_id","title":"ensure_custom_template_id","text":"<pre><code>ensure_custom_template_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_custom_template_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"CustomTemplateId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_entity_type_id","title":"ensure_entity_type_id","text":"<pre><code>ensure_entity_type_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_entity_type_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"EntityTypeId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_data_column_id","title":"ensure_data_column_id","text":"<pre><code>ensure_data_column_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_data_column_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"DataColumnId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_datatemplate_id","title":"ensure_datatemplate_id","text":"<pre><code>ensure_datatemplate_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_datatemplate_id(id: str) -&gt; str:\n    if id and id.upper().startswith(\"DT\"):\n        id = f\"DAT{id[2:]}\"  # Replace DT with DAT\n    return _ensure_albert_id(id, \"DataTemplateId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_propertydata_id","title":"ensure_propertydata_id","text":"<pre><code>ensure_propertydata_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_propertydata_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"PropertyDataId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_task_id","title":"ensure_task_id","text":"<pre><code>ensure_task_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_task_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"TaskId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_project_id","title":"ensure_project_id","text":"<pre><code>ensure_project_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_project_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"ProjectId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_project_search_id","title":"ensure_project_search_id","text":"<pre><code>ensure_project_search_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_project_search_id(id: str) -&gt; str:\n    id = _validate_coded_id(id, \"ProjectSearchId\")\n    if id.upper().startswith(\"PRO\"):\n        id = id[3:]  # Remove PRO prefix\n    return id\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_link_id","title":"ensure_link_id","text":"<pre><code>ensure_link_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_link_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"LinkId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_lot_id","title":"ensure_lot_id","text":"<pre><code>ensure_lot_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_lot_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"LotId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_notebook_id","title":"ensure_notebook_id","text":"<pre><code>ensure_notebook_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_notebook_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"NotebookId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_synthesis_id","title":"ensure_synthesis_id","text":"<pre><code>ensure_synthesis_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_synthesis_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"SynthesisId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_tag_id","title":"ensure_tag_id","text":"<pre><code>ensure_tag_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_tag_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"TagId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_worksheet_id","title":"ensure_worksheet_id","text":"<pre><code>ensure_worksheet_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_worksheet_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"WorksheetId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_user_id","title":"ensure_user_id","text":"<pre><code>ensure_user_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_user_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"UserId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_unit_id","title":"ensure_unit_id","text":"<pre><code>ensure_unit_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_unit_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"UnitId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_workflow_id","title":"ensure_workflow_id","text":"<pre><code>ensure_workflow_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_workflow_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"WorkflowId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_row_id","title":"ensure_row_id","text":"<pre><code>ensure_row_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_row_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"RowId\")\n</code></pre>"},{"location":"resources/identifiers/#albert.core.shared.identifiers.ensure_report_id","title":"ensure_report_id","text":"<pre><code>ensure_report_id(id: str) -&gt; str\n</code></pre> Source code in <code>src/albert/core/shared/identifiers.py</code> <pre><code>def ensure_report_id(id: str) -&gt; str:\n    return _ensure_albert_id(id, \"ReportId\")\n</code></pre>"},{"location":"resources/inventory/","title":"Inventory","text":""},{"location":"resources/inventory/#albert.resources.inventory","title":"albert.resources.inventory","text":"<p>Attributes:</p> Name Type Description <code>ALL_MERGE_MODULES</code> <p>All modules selectable for inventory merge.</p>"},{"location":"resources/inventory/#albert.resources.inventory.ALL_MERGE_MODULES","title":"ALL_MERGE_MODULES","text":"<pre><code>ALL_MERGE_MODULES = [\n    \"PRICING\",\n    \"NOTES\",\n    \"SDS\",\n    \"PD\",\n    \"BD\",\n    \"LOT\",\n    \"CAS\",\n    \"TAS\",\n    \"WFL\",\n    \"PRG\",\n    \"PTD\",\n]\n</code></pre> <p>All modules selectable for inventory merge.</p>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryCategory","title":"InventoryCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>RAW_MATERIALS</code> <code>CONSUMABLES</code> <code>EQUIPMENT</code> <code>FORMULAS</code>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryCategory.RAW_MATERIALS","title":"RAW_MATERIALS","text":"<pre><code>RAW_MATERIALS = 'RawMaterials'\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryCategory.CONSUMABLES","title":"CONSUMABLES","text":"<pre><code>CONSUMABLES = 'Consumables'\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryCategory.EQUIPMENT","title":"EQUIPMENT","text":"<pre><code>EQUIPMENT = 'Equipment'\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryCategory.FORMULAS","title":"FORMULAS","text":"<pre><code>FORMULAS = 'Formulas'\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryUnitCategory","title":"InventoryUnitCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>MASS</code> <code>VOLUME</code> <code>LENGTH</code> <code>PRESSURE</code> <code>UNITS</code>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryUnitCategory.MASS","title":"MASS","text":"<pre><code>MASS = 'mass'\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryUnitCategory.VOLUME","title":"VOLUME","text":"<pre><code>VOLUME = 'volume'\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryUnitCategory.LENGTH","title":"LENGTH","text":"<pre><code>LENGTH = 'length'\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryUnitCategory.PRESSURE","title":"PRESSURE","text":"<pre><code>PRESSURE = 'pressure'\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryUnitCategory.UNITS","title":"UNITS","text":"<pre><code>UNITS = 'units'\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAuditFieldsWithEmail","title":"CasAuditFieldsWithEmail","text":"<p>               Bases: <code>AuditFields</code></p> <p>The audit fields for a CAS resource with email</p> <p>Attributes:</p> Name Type Description <code>email</code> <code>str | None</code>"},{"location":"resources/inventory/#albert.resources.inventory.CasAuditFieldsWithEmail.email","title":"email","text":"<pre><code>email: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount","title":"CasAmount","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>CasAmount is a Pydantic model representing an amount of a given CAS.</p> <p>Attributes:</p> Name Type Description <code>min</code> <code>float</code> <p>The minimum amount of the CAS in the formulation.</p> <code>max</code> <code>float</code> <p>The maximum amount of the CAS in the formulation.</p> <code>target</code> <code>float | None</code> <p>The inventory value or target of the CAS in the formulation.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the CAS Number Resource this amount represents. Provide either a Cas or an ID.</p> <code>cas</code> <code>Cas | None</code> <p>The CAS object associated with this amount. Provide either a Cas or an id.</p> <code>cas_smiles</code> <code>str | None</code> <p>The SMILES string of the CAS Number resource. Obtained from the Cas object when provided.</p> <code>number</code> <code>str | None</code> <p>The CAS number. Obtained from the Cas object when provided.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"Cas\": {\n      \"description\": \"Represents a CAS entity.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"number\": {\n          \"description\": \"The CAS number.\",\n          \"title\": \"Number\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Name of the CAS.\",\n          \"title\": \"Name\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The description or name of the CAS.\",\n          \"title\": \"Description\"\n        },\n        \"notes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Notes related to the CAS.\",\n          \"title\": \"Notes\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CasCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The category of the CAS.\"\n        },\n        \"casSmiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS SMILES notation.\",\n          \"title\": \"Cassmiles\"\n        },\n        \"inchiKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"InChIKey of the CAS.\",\n          \"title\": \"Inchikey\"\n        },\n        \"iUpacName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"IUPAC name of the CAS.\",\n          \"title\": \"Iupacname\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The AlbertID of the CAS.\",\n          \"title\": \"Albertid\"\n        },\n        \"hazards\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Hazard\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazards associated with the CAS.\",\n          \"title\": \"Hazards\"\n        },\n        \"wgk\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"German Water Hazard Class (WGK) number.\",\n          \"title\": \"Wgk\"\n        },\n        \"ecListNo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"European Community (EC) number.\",\n          \"title\": \"Eclistno\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Type of the CAS.\",\n          \"title\": \"Type\"\n        },\n        \"classificationType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Classification type of the CAS.\",\n          \"title\": \"Classificationtype\"\n        },\n        \"order\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS order.\",\n          \"title\": \"Order\"\n        },\n        \"Metadata\": {\n          \"additionalProperties\": {\n            \"anyOf\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              },\n              {\n                \"items\": {\n                  \"$ref\": \"#/$defs/EntityLink\"\n                },\n                \"type\": \"array\"\n              }\n            ]\n          },\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        }\n      },\n      \"required\": [\n        \"number\"\n      ],\n      \"title\": \"Cas\",\n      \"type\": \"object\"\n    },\n    \"CasAuditFieldsWithEmail\": {\n      \"description\": \"The audit fields for a CAS resource with email\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        },\n        \"email\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Email\"\n        }\n      },\n      \"title\": \"CasAuditFieldsWithEmail\",\n      \"type\": \"object\"\n    },\n    \"CasCategory\": {\n      \"enum\": [\n        \"User\",\n        \"Verisk\",\n        \"TSCA - Public\",\n        \"TSCA - Private\",\n        \"not TSCA\",\n        \"CAS linked to External Database\",\n        \"Unknown (Trade Secret)\",\n        \"CL_Inventory Upload\"\n      ],\n      \"title\": \"CasCategory\",\n      \"type\": \"string\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"Hazard\": {\n      \"description\": \"Represents a chemical hazard.\",\n      \"properties\": {\n        \"subCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard subcategory\",\n          \"title\": \"Subcategory\"\n        },\n        \"hCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code\",\n          \"title\": \"Hcode\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard category\",\n          \"title\": \"Category\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard classification\",\n          \"title\": \"Class\"\n        },\n        \"hCodeText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code text\",\n          \"title\": \"Hcodetext\"\n        }\n      },\n      \"title\": \"Hazard\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"CasAmount is a Pydantic model representing an amount of a given CAS.\\n\\nAttributes\\n----------\\nmin : float\\n    The minimum amount of the CAS in the formulation.\\nmax : float\\n    The maximum amount of the CAS in the formulation.\\ntarget: float | None\\n    The inventory value or target of the CAS in the formulation.\\nid : str | None\\n    The Albert ID of the CAS Number Resource this amount represents. Provide either a Cas or an ID.\\ncas : Cas | None\\n    The CAS object associated with this amount. Provide either a Cas or an id.\\ncas_smiles: str | None\\n    The SMILES string of the CAS Number resource. Obtained from the Cas object when provided.\\nnumber: str | None\\n    The CAS number. Obtained from the Cas object when provided.\",\n  \"properties\": {\n    \"min\": {\n      \"title\": \"Min\",\n      \"type\": \"number\"\n    },\n    \"max\": {\n      \"title\": \"Max\",\n      \"type\": \"number\"\n    },\n    \"inventoryValue\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Inventoryvalue\"\n    },\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"casCategory\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cascategory\"\n    },\n    \"cas\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Cas\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"casSmiles\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cassmiles\"\n    },\n    \"number\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Number\"\n    },\n    \"Created\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/AuditFields\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"Updated\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/CasAuditFieldsWithEmail\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"required\": [\n    \"min\",\n    \"max\"\n  ],\n  \"title\": \"CasAmount\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>min</code>                 (<code>float</code>)             </li> <li> <code>max</code>                 (<code>float</code>)             </li> <li> <code>target</code>                 (<code>float | None</code>)             </li> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>cas_category</code>                 (<code>str | None</code>)             </li> <li> <code>cas</code>                 (<code>Cas | None</code>)             </li> <li> <code>cas_smiles</code>                 (<code>str | None</code>)             </li> <li> <code>number</code>                 (<code>str | None</code>)             </li> <li> <code>created</code>                 (<code>AuditFields | None</code>)             </li> <li> <code>updated</code>                 (<code>CasAuditFieldsWithEmail | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>set_cas_attributes</code> </li> </ul>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.min","title":"min","text":"<pre><code>min: float\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.max","title":"max","text":"<pre><code>max: float\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.target","title":"target","text":"<pre><code>target: float | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.cas_category","title":"cas_category","text":"<pre><code>cas_category: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.cas","title":"cas","text":"<pre><code>cas: Cas | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.cas_smiles","title":"cas_smiles","text":"<pre><code>cas_smiles: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.number","title":"number","text":"<pre><code>number: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.created","title":"created","text":"<pre><code>created: AuditFields | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.updated","title":"updated","text":"<pre><code>updated: CasAuditFieldsWithEmail | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.CasAmount.set_cas_attributes","title":"set_cas_attributes","text":"<pre><code>set_cas_attributes() -&gt; CasAmount\n</code></pre> <p>Set attributes after model initialization from the Cas object, if provided.</p> Source code in <code>src/albert/resources/inventory.py</code> <pre><code>@model_validator(mode=\"after\")\ndef set_cas_attributes(self: \"CasAmount\") -&gt; \"CasAmount\":\n    \"\"\"Set attributes after model initialization from the Cas object, if provided.\"\"\"\n    if self.cas is not None:\n        object.__setattr__(self, \"id\", self.cas.id)\n        object.__setattr__(self, \"cas_smiles\", self.cas.smiles)\n        object.__setattr__(self, \"number\", self.cas.number)\n    return self\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryMinimum","title":"InventoryMinimum","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Defined the minimum amount of an InventoryItem that must be kept in stock at a given Location.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The unique identifier of the Location object associated with this InventoryMinimum. Provide either a Location or a location id.</p> <code>location</code> <code>Location</code> <p>The Location object associated with this InventoryMinimum. Provide either a Location or a location id.</p> <code>minimum</code> <code>float</code> <p>The minimum amount of the InventoryItem that must be kept in stock at the given Location.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"Location\": {\n      \"description\": \"A location in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the location.\\nid : str | None\\n    The Albert ID of the location. Set when the location is retrieved from Albert.\\nlatitude : float\\n    The latitude of the location.\\nlongitude : float\\n    The longitude of the location.\\naddress : str\\n    The address of the location.\\ncountry : str | None\\n    The country code of the location. Must be two characters long.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"latitude\": {\n          \"title\": \"Latitude\",\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"title\": \"Longitude\",\n          \"type\": \"number\"\n        },\n        \"address\": {\n          \"title\": \"Address\",\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"anyOf\": [\n            {\n              \"maxLength\": 2,\n              \"minLength\": 2,\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Country\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"latitude\",\n        \"longitude\",\n        \"address\"\n      ],\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Defined the minimum amount of an InventoryItem that must be kept in stock at a given Location.\\n\\nAttributes\\n----------\\nid : str\\n    The unique identifier of the Location object associated with this InventoryMinimum.\\n    Provide either a Location or a location id.\\nlocation : Location\\n    The Location object associated with this InventoryMinimum. Provide either a Location or a location id.\\nminimum : float\\n    The minimum amount of the InventoryItem that must be kept in stock at the given Location.\",\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"location\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Location\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"minimum\": {\n      \"maximum\": 1000000000000000,\n      \"minimum\": 0,\n      \"title\": \"Minimum\",\n      \"type\": \"number\"\n    }\n  },\n  \"required\": [\n    \"minimum\"\n  ],\n  \"title\": \"InventoryMinimum\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>location</code>                 (<code>Location | None</code>)             </li> <li> <code>minimum</code>                 (<code>float</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>check_id_or_location</code> </li> </ul>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryMinimum.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryMinimum.location","title":"location","text":"<pre><code>location: Location | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryMinimum.minimum","title":"minimum","text":"<pre><code>minimum: float\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryMinimum.check_id_or_location","title":"check_id_or_location","text":"<pre><code>check_id_or_location() -&gt; InventoryMinimum\n</code></pre> <p>Ensure that either an id or a location is provided.</p> Source code in <code>src/albert/resources/inventory.py</code> <pre><code>@model_validator(mode=\"after\")\ndef check_id_or_location(self: \"InventoryMinimum\") -&gt; \"InventoryMinimum\":\n    \"\"\"\n    Ensure that either an id or a location is provided.\n    \"\"\"\n    if self.id is None and self.location is None:\n        raise ValueError(\n            \"Either an id or a location must be provided for an InventoryMinimum.\"\n        )\n    if self.id and self.location and self.location.id != self.id:\n        raise ValueError(\n            \"Only an id or a location can be provided for an InventoryMinimum, not both.\"\n        )\n\n    elif self.location:\n        # Avoid recursion by setting the attribute directly\n        object.__setattr__(self, \"id\", self.location.id)\n        object.__setattr__(self, \"name\", self.location.name)\n\n    return self\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem","title":"InventoryItem","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>An InventoryItem is a Pydantic model representing an item in the inventory. Can be a raw material, consumable, equipment, or formula. Note: Formulas should be registered via the Worksheet collection / Sheet resource.</p> <p>Returns:</p> Type Description <code>InventoryItem</code> <p>An InventoryItem that can be used to represent an item in the inventory. Can be a raw material, consumable, equipment, or formula.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the InventoryItem.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the InventoryItem. Set when the InventoryItem is retrieved from Albert.</p> <code>description</code> <code>str | None</code> <p>The description of the InventoryItem.</p> <code>category</code> <code>InventoryCategory</code> <p>The category of the InventoryItem. Allowed values are <code>RawMaterials</code>, <code>Consumables</code>, <code>Equipment</code>, and <code>Formulas</code>.</p> <code>unit_category</code> <code>InventoryUnitCategory</code> <p>The unit category of the InventoryItem. Can be mass, volume, length, pressure, or units. By default, mass is used for RawMaterials and Formulas, and units is used for Equipment and Consumables.</p> <code>security_class</code> <code>SecurityClass | None</code> <p>The security class of the InventoryItem. Optional. Can be confidential, shared, or restricted.</p> <code>company</code> <code>Company | str | None</code> <p>The company associated with the InventoryItem. Can be a Company object or a string. If a String is provided, a Company object with the name of the provided string will be first-or-created.</p> <code>minimum</code> <code>list[InventoryMinimum] | None</code> <p>The minimum amount of the InventoryItem that must be kept in stock at a given Location. Optional.</p> <code>alias</code> <code>str | None</code> <p>An alias for the InventoryItem. Optional.</p> <code>cas</code> <code>list[CasAmount] | None</code> <p>The CAS numbers associated with the InventoryItem. This is how a compositional breakdown can be provided. Optional.</p> <code>metadata</code> <code>dict[str, str | list[EntityLink] | EntityLink] | None</code> <p>Metadata associated with the InventoryItem. Optional. Allowed metadata fields can be found in the CustomFields documentation.</p> <code>project_id</code> <code>str | None</code> <p>The project ID associated with the InventoryItem. Read Only. Required for Formulas.</p> <code>formula_id</code> <code>str | None</code> <p>The formula ID associated with the InventoryItem. Read Only.</p> <code>tags</code> <code>list[str | Tag] | None</code> <p>The tags associated with the InventoryItem. Optional. If a string is provided, a Tag object with the name of the provided string will be first-or-created.</p> <p>Methods:</p> Name Description <code>validate_company_string</code> <code>validate_un_number</code> <code>set_unit_category</code> <p>Set unit category from category if not defined.</p> <code>validate_formula_fields</code> <p>Ensure required fields are present for formulas.</p>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.id","title":"id","text":"<pre><code>id: str | None = Field(None, alias='albertId')\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.description","title":"description","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.category","title":"category","text":"<pre><code>category: InventoryCategory\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.unit_category","title":"unit_category","text":"<pre><code>unit_category: InventoryUnitCategory | None = Field(\n    default=None, alias=\"unitCategory\"\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.security_class","title":"security_class","text":"<pre><code>security_class: SecurityClass | None = Field(\n    default=None, alias=\"class\"\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.company","title":"company","text":"<pre><code>company: SerializeAsEntityLink[Company] | None = Field(\n    default=None, alias=\"Company\"\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.minimum","title":"minimum","text":"<pre><code>minimum: list[InventoryMinimum] | None = Field(default=None)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.alias","title":"alias","text":"<pre><code>alias: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.cas","title":"cas","text":"<pre><code>cas: list[CasAmount] | None = Field(\n    default=None, alias=\"Cas\"\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] | None = Field(\n    alias=\"Metadata\", default=None\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.project_id","title":"project_id","text":"<pre><code>project_id: str | None = Field(\n    default=None, alias=\"parentId\"\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.acls","title":"acls","text":"<pre><code>acls: list[ACL] = Field(default_factory=list, alias='ACL')\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.task_config","title":"task_config","text":"<pre><code>task_config: list[dict] | None = Field(\n    default=None,\n    alias=\"TaskConfig\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.formula_id","title":"formula_id","text":"<pre><code>formula_id: str | None = Field(\n    default=None,\n    alias=\"formulaId\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.symbols","title":"symbols","text":"<pre><code>symbols: list[dict] | None = Field(\n    default=None, alias=\"Symbols\", exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.un_number","title":"un_number","text":"<pre><code>un_number: str | None = Field(\n    default=None,\n    alias=\"unNumber\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.recent_atachment_id","title":"recent_atachment_id","text":"<pre><code>recent_atachment_id: str | None = Field(\n    default=None,\n    alias=\"recentAttachmentId\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.validate_company_string","title":"validate_company_string","text":"<pre><code>validate_company_string(value: Any) -&gt; Any\n</code></pre> Source code in <code>src/albert/resources/inventory.py</code> <pre><code>@field_validator(\"company\", mode=\"before\")\n@classmethod\ndef validate_company_string(cls, value: Any) -&gt; Any:\n    if isinstance(value, str):\n        value = Company(name=value)\n    return value\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.validate_un_number","title":"validate_un_number","text":"<pre><code>validate_un_number(value: Any) -&gt; Any\n</code></pre> Source code in <code>src/albert/resources/inventory.py</code> <pre><code>@field_validator(\"un_number\", mode=\"before\")\n@classmethod\ndef validate_un_number(cls, value: Any) -&gt; Any:\n    if value == \"N/A\":\n        value = None\n    return value\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.set_unit_category","title":"set_unit_category","text":"<pre><code>set_unit_category() -&gt; InventoryItem\n</code></pre> <p>Set unit category from category if not defined.</p> Source code in <code>src/albert/resources/inventory.py</code> <pre><code>@model_validator(mode=\"after\")\ndef set_unit_category(self) -&gt; \"InventoryItem\":\n    \"\"\"Set unit category from category if not defined.\"\"\"\n    if self.unit_category is None:\n        if self.category in [InventoryCategory.RAW_MATERIALS, InventoryCategory.FORMULAS]:\n            object.__setattr__(self, \"unit_category\", InventoryUnitCategory.MASS)\n        elif self.category in [InventoryCategory.EQUIPMENT, InventoryCategory.CONSUMABLES]:\n            object.__setattr__(self, \"unit_category\", InventoryUnitCategory.UNITS)\n    return self\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventoryItem.validate_formula_fields","title":"validate_formula_fields","text":"<pre><code>validate_formula_fields() -&gt; InventoryItem\n</code></pre> <p>Ensure required fields are present for formulas.</p> Source code in <code>src/albert/resources/inventory.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_formula_fields(self) -&gt; \"InventoryItem\":\n    \"\"\"Ensure required fields are present for formulas.\"\"\"\n    if self.category == InventoryCategory.FORMULAS and not self.project_id and not self.id:\n        # Some legacy on platform formulas don't have a project_id so check if its already on platform\n        raise ValueError(\"A project_id must be supplied for all formulas.\")\n    return self\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpecValue","title":"InventorySpecValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"min\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Min\"\n    },\n    \"max\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Max\"\n    },\n    \"reference\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Reference\"\n    },\n    \"comparisonOperator\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Comparisonoperator\"\n    }\n  },\n  \"title\": \"InventorySpecValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>min</code>                 (<code>str | None</code>)             </li> <li> <code>max</code>                 (<code>str | None</code>)             </li> <li> <code>reference</code>                 (<code>str | None</code>)             </li> <li> <code>comparison_operator</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpecValue.min","title":"min","text":"<pre><code>min: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpecValue.max","title":"max","text":"<pre><code>max: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpecValue.reference","title":"reference","text":"<pre><code>reference: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpecValue.comparison_operator","title":"comparison_operator","text":"<pre><code>comparison_operator: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec","title":"InventorySpec","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"InventorySpecValue\": {\n      \"properties\": {\n        \"min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Min\"\n        },\n        \"max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max\"\n        },\n        \"reference\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Reference\"\n        },\n        \"comparisonOperator\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Comparisonoperator\"\n        }\n      },\n      \"title\": \"InventorySpecValue\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Albertid\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"datacolumnId\": {\n      \"title\": \"Datacolumnid\",\n      \"type\": \"string\"\n    },\n    \"datacolumnName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Datacolumnname\"\n    },\n    \"datatemplateId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Datatemplateid\"\n    },\n    \"datatemplateName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Datatemplatename\"\n    },\n    \"unitId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unitid\"\n    },\n    \"unitName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unitname\"\n    },\n    \"workflowId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Workflowid\"\n    },\n    \"workflowName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Workflowname\"\n    },\n    \"specConfig\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Specconfig\"\n    },\n    \"Value\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/InventorySpecValue\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"datacolumnId\"\n  ],\n  \"title\": \"InventorySpec\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>data_column_id</code>                 (<code>str</code>)             </li> <li> <code>data_column_name</code>                 (<code>str | None</code>)             </li> <li> <code>data_template_id</code>                 (<code>str | None</code>)             </li> <li> <code>data_template_name</code>                 (<code>str | None</code>)             </li> <li> <code>unit_id</code>                 (<code>str | None</code>)             </li> <li> <code>unit_name</code>                 (<code>str | None</code>)             </li> <li> <code>workflow_id</code>                 (<code>str | None</code>)             </li> <li> <code>workflow_name</code>                 (<code>str | None</code>)             </li> <li> <code>spec_config</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>InventorySpecValue | None</code>)             </li> </ul>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.data_column_id","title":"data_column_id","text":"<pre><code>data_column_id: str\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.data_column_name","title":"data_column_name","text":"<pre><code>data_column_name: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.data_template_id","title":"data_template_id","text":"<pre><code>data_template_id: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.data_template_name","title":"data_template_name","text":"<pre><code>data_template_name: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.unit_id","title":"unit_id","text":"<pre><code>unit_id: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.unit_name","title":"unit_name","text":"<pre><code>unit_name: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.workflow_id","title":"workflow_id","text":"<pre><code>workflow_id: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.workflow_name","title":"workflow_name","text":"<pre><code>workflow_name: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.spec_config","title":"spec_config","text":"<pre><code>spec_config: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpec.value","title":"value","text":"<pre><code>value: InventorySpecValue | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpecList","title":"InventorySpecList","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"InventorySpec\": {\n      \"properties\": {\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"datacolumnId\": {\n          \"title\": \"Datacolumnid\",\n          \"type\": \"string\"\n        },\n        \"datacolumnName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumnname\"\n        },\n        \"datatemplateId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datatemplateid\"\n        },\n        \"datatemplateName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datatemplatename\"\n        },\n        \"unitId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unitid\"\n        },\n        \"unitName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unitname\"\n        },\n        \"workflowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Workflowid\"\n        },\n        \"workflowName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Workflowname\"\n        },\n        \"specConfig\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Specconfig\"\n        },\n        \"Value\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/InventorySpecValue\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"datacolumnId\"\n      ],\n      \"title\": \"InventorySpec\",\n      \"type\": \"object\"\n    },\n    \"InventorySpecValue\": {\n      \"properties\": {\n        \"min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Min\"\n        },\n        \"max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max\"\n        },\n        \"reference\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Reference\"\n        },\n        \"comparisonOperator\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Comparisonoperator\"\n        }\n      },\n      \"title\": \"InventorySpecValue\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"parentId\": {\n      \"title\": \"Parentid\",\n      \"type\": \"string\"\n    },\n    \"Specs\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/InventorySpec\"\n      },\n      \"title\": \"Specs\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"parentId\",\n    \"Specs\"\n  ],\n  \"title\": \"InventorySpecList\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>parent_id</code>                 (<code>str</code>)             </li> <li> <code>specs</code>                 (<code>list[InventorySpec]</code>)             </li> </ul>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpecList.parent_id","title":"parent_id","text":"<pre><code>parent_id: str\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySpecList.specs","title":"specs","text":"<pre><code>specs: list[InventorySpec]\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchPictogramItem","title":"InventorySearchPictogramItem","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Status\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"name\"\n  ],\n  \"title\": \"InventorySearchPictogramItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>status</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchPictogramItem.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchPictogramItem.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchPictogramItem.status","title":"status","text":"<pre><code>status: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchSDSItem","title":"InventorySearchSDSItem","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"unNumber\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unnumber\"\n    },\n    \"storageClassName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Storageclassname\"\n    },\n    \"shippingDescription\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Shippingdescription\"\n    },\n    \"storageClassNumber\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Storageclassnumber\"\n    },\n    \"unClassification\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unclassification\"\n    }\n  },\n  \"title\": \"InventorySearchSDSItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>un_number</code>                 (<code>str | None</code>)             </li> <li> <code>storage_class_name</code>                 (<code>str | None</code>)             </li> <li> <code>shipping_description</code>                 (<code>str | None</code>)             </li> <li> <code>storage_class_number</code>                 (<code>str | None</code>)             </li> <li> <code>un_classification</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchSDSItem.un_number","title":"un_number","text":"<pre><code>un_number: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchSDSItem.storage_class_name","title":"storage_class_name","text":"<pre><code>storage_class_name: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchSDSItem.shipping_description","title":"shipping_description","text":"<pre><code>shipping_description: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchSDSItem.storage_class_number","title":"storage_class_number","text":"<pre><code>storage_class_number: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchSDSItem.un_classification","title":"un_classification","text":"<pre><code>un_classification: str | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem","title":"InventorySearchItem","text":"<p>               Bases: <code>BaseAlbertModel</code>, <code>HydrationMixin[InventoryItem]</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"InventoryCategory\": {\n      \"enum\": [\n        \"RawMaterials\",\n        \"Consumables\",\n        \"Equipment\",\n        \"Formulas\"\n      ],\n      \"title\": \"InventoryCategory\",\n      \"type\": \"string\"\n    },\n    \"InventorySearchPictogramItem\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Status\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"name\"\n      ],\n      \"title\": \"InventorySearchPictogramItem\",\n      \"type\": \"object\"\n    },\n    \"InventorySearchSDSItem\": {\n      \"properties\": {\n        \"unNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unnumber\"\n        },\n        \"storageClassName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Storageclassname\"\n        },\n        \"shippingDescription\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Shippingdescription\"\n        },\n        \"storageClassNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Storageclassnumber\"\n        },\n        \"unClassification\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unclassification\"\n        }\n      },\n      \"title\": \"InventorySearchSDSItem\",\n      \"type\": \"object\"\n    },\n    \"InventoryUnitCategory\": {\n      \"enum\": [\n        \"mass\",\n        \"volume\",\n        \"length\",\n        \"pressure\",\n        \"units\"\n      ],\n      \"title\": \"InventoryUnitCategory\",\n      \"type\": \"string\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Tag\": {\n      \"description\": \"Tag is a Pydantic model representing a tag entity.\\n\\nAttributes\\n----------\\ntag : str\\n    The name of the tag.\\nid : str | None\\n    The Albert ID of the tag. Set when the tag is retrieved from Albert.\\n\\nMethods\\n-------\\nfrom_string(tag: str) -&gt; \\\"Tag\\\"\\n    Creates a Tag object from a string.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Tag\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"default\": \"\",\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"description\": {\n      \"default\": \"\",\n      \"title\": \"Description\",\n      \"type\": \"string\"\n    },\n    \"category\": {\n      \"$ref\": \"#/$defs/InventoryCategory\"\n    },\n    \"unit\": {\n      \"$ref\": \"#/$defs/InventoryUnitCategory\"\n    },\n    \"lots\": {\n      \"items\": {\n        \"additionalProperties\": true,\n        \"type\": \"object\"\n      },\n      \"title\": \"Lots\",\n      \"type\": \"array\"\n    },\n    \"tags\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Tag\"\n      },\n      \"title\": \"Tags\",\n      \"type\": \"array\"\n    },\n    \"pictogram\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/InventorySearchPictogramItem\"\n      },\n      \"title\": \"Pictogram\",\n      \"type\": \"array\"\n    },\n    \"inventoryOnHand\": {\n      \"default\": 0.0,\n      \"title\": \"Inventoryonhand\",\n      \"type\": \"number\"\n    },\n    \"SDS\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/InventorySearchSDSItem\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"required\": [\n    \"albertId\",\n    \"category\",\n    \"unit\"\n  ],\n  \"title\": \"InventorySearchItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>_collection</code>                 (<code>BaseCollection | None</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>category</code>                 (<code>InventoryCategory</code>)             </li> <li> <code>unit</code>                 (<code>InventoryUnitCategory</code>)             </li> <li> <code>lots</code>                 (<code>list[dict[str, Any]]</code>)             </li> <li> <code>tags</code>                 (<code>list[Tag]</code>)             </li> <li> <code>pictogram</code>                 (<code>list[InventorySearchPictogramItem]</code>)             </li> <li> <code>inventory_on_hand</code>                 (<code>float</code>)             </li> <li> <code>sds</code>                 (<code>InventorySearchSDSItem | None</code>)             </li> </ul>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.name","title":"name","text":"<pre><code>name: str = ''\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.description","title":"description","text":"<pre><code>description: str = ''\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.category","title":"category","text":"<pre><code>category: InventoryCategory\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.unit","title":"unit","text":"<pre><code>unit: InventoryUnitCategory\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.lots","title":"lots","text":"<pre><code>lots: list[dict[str, Any]]\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.tags","title":"tags","text":"<pre><code>tags: list[Tag]\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.pictogram","title":"pictogram","text":"<pre><code>pictogram: list[InventorySearchPictogramItem]\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.inventory_on_hand","title":"inventory_on_hand","text":"<pre><code>inventory_on_hand: float = 0.0\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.InventorySearchItem.sds","title":"sds","text":"<pre><code>sds: InventorySearchSDSItem | None = None\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.MergeInventory","title":"MergeInventory","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"parentId\": {\n      \"title\": \"Parentid\",\n      \"type\": \"string\"\n    },\n    \"ChildInventories\": {\n      \"items\": {\n        \"additionalProperties\": {\n          \"type\": \"string\"\n        },\n        \"type\": \"object\"\n      },\n      \"title\": \"Childinventories\",\n      \"type\": \"array\"\n    },\n    \"modules\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Modules\"\n    }\n  },\n  \"required\": [\n    \"parentId\",\n    \"ChildInventories\"\n  ],\n  \"title\": \"MergeInventory\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>parent_id</code>                 (<code>InventoryId</code>)             </li> <li> <code>child_inventories</code>                 (<code>list[dict[str, InventoryId]]</code>)             </li> <li> <code>modules</code>                 (<code>list[str] | None</code>)             </li> </ul>"},{"location":"resources/inventory/#albert.resources.inventory.MergeInventory.parent_id","title":"parent_id","text":"<pre><code>parent_id: InventoryId\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.MergeInventory.child_inventories","title":"child_inventories","text":"<pre><code>child_inventories: list[dict[str, InventoryId]]\n</code></pre>"},{"location":"resources/inventory/#albert.resources.inventory.MergeInventory.modules","title":"modules","text":"<pre><code>modules: list[str] | None = None\n</code></pre>"},{"location":"resources/links/","title":"Links","text":""},{"location":"resources/links/#albert.resources.links","title":"albert.resources.links","text":""},{"location":"resources/links/#albert.resources.links.LinkCategory","title":"LinkCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>MENTION</code> <code>LINKED_TASK</code> <code>SYNTHESIS</code> <code>LINKED_INVENTORY</code>"},{"location":"resources/links/#albert.resources.links.LinkCategory.MENTION","title":"MENTION","text":"<pre><code>MENTION = 'mention'\n</code></pre>"},{"location":"resources/links/#albert.resources.links.LinkCategory.LINKED_TASK","title":"LINKED_TASK","text":"<pre><code>LINKED_TASK = 'linkedTask'\n</code></pre>"},{"location":"resources/links/#albert.resources.links.LinkCategory.SYNTHESIS","title":"SYNTHESIS","text":"<pre><code>SYNTHESIS = 'synthesis'\n</code></pre>"},{"location":"resources/links/#albert.resources.links.LinkCategory.LINKED_INVENTORY","title":"LINKED_INVENTORY","text":"<pre><code>LINKED_INVENTORY = 'linkedInventory'\n</code></pre>"},{"location":"resources/links/#albert.resources.links.Link","title":"Link","text":"<p>               Bases: <code>BaseResource</code></p> <p>A link in Albert.</p> <p>Attributes:</p> Name Type Description <code>parent</code> <code>EntityLink</code> <p>The parent entity of the link.</p> <code>child</code> <code>EntityLink</code> <p>The child entity of the link.</p> <code>category</code> <code>LinkCategory</code> <p>The category of the link. Allowed values are <code>mention</code>, <code>linkedTask</code>, and <code>synthesis</code>.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the link. Set when the link is retrieved from Albert.</p> <code>counter</code> <code>int | None</code> <p>The counter of the link. Optional.</p>"},{"location":"resources/links/#albert.resources.links.Link.parent","title":"parent","text":"<pre><code>parent: EntityLink = Field(..., alias='Parent')\n</code></pre>"},{"location":"resources/links/#albert.resources.links.Link.child","title":"child","text":"<pre><code>child: EntityLink = Field(..., alias='Child')\n</code></pre>"},{"location":"resources/links/#albert.resources.links.Link.category","title":"category","text":"<pre><code>category: LinkCategory = Field(...)\n</code></pre>"},{"location":"resources/links/#albert.resources.links.Link.counter","title":"counter","text":"<pre><code>counter: int | None = Field(default=None)\n</code></pre>"},{"location":"resources/links/#albert.resources.links.Link.id","title":"id","text":"<pre><code>id: str | None = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/lists/","title":"Lists","text":""},{"location":"resources/lists/#albert.resources.lists","title":"albert.resources.lists","text":""},{"location":"resources/lists/#albert.resources.lists.ListItemCategory","title":"ListItemCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>BUSINESS_DEFINED</code> <code>USER_DEFINED</code> <code>PROJECTS</code> <code>EXTENSIONS</code> <code>INVENTORY</code>"},{"location":"resources/lists/#albert.resources.lists.ListItemCategory.BUSINESS_DEFINED","title":"BUSINESS_DEFINED","text":"<pre><code>BUSINESS_DEFINED = 'businessDefined'\n</code></pre>"},{"location":"resources/lists/#albert.resources.lists.ListItemCategory.USER_DEFINED","title":"USER_DEFINED","text":"<pre><code>USER_DEFINED = 'userDefined'\n</code></pre>"},{"location":"resources/lists/#albert.resources.lists.ListItemCategory.PROJECTS","title":"PROJECTS","text":"<pre><code>PROJECTS = 'projects'\n</code></pre>"},{"location":"resources/lists/#albert.resources.lists.ListItemCategory.EXTENSIONS","title":"EXTENSIONS","text":"<pre><code>EXTENSIONS = 'extensions'\n</code></pre>"},{"location":"resources/lists/#albert.resources.lists.ListItemCategory.INVENTORY","title":"INVENTORY","text":"<pre><code>INVENTORY = 'inventory'\n</code></pre>"},{"location":"resources/lists/#albert.resources.lists.ListItem","title":"ListItem","text":"<p>               Bases: <code>BaseResource</code></p> <p>An item in a list.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the list item.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the list item. Set when the list item is retrieved from Albert.</p> <code>category</code> <code>ListItemCategory | None</code> <p>The category of the list item. Allowed values are <code>businessDefined</code>, <code>userDefined</code>, <code>projects</code>, and <code>extensions</code>.</p> <code>list_type</code> <code>str | None</code> <p>The type of the list item. Allowed values are <code>projectState</code> for <code>projects</code> and <code>extensions</code> for <code>extensions</code>.</p> <p>Methods:</p> Name Description <code>validate_list_type</code>"},{"location":"resources/lists/#albert.resources.lists.ListItem.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/lists/#albert.resources.lists.ListItem.id","title":"id","text":"<pre><code>id: str | None = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/lists/#albert.resources.lists.ListItem.category","title":"category","text":"<pre><code>category: ListItemCategory | None = Field(default=None)\n</code></pre>"},{"location":"resources/lists/#albert.resources.lists.ListItem.list_type","title":"list_type","text":"<pre><code>list_type: str | None = Field(\n    default=None, alias=\"listType\"\n)\n</code></pre>"},{"location":"resources/lists/#albert.resources.lists.ListItem.validate_list_type","title":"validate_list_type","text":"<pre><code>validate_list_type() -&gt; ListItem\n</code></pre> Source code in <code>src/albert/resources/lists.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_list_type(self) -&gt; \"ListItem\":\n    if (\n        self.category == ListItemCategory.PROJECTS\n        and self.list_type is not None\n        and self.list_type != \"projectState\"\n    ) or (\n        self.category == ListItemCategory.EXTENSIONS\n        and self.list_type is not None\n        and self.list_type != \"extensions\"\n    ):\n        raise ValueError(\n            f\"List type {self.list_type} is not allowed for category {self.category}\"\n        )\n    return self\n</code></pre>"},{"location":"resources/locations/","title":"Locations","text":""},{"location":"resources/locations/#albert.resources.locations","title":"albert.resources.locations","text":""},{"location":"resources/locations/#albert.resources.locations.Location","title":"Location","text":"<p>               Bases: <code>BaseResource</code></p> <p>A location in Albert.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the location.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the location. Set when the location is retrieved from Albert.</p> <code>latitude</code> <code>float</code> <p>The latitude of the location.</p> <code>longitude</code> <code>float</code> <p>The longitude of the location.</p> <code>address</code> <code>str</code> <p>The address of the location.</p> <code>country</code> <code>str | None</code> <p>The country code of the location. Must be two characters long.</p>"},{"location":"resources/locations/#albert.resources.locations.Location.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/locations/#albert.resources.locations.Location.id","title":"id","text":"<pre><code>id: str | None = Field(None, alias='albertId')\n</code></pre>"},{"location":"resources/locations/#albert.resources.locations.Location.latitude","title":"latitude","text":"<pre><code>latitude: float = Field()\n</code></pre>"},{"location":"resources/locations/#albert.resources.locations.Location.longitude","title":"longitude","text":"<pre><code>longitude: float = Field()\n</code></pre>"},{"location":"resources/locations/#albert.resources.locations.Location.address","title":"address","text":"<pre><code>address: str\n</code></pre>"},{"location":"resources/locations/#albert.resources.locations.Location.country","title":"country","text":"<pre><code>country: str | None = Field(\n    None, max_length=2, min_length=2\n)\n</code></pre>"},{"location":"resources/lots/","title":"Lots","text":""},{"location":"resources/lots/#albert.resources.lots","title":"albert.resources.lots","text":""},{"location":"resources/lots/#albert.resources.lots.LotStatus","title":"LotStatus","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The status of a lot</p> <p>Attributes:</p> Name Type Description <code>ACTIVE</code> <code>INACTIVE</code> <code>QUARANTINED</code>"},{"location":"resources/lots/#albert.resources.lots.LotStatus.ACTIVE","title":"ACTIVE","text":"<pre><code>ACTIVE = 'active'\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.LotStatus.INACTIVE","title":"INACTIVE","text":"<pre><code>INACTIVE = 'inactive'\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.LotStatus.QUARANTINED","title":"QUARANTINED","text":"<pre><code>QUARANTINED = 'quarantined'\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot","title":"Lot","text":"<p>               Bases: <code>BaseResource</code></p> <p>A lot in Albert.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>LotId | None</code> <p>The Albert ID of the lot. Set when the lot is retrieved from Albert.</p> <code>inventory_id</code> <code>InventoryId</code> <p>The Albert ID of the inventory item associated with the lot.</p> <code>task_id</code> <code>str | None</code> <p>The Albert ID of the task associated with the creation of lot. Optional.</p> <code>notes</code> <code>str | None</code> <p>The notes associated with the lot. Optional.</p> <code>expiration_date</code> <code>str | None</code> <p>The expiration date of the lot. YYYY-MM-DD format. Optional.</p> <code>manufacturer_lot_number</code> <code>str | None</code> <p>The manufacturer lot number of the lot. Optional.</p> <code>storage_location</code> <code>StorageLocation | None</code> <p>The storage location of the lot. Optional.</p> <code>pack_size</code> <code>str | None</code> <p>The pack size of the lot. Optional. Used to calculate the cost per unit.</p> <code>initial_quantity</code> <code>NonNegativeFloat | None</code> <p>The initial quantity of the lot. Optional.</p> <code>cost</code> <code>NonNegativeFloat | None</code> <p>The cost of the lot. Optional.</p> <code>inventory_on_hand</code> <code>NonNegativeFloat</code> <p>The inventory on hand of the lot.</p> <code>owner</code> <code>list[User] | None</code> <p>The owners of the lot. Optional.</p> <code>lot_number</code> <code>str | None</code> <p>The lot number of the lot. Optional.</p> <code>external_barcode_id</code> <code>str | None</code> <p>The external barcode ID of the lot. Optional.</p> <code>metadata</code> <code>dict[str, str | list[EntityLink] | EntityLink] | None</code> <p>The metadata of the lot. Optional. Metadata allowed values can be found using the Custom Fields API.</p> <code>has_notes</code> <code>bool</code> <p>Whether the lot has notes. Read-only.</p> <code>has_attachments</code> <code>bool</code> <p>Whether the lot has attachments. Read-only.</p> <code>barcode_id</code> <code>str</code> <p>The barcode ID of the lot. Read-only.</p> <p>Methods:</p> Name Description <code>validate_has_notes</code> <code>validate_has_attachments</code> <code>serialize_initial_quantity</code> <code>serialize_cost</code> <code>serialize_inventory_on_hand</code>"},{"location":"resources/lots/#albert.resources.lots.Lot.id","title":"id","text":"<pre><code>id: LotId | None = Field(None, alias='albertId')\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: InventoryId = Field(alias='parentId')\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.task_id","title":"task_id","text":"<pre><code>task_id: str | None = Field(default=None, alias='taskId')\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.expiration_date","title":"expiration_date","text":"<pre><code>expiration_date: str | None = Field(\n    None, alias=\"expirationDate\"\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.manufacturer_lot_number","title":"manufacturer_lot_number","text":"<pre><code>manufacturer_lot_number: str | None = Field(\n    None, alias=\"manufacturerLotNumber\"\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.storage_location","title":"storage_location","text":"<pre><code>storage_location: (\n    SerializeAsEntityLink[StorageLocation] | None\n) = Field(alias=\"StorageLocation\", default=None)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.pack_size","title":"pack_size","text":"<pre><code>pack_size: str | None = Field(None, alias='packSize')\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.initial_quantity","title":"initial_quantity","text":"<pre><code>initial_quantity: NonNegativeFloat | None = Field(\n    default=None, alias=\"initialQuantity\"\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.cost","title":"cost","text":"<pre><code>cost: NonNegativeFloat | None = Field(default=None)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.inventory_on_hand","title":"inventory_on_hand","text":"<pre><code>inventory_on_hand: NonNegativeFloat = Field(\n    alias=\"inventoryOnHand\"\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.owner","title":"owner","text":"<pre><code>owner: list[SerializeAsEntityLink[User]] | None = Field(\n    default=None, alias=\"Owner\"\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.lot_number","title":"lot_number","text":"<pre><code>lot_number: str | None = Field(None, alias='lotNumber')\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.external_barcode_id","title":"external_barcode_id","text":"<pre><code>external_barcode_id: str | None = Field(\n    None, alias=\"externalBarcodeId\"\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] | None = Field(\n    alias=\"Metadata\", default=None\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.status","title":"status","text":"<pre><code>status: LotStatus | None = Field(default=None)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.location","title":"location","text":"<pre><code>location: SerializeAsEntityLink[Location] | None = Field(\n    default=None,\n    alias=\"Location\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.notes","title":"notes","text":"<pre><code>notes: str | None = Field(\n    default=None, exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.has_notes","title":"has_notes","text":"<pre><code>has_notes: bool | None = Field(\n    default=None,\n    alias=\"hasNotes\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.has_attachments","title":"has_attachments","text":"<pre><code>has_attachments: bool | None = Field(\n    default=None,\n    alias=\"hasAttachments\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.parent_name","title":"parent_name","text":"<pre><code>parent_name: str | None = Field(\n    default=None,\n    alias=\"parentName\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.parent_unit","title":"parent_unit","text":"<pre><code>parent_unit: str | None = Field(\n    default=None,\n    alias=\"parentUnit\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.parent_category","title":"parent_category","text":"<pre><code>parent_category: InventoryCategory | None = Field(\n    default=None,\n    alias=\"parentCategory\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.barcode_id","title":"barcode_id","text":"<pre><code>barcode_id: str | None = Field(\n    default=None, alias=\"barcodeId\"\n)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.validate_has_notes","title":"validate_has_notes","text":"<pre><code>validate_has_notes(value: Any) -&gt; Any\n</code></pre> Source code in <code>src/albert/resources/lots.py</code> <pre><code>@field_validator(\"has_notes\", mode=\"before\")\ndef validate_has_notes(cls, value: Any) -&gt; Any:\n    if value == \"1\":\n        return True\n    elif value == \"0\":\n        return False\n    return value\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.validate_has_attachments","title":"validate_has_attachments","text":"<pre><code>validate_has_attachments(value: Any) -&gt; Any\n</code></pre> Source code in <code>src/albert/resources/lots.py</code> <pre><code>@field_validator(\"has_attachments\", mode=\"before\")\ndef validate_has_attachments(cls, value: Any) -&gt; Any:\n    if value == \"1\":\n        return True\n    elif value == \"0\":\n        return False\n    return value\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.serialize_initial_quantity","title":"serialize_initial_quantity","text":"<pre><code>serialize_initial_quantity(\n    initial_quantity: NonNegativeFloat,\n)\n</code></pre> Source code in <code>src/albert/resources/lots.py</code> <pre><code>@field_serializer(\"initial_quantity\", return_type=str)\ndef serialize_initial_quantity(self, initial_quantity: NonNegativeFloat):\n    return str(initial_quantity)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.serialize_cost","title":"serialize_cost","text":"<pre><code>serialize_cost(cost: NonNegativeFloat)\n</code></pre> Source code in <code>src/albert/resources/lots.py</code> <pre><code>@field_serializer(\"cost\", return_type=str)\ndef serialize_cost(self, cost: NonNegativeFloat):\n    return str(cost)\n</code></pre>"},{"location":"resources/lots/#albert.resources.lots.Lot.serialize_inventory_on_hand","title":"serialize_inventory_on_hand","text":"<pre><code>serialize_inventory_on_hand(\n    inventory_on_hand: NonNegativeFloat,\n)\n</code></pre> Source code in <code>src/albert/resources/lots.py</code> <pre><code>@field_serializer(\"inventory_on_hand\", return_type=str)\ndef serialize_inventory_on_hand(self, inventory_on_hand: NonNegativeFloat):\n    return str(inventory_on_hand)\n</code></pre>"},{"location":"resources/notebooks/","title":"Notebooks","text":""},{"location":"resources/notebooks/#albert.resources.notebooks","title":"albert.resources.notebooks","text":"<p>Attributes:</p> Name Type Description <code>ListContent</code> <code>NotebookBlock</code> <code>NotebookContent</code> <code>allowed_notebook_contents</code>"},{"location":"resources/notebooks/#albert.resources.notebooks.ListContent","title":"ListContent","text":"<pre><code>ListContent = Annotated[\n    NumberedListContent | BulletedListContent,\n    Field(discriminator=\"style\"),\n]\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookBlock","title":"NotebookBlock","text":"<pre><code>NotebookBlock = Annotated[\n    _NotebookBlockUnion, Field(discriminator=\"type\")\n]\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookContent","title":"NotebookContent","text":"<pre><code>NotebookContent = (\n    HeaderContent\n    | ParagraphContent\n    | ChecklistContent\n    | AttachesContent\n    | ImageContent\n    | KetcherContent\n    | TableContent\n    | BulletedListContent\n    | NumberedListContent\n)\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.allowed_notebook_contents","title":"allowed_notebook_contents","text":"<pre><code>allowed_notebook_contents = {\n    HEADER: HeaderContent,\n    PARAGRAPH: ParagraphContent,\n    CHECKLIST: ChecklistContent,\n    ATTACHES: AttachesContent,\n    IMAGE: ImageContent,\n    KETCHER: KetcherContent,\n    TABLE: TableContent,\n    LIST: (BulletedListContent, NumberedListContent),\n}\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ListBlockStyle","title":"ListBlockStyle","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>ORDERED</code> <code>UNORDERED</code>"},{"location":"resources/notebooks/#albert.resources.notebooks.ListBlockStyle.ORDERED","title":"ORDERED","text":"<pre><code>ORDERED = 'ordered'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ListBlockStyle.UNORDERED","title":"UNORDERED","text":"<pre><code>UNORDERED = 'unordered'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BlockType","title":"BlockType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>PARAGRAPH</code> <code>LIST</code> <code>HEADER</code> <code>CHECKLIST</code> <code>IMAGE</code> <code>ATTACHES</code> <code>KETCHER</code> <code>TABLE</code>"},{"location":"resources/notebooks/#albert.resources.notebooks.BlockType.PARAGRAPH","title":"PARAGRAPH","text":"<pre><code>PARAGRAPH = 'paragraph'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BlockType.LIST","title":"LIST","text":"<pre><code>LIST = 'list'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BlockType.HEADER","title":"HEADER","text":"<pre><code>HEADER = 'header'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BlockType.CHECKLIST","title":"CHECKLIST","text":"<pre><code>CHECKLIST = 'checklist'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BlockType.IMAGE","title":"IMAGE","text":"<pre><code>IMAGE = 'image'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BlockType.ATTACHES","title":"ATTACHES","text":"<pre><code>ATTACHES = 'attaches'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BlockType.KETCHER","title":"KETCHER","text":"<pre><code>KETCHER = 'ketcher'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BlockType.TABLE","title":"TABLE","text":"<pre><code>TABLE = 'table'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyType","title":"NotebookCopyType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>TEMPLATE</code> <code>TASK</code> <code>PROJECT</code> <code>RESTORE_TEMPLATE</code> <code>GEN_TASK_TEMPLATE</code>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyType.TEMPLATE","title":"TEMPLATE","text":"<pre><code>TEMPLATE = 'template'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyType.TASK","title":"TASK","text":"<pre><code>TASK = 'Task'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyType.PROJECT","title":"PROJECT","text":"<pre><code>PROJECT = 'Project'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyType.RESTORE_TEMPLATE","title":"RESTORE_TEMPLATE","text":"<pre><code>RESTORE_TEMPLATE = 'restoreTemplate'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyType.GEN_TASK_TEMPLATE","title":"GEN_TASK_TEMPLATE","text":"<pre><code>GEN_TASK_TEMPLATE = 'genTaskTemplate'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BaseBlock","title":"BaseBlock","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Version\"\n    }\n  },\n  \"title\": \"BaseBlock\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>datetime | None</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.BaseBlock.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BaseBlock.version","title":"version","text":"<pre><code>version: datetime | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.HeaderContent","title":"HeaderContent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"level\": {\n      \"enum\": [\n        1,\n        2,\n        3\n      ],\n      \"title\": \"Level\",\n      \"type\": \"integer\"\n    },\n    \"text\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Text\"\n    }\n  },\n  \"required\": [\n    \"level\",\n    \"text\"\n  ],\n  \"title\": \"HeaderContent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>level</code>                 (<code>Literal[1, 2, 3]</code>)             </li> <li> <code>text</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.HeaderContent.level","title":"level","text":"<pre><code>level: Literal[1, 2, 3]\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.HeaderContent.text","title":"text","text":"<pre><code>text: str | None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.HeaderBlock","title":"HeaderBlock","text":"<p>               Bases: <code>BaseBlock</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"HeaderContent\": {\n      \"properties\": {\n        \"level\": {\n          \"enum\": [\n            1,\n            2,\n            3\n          ],\n          \"title\": \"Level\",\n          \"type\": \"integer\"\n        },\n        \"text\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Text\"\n        }\n      },\n      \"required\": [\n        \"level\",\n        \"text\"\n      ],\n      \"title\": \"HeaderContent\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Version\"\n    },\n    \"blockType\": {\n      \"const\": \"header\",\n      \"default\": \"header\",\n      \"title\": \"Blocktype\",\n      \"type\": \"string\"\n    },\n    \"content\": {\n      \"$ref\": \"#/$defs/HeaderContent\"\n    }\n  },\n  \"required\": [\n    \"content\"\n  ],\n  \"title\": \"HeaderBlock\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>datetime | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[HEADER]</code>)             </li> <li> <code>content</code>                 (<code>HeaderContent</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.HeaderBlock.type","title":"type","text":"<pre><code>type: Literal[HEADER] = HEADER\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.HeaderBlock.content","title":"content","text":"<pre><code>content: HeaderContent\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ParagraphContent","title":"ParagraphContent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"text\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Text\"\n    }\n  },\n  \"required\": [\n    \"text\"\n  ],\n  \"title\": \"ParagraphContent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>text</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.ParagraphContent.text","title":"text","text":"<pre><code>text: str | None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ParagraphBlock","title":"ParagraphBlock","text":"<p>               Bases: <code>BaseBlock</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ParagraphContent\": {\n      \"properties\": {\n        \"text\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Text\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ],\n      \"title\": \"ParagraphContent\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Version\"\n    },\n    \"blockType\": {\n      \"const\": \"paragraph\",\n      \"default\": \"paragraph\",\n      \"title\": \"Blocktype\",\n      \"type\": \"string\"\n    },\n    \"content\": {\n      \"$ref\": \"#/$defs/ParagraphContent\"\n    }\n  },\n  \"required\": [\n    \"content\"\n  ],\n  \"title\": \"ParagraphBlock\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>datetime | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[PARAGRAPH]</code>)             </li> <li> <code>content</code>                 (<code>ParagraphContent</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.ParagraphBlock.type","title":"type","text":"<pre><code>type: Literal[PARAGRAPH] = PARAGRAPH\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ParagraphBlock.content","title":"content","text":"<pre><code>content: ParagraphContent\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ChecklistItem","title":"ChecklistItem","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"checked\": {\n      \"title\": \"Checked\",\n      \"type\": \"boolean\"\n    },\n    \"text\": {\n      \"title\": \"Text\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"checked\",\n    \"text\"\n  ],\n  \"title\": \"ChecklistItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>checked</code>                 (<code>bool</code>)             </li> <li> <code>text</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.ChecklistItem.checked","title":"checked","text":"<pre><code>checked: bool\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ChecklistItem.text","title":"text","text":"<pre><code>text: str\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ChecklistContent","title":"ChecklistContent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ChecklistItem\": {\n      \"properties\": {\n        \"checked\": {\n          \"title\": \"Checked\",\n          \"type\": \"boolean\"\n        },\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"checked\",\n        \"text\"\n      ],\n      \"title\": \"ChecklistItem\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"items\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/ChecklistItem\"\n      },\n      \"title\": \"Items\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"items\"\n  ],\n  \"title\": \"ChecklistContent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>items</code>                 (<code>list[ChecklistItem]</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.ChecklistContent.items","title":"items","text":"<pre><code>items: list[ChecklistItem]\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ChecklistBlock","title":"ChecklistBlock","text":"<p>               Bases: <code>BaseBlock</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ChecklistContent\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ChecklistItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"items\"\n      ],\n      \"title\": \"ChecklistContent\",\n      \"type\": \"object\"\n    },\n    \"ChecklistItem\": {\n      \"properties\": {\n        \"checked\": {\n          \"title\": \"Checked\",\n          \"type\": \"boolean\"\n        },\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"checked\",\n        \"text\"\n      ],\n      \"title\": \"ChecklistItem\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Version\"\n    },\n    \"blockType\": {\n      \"const\": \"checklist\",\n      \"default\": \"checklist\",\n      \"title\": \"Blocktype\",\n      \"type\": \"string\"\n    },\n    \"content\": {\n      \"$ref\": \"#/$defs/ChecklistContent\"\n    }\n  },\n  \"required\": [\n    \"content\"\n  ],\n  \"title\": \"ChecklistBlock\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>datetime | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[CHECKLIST]</code>)             </li> <li> <code>content</code>                 (<code>ChecklistContent</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.ChecklistBlock.type","title":"type","text":"<pre><code>type: Literal[CHECKLIST] = CHECKLIST\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ChecklistBlock.content","title":"content","text":"<pre><code>content: ChecklistContent\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ChecklistBlock.is_checked","title":"is_checked","text":"<pre><code>is_checked(*, target_text: str) -&gt; bool | None\n</code></pre> <p>Get checked state of a checklist item</p> Parameters <p>target_text : str     The value/text of a checklist entry.</p> <p>Returns:</p> Type Description <code>bool | None</code> <p>The checked state of the target entry identified by name.</p> Source code in <code>src/albert/resources/notebooks.py</code> <pre><code>def is_checked(self, *, target_text: str) -&gt; bool | None:\n    \"\"\"Get checked state of a checklist item\n\n     Parameters\n    ----------\n    target_text : str\n        The value/text of a checklist entry.\n\n    Returns\n    -------\n    bool | None\n        The checked state of the target entry identified by name.\n    \"\"\"\n    # loop items\n    for i in self.content.items:\n        if i.text == target_text:\n            # return check state\n            return i.checked\n\n    # return None if no match\n    return\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.AttachesContent","title":"AttachesContent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"title\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Title\"\n    },\n    \"namespace\": {\n      \"default\": \"result\",\n      \"title\": \"Namespace\",\n      \"type\": \"string\"\n    },\n    \"fileKey\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Filekey\"\n    },\n    \"mimeType\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Mimetype\"\n    },\n    \"signedURL\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Signedurl\"\n    }\n  },\n  \"title\": \"AttachesContent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>title</code>                 (<code>str | None</code>)             </li> <li> <code>namespace</code>                 (<code>str</code>)             </li> <li> <code>file_key</code>                 (<code>str | None</code>)             </li> <li> <code>format</code>                 (<code>str | None</code>)             </li> <li> <code>signed_url</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.AttachesContent.title","title":"title","text":"<pre><code>title: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.AttachesContent.namespace","title":"namespace","text":"<pre><code>namespace: str = 'result'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.AttachesContent.file_key","title":"file_key","text":"<pre><code>file_key: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.AttachesContent.format","title":"format","text":"<pre><code>format: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.AttachesContent.signed_url","title":"signed_url","text":"<pre><code>signed_url: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.AttachesBlock","title":"AttachesBlock","text":"<p>               Bases: <code>BaseBlock</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AttachesContent\": {\n      \"properties\": {\n        \"title\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title\"\n        },\n        \"namespace\": {\n          \"default\": \"result\",\n          \"title\": \"Namespace\",\n          \"type\": \"string\"\n        },\n        \"fileKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Filekey\"\n        },\n        \"mimeType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Mimetype\"\n        },\n        \"signedURL\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Signedurl\"\n        }\n      },\n      \"title\": \"AttachesContent\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Version\"\n    },\n    \"blockType\": {\n      \"const\": \"attaches\",\n      \"default\": \"attaches\",\n      \"title\": \"Blocktype\",\n      \"type\": \"string\"\n    },\n    \"content\": {\n      \"$ref\": \"#/$defs/AttachesContent\"\n    }\n  },\n  \"required\": [\n    \"content\"\n  ],\n  \"title\": \"AttachesBlock\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>datetime | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[ATTACHES]</code>)             </li> <li> <code>content</code>                 (<code>AttachesContent</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.AttachesBlock.type","title":"type","text":"<pre><code>type: Literal[ATTACHES] = ATTACHES\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.AttachesBlock.content","title":"content","text":"<pre><code>content: AttachesContent\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageContent","title":"ImageContent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"title\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Title\"\n    },\n    \"namespace\": {\n      \"default\": \"result\",\n      \"title\": \"Namespace\",\n      \"type\": \"string\"\n    },\n    \"stretched\": {\n      \"default\": false,\n      \"title\": \"Stretched\",\n      \"type\": \"boolean\"\n    },\n    \"withBackground\": {\n      \"default\": false,\n      \"title\": \"Withbackground\",\n      \"type\": \"boolean\"\n    },\n    \"withBorder\": {\n      \"default\": false,\n      \"title\": \"Withborder\",\n      \"type\": \"boolean\"\n    },\n    \"fileKey\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Filekey\"\n    },\n    \"signedURL\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Signedurl\"\n    }\n  },\n  \"title\": \"ImageContent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>title</code>                 (<code>str | None</code>)             </li> <li> <code>namespace</code>                 (<code>str</code>)             </li> <li> <code>stretched</code>                 (<code>bool</code>)             </li> <li> <code>with_background</code>                 (<code>bool</code>)             </li> <li> <code>with_border</code>                 (<code>bool</code>)             </li> <li> <code>file_key</code>                 (<code>str | None</code>)             </li> <li> <code>signed_url</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageContent.title","title":"title","text":"<pre><code>title: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageContent.namespace","title":"namespace","text":"<pre><code>namespace: str = 'result'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageContent.stretched","title":"stretched","text":"<pre><code>stretched: bool = False\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageContent.with_background","title":"with_background","text":"<pre><code>with_background: bool = False\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageContent.with_border","title":"with_border","text":"<pre><code>with_border: bool = False\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageContent.file_key","title":"file_key","text":"<pre><code>file_key: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageContent.signed_url","title":"signed_url","text":"<pre><code>signed_url: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageBlock","title":"ImageBlock","text":"<p>               Bases: <code>BaseBlock</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ImageContent\": {\n      \"properties\": {\n        \"title\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title\"\n        },\n        \"namespace\": {\n          \"default\": \"result\",\n          \"title\": \"Namespace\",\n          \"type\": \"string\"\n        },\n        \"stretched\": {\n          \"default\": false,\n          \"title\": \"Stretched\",\n          \"type\": \"boolean\"\n        },\n        \"withBackground\": {\n          \"default\": false,\n          \"title\": \"Withbackground\",\n          \"type\": \"boolean\"\n        },\n        \"withBorder\": {\n          \"default\": false,\n          \"title\": \"Withborder\",\n          \"type\": \"boolean\"\n        },\n        \"fileKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Filekey\"\n        },\n        \"signedURL\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Signedurl\"\n        }\n      },\n      \"title\": \"ImageContent\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Version\"\n    },\n    \"blockType\": {\n      \"const\": \"image\",\n      \"default\": \"image\",\n      \"title\": \"Blocktype\",\n      \"type\": \"string\"\n    },\n    \"content\": {\n      \"$ref\": \"#/$defs/ImageContent\"\n    }\n  },\n  \"required\": [\n    \"content\"\n  ],\n  \"title\": \"ImageBlock\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>datetime | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[IMAGE]</code>)             </li> <li> <code>content</code>                 (<code>ImageContent</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageBlock.type","title":"type","text":"<pre><code>type: Literal[IMAGE] = IMAGE\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ImageBlock.content","title":"content","text":"<pre><code>content: ImageContent\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent","title":"KetcherContent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"synthesisId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Synthesisid\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"blockId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Blockid\"\n    },\n    \"data\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Data\"\n    },\n    \"fileKey\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Filekey\"\n    },\n    \"s3Key\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"S3Key\"\n    },\n    \"png\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Png\"\n    },\n    \"ketcherUrl\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Ketcherurl\"\n    }\n  },\n  \"title\": \"KetcherContent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>synthesis_id</code>                 (<code>SynthesisId | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>block_id</code>                 (<code>str | None</code>)             </li> <li> <code>data</code>                 (<code>str | None</code>)             </li> <li> <code>file_key</code>                 (<code>str | None</code>)             </li> <li> <code>s3_key</code>                 (<code>str | None</code>)             </li> <li> <code>png</code>                 (<code>str | None</code>)             </li> <li> <code>ketcher_url</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent.synthesis_id","title":"synthesis_id","text":"<pre><code>synthesis_id: SynthesisId | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent.block_id","title":"block_id","text":"<pre><code>block_id: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent.data","title":"data","text":"<pre><code>data: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent.file_key","title":"file_key","text":"<pre><code>file_key: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent.s3_key","title":"s3_key","text":"<pre><code>s3_key: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent.png","title":"png","text":"<pre><code>png: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherContent.ketcher_url","title":"ketcher_url","text":"<pre><code>ketcher_url: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherBlock","title":"KetcherBlock","text":"<p>               Bases: <code>BaseBlock</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"KetcherContent\": {\n      \"properties\": {\n        \"synthesisId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Synthesisid\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"blockId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Blockid\"\n        },\n        \"data\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Data\"\n        },\n        \"fileKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Filekey\"\n        },\n        \"s3Key\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"S3Key\"\n        },\n        \"png\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Png\"\n        },\n        \"ketcherUrl\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Ketcherurl\"\n        }\n      },\n      \"title\": \"KetcherContent\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Version\"\n    },\n    \"blockType\": {\n      \"const\": \"ketcher\",\n      \"default\": \"ketcher\",\n      \"title\": \"Blocktype\",\n      \"type\": \"string\"\n    },\n    \"content\": {\n      \"$ref\": \"#/$defs/KetcherContent\"\n    }\n  },\n  \"required\": [\n    \"content\"\n  ],\n  \"title\": \"KetcherBlock\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>datetime | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[KETCHER]</code>)             </li> <li> <code>content</code>                 (<code>KetcherContent</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherBlock.type","title":"type","text":"<pre><code>type: Literal[KETCHER] = KETCHER\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.KetcherBlock.content","title":"content","text":"<pre><code>content: KetcherContent\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.TableContent","title":"TableContent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"content\": {\n      \"items\": {\n        \"items\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ]\n        },\n        \"type\": \"array\"\n      },\n      \"title\": \"Content\",\n      \"type\": \"array\"\n    },\n    \"withHeadings\": {\n      \"default\": false,\n      \"title\": \"Withheadings\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"content\"\n  ],\n  \"title\": \"TableContent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>content</code>                 (<code>list[list[str | None]]</code>)             </li> <li> <code>with_headings</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.TableContent.content","title":"content","text":"<pre><code>content: list[list[str | None]]\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.TableContent.with_headings","title":"with_headings","text":"<pre><code>with_headings: bool = False\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.TableBlock","title":"TableBlock","text":"<p>               Bases: <code>BaseBlock</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"TableContent\": {\n      \"properties\": {\n        \"content\": {\n          \"items\": {\n            \"items\": {\n              \"anyOf\": [\n                {\n                  \"type\": \"string\"\n                },\n                {\n                  \"type\": \"null\"\n                }\n              ]\n            },\n            \"type\": \"array\"\n          },\n          \"title\": \"Content\",\n          \"type\": \"array\"\n        },\n        \"withHeadings\": {\n          \"default\": false,\n          \"title\": \"Withheadings\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"content\"\n      ],\n      \"title\": \"TableContent\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Version\"\n    },\n    \"blockType\": {\n      \"const\": \"table\",\n      \"default\": \"table\",\n      \"title\": \"Blocktype\",\n      \"type\": \"string\"\n    },\n    \"content\": {\n      \"$ref\": \"#/$defs/TableContent\"\n    }\n  },\n  \"required\": [\n    \"content\"\n  ],\n  \"title\": \"TableBlock\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>datetime | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[TABLE]</code>)             </li> <li> <code>content</code>                 (<code>TableContent</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.TableBlock.type","title":"type","text":"<pre><code>type: Literal[TABLE] = TABLE\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.TableBlock.content","title":"content","text":"<pre><code>content: TableContent\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.TableBlock.to_df","title":"to_df","text":"<pre><code>to_df(*, infer_header: bool = True) -&gt; DataFrame\n</code></pre> <p>Convert the TableBlock's content to a pd.DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The block's content as a pd.DataFrame.</p> Source code in <code>src/albert/resources/notebooks.py</code> <pre><code>def to_df(self, *, infer_header: bool = True) -&gt; DataFrame:\n    \"\"\"Convert the TableBlock's content to a pd.DataFrame.\n\n    Returns\n    -------\n    DataFrame\n        The block's content as a pd.DataFrame.\n    \"\"\"\n\n    # convert to df\n    df = DataFrame(self.content.content)\n\n    if infer_header:\n        # clean df -&gt; column name w/o formatting\n        df.columns = df.iloc[0, :]\n        df.columns = [re.sub(r\"&lt;.*?&gt;\", \"\", x) for x in df.columns]\n        # discard first\n        df = df.iloc[1:, :].reset_index(drop=True)\n\n    # return df\n    return df\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookListItem","title":"NotebookListItem","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NotebookListItem\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"content\"\n      ],\n      \"title\": \"NotebookListItem\",\n      \"type\": \"object\"\n    }\n  },\n  \"$ref\": \"#/$defs/NotebookListItem\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>content</code>                 (<code>str | None</code>)             </li> <li> <code>items</code>                 (<code>list[NotebookListItem]</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookListItem.content","title":"content","text":"<pre><code>content: str | None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookListItem.items","title":"items","text":"<pre><code>items: list[NotebookListItem]\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BulletedListContent","title":"BulletedListContent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NotebookListItem\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"content\"\n      ],\n      \"title\": \"NotebookListItem\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"items\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NotebookListItem\"\n      },\n      \"title\": \"Items\",\n      \"type\": \"array\"\n    },\n    \"style\": {\n      \"const\": \"unordered\",\n      \"default\": \"unordered\",\n      \"title\": \"Style\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"items\"\n  ],\n  \"title\": \"BulletedListContent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>items</code>                 (<code>list[NotebookListItem]</code>)             </li> <li> <code>style</code>                 (<code>Literal[UNORDERED]</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.BulletedListContent.items","title":"items","text":"<pre><code>items: list[NotebookListItem]\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.BulletedListContent.style","title":"style","text":"<pre><code>style: Literal[UNORDERED] = UNORDERED\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NumberedListContent","title":"NumberedListContent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"NotebookListItem\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"content\"\n      ],\n      \"title\": \"NotebookListItem\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"items\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/NotebookListItem\"\n      },\n      \"title\": \"Items\",\n      \"type\": \"array\"\n    },\n    \"style\": {\n      \"const\": \"ordered\",\n      \"default\": \"ordered\",\n      \"title\": \"Style\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"items\"\n  ],\n  \"title\": \"NumberedListContent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>items</code>                 (<code>list[NotebookListItem]</code>)             </li> <li> <code>style</code>                 (<code>Literal[ORDERED]</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.NumberedListContent.items","title":"items","text":"<pre><code>items: list[NotebookListItem]\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NumberedListContent.style","title":"style","text":"<pre><code>style: Literal[ORDERED] = ORDERED\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ListBlock","title":"ListBlock","text":"<p>               Bases: <code>BaseBlock</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BulletedListContent\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        },\n        \"style\": {\n          \"const\": \"unordered\",\n          \"default\": \"unordered\",\n          \"title\": \"Style\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"items\"\n      ],\n      \"title\": \"BulletedListContent\",\n      \"type\": \"object\"\n    },\n    \"NotebookListItem\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"content\"\n      ],\n      \"title\": \"NotebookListItem\",\n      \"type\": \"object\"\n    },\n    \"NumberedListContent\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        },\n        \"style\": {\n          \"const\": \"ordered\",\n          \"default\": \"ordered\",\n          \"title\": \"Style\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"items\"\n      ],\n      \"title\": \"NumberedListContent\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"version\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Version\"\n    },\n    \"blockType\": {\n      \"const\": \"list\",\n      \"default\": \"list\",\n      \"title\": \"Blocktype\",\n      \"type\": \"string\"\n    },\n    \"content\": {\n      \"discriminator\": {\n        \"mapping\": {\n          \"ordered\": \"#/$defs/NumberedListContent\",\n          \"unordered\": \"#/$defs/BulletedListContent\"\n        },\n        \"propertyName\": \"style\"\n      },\n      \"oneOf\": [\n        {\n          \"$ref\": \"#/$defs/NumberedListContent\"\n        },\n        {\n          \"$ref\": \"#/$defs/BulletedListContent\"\n        }\n      ],\n      \"title\": \"Content\"\n    }\n  },\n  \"required\": [\n    \"content\"\n  ],\n  \"title\": \"ListBlock\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>version</code>                 (<code>datetime | None</code>)             </li> <li> <code>type</code>                 (<code>Literal[LIST]</code>)             </li> <li> <code>content</code>                 (<code>ListContent</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.ListBlock.type","title":"type","text":"<pre><code>type: Literal[LIST] = LIST\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.ListBlock.content","title":"content","text":"<pre><code>content: ListContent\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookLink","title":"NotebookLink","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"Child\": {\n      \"$ref\": \"#/$defs/EntityLink\"\n    }\n  },\n  \"required\": [\n    \"Child\"\n  ],\n  \"title\": \"NotebookLink\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>LinkId | None</code>)             </li> <li> <code>child</code>                 (<code>EntityLink</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookLink.id","title":"id","text":"<pre><code>id: LinkId | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookLink.child","title":"child","text":"<pre><code>child: EntityLink\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.Notebook","title":"Notebook","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>id</code> <code>NotebookId | None</code> <code>name</code> <code>str</code> <code>parent_id</code> <code>ProjectId | TaskId</code> <code>version</code> <code>datetime | None</code> <code>blocks</code> <code>list[NotebookBlock]</code> <code>links</code> <code>list[NotebookLink] | None</code>"},{"location":"resources/notebooks/#albert.resources.notebooks.Notebook.id","title":"id","text":"<pre><code>id: NotebookId | None = Field(\n    default=None, alias=\"albertId\"\n)\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.Notebook.name","title":"name","text":"<pre><code>name: str = Field(default='Untitled Notebook')\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.Notebook.parent_id","title":"parent_id","text":"<pre><code>parent_id: ProjectId | TaskId = Field(..., alias=\"parentId\")\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.Notebook.version","title":"version","text":"<pre><code>version: datetime | None = Field(default=None)\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.Notebook.blocks","title":"blocks","text":"<pre><code>blocks: list[NotebookBlock] = Field(default_factory=list)\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.Notebook.links","title":"links","text":"<pre><code>links: list[NotebookLink] | None = Field(default=None)\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutOperation","title":"PutOperation","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>UPDATE</code> <code>DELETE</code>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutOperation.UPDATE","title":"UPDATE","text":"<pre><code>UPDATE = 'update'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutOperation.DELETE","title":"DELETE","text":"<pre><code>DELETE = 'delete'\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockDatum","title":"PutBlockDatum","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AttachesContent\": {\n      \"properties\": {\n        \"title\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title\"\n        },\n        \"namespace\": {\n          \"default\": \"result\",\n          \"title\": \"Namespace\",\n          \"type\": \"string\"\n        },\n        \"fileKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Filekey\"\n        },\n        \"mimeType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Mimetype\"\n        },\n        \"signedURL\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Signedurl\"\n        }\n      },\n      \"title\": \"AttachesContent\",\n      \"type\": \"object\"\n    },\n    \"BlockType\": {\n      \"enum\": [\n        \"paragraph\",\n        \"list\",\n        \"header\",\n        \"checklist\",\n        \"image\",\n        \"attaches\",\n        \"ketcher\",\n        \"table\"\n      ],\n      \"title\": \"BlockType\",\n      \"type\": \"string\"\n    },\n    \"BulletedListContent\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        },\n        \"style\": {\n          \"const\": \"unordered\",\n          \"default\": \"unordered\",\n          \"title\": \"Style\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"items\"\n      ],\n      \"title\": \"BulletedListContent\",\n      \"type\": \"object\"\n    },\n    \"ChecklistContent\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ChecklistItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"items\"\n      ],\n      \"title\": \"ChecklistContent\",\n      \"type\": \"object\"\n    },\n    \"ChecklistItem\": {\n      \"properties\": {\n        \"checked\": {\n          \"title\": \"Checked\",\n          \"type\": \"boolean\"\n        },\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"checked\",\n        \"text\"\n      ],\n      \"title\": \"ChecklistItem\",\n      \"type\": \"object\"\n    },\n    \"HeaderContent\": {\n      \"properties\": {\n        \"level\": {\n          \"enum\": [\n            1,\n            2,\n            3\n          ],\n          \"title\": \"Level\",\n          \"type\": \"integer\"\n        },\n        \"text\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Text\"\n        }\n      },\n      \"required\": [\n        \"level\",\n        \"text\"\n      ],\n      \"title\": \"HeaderContent\",\n      \"type\": \"object\"\n    },\n    \"ImageContent\": {\n      \"properties\": {\n        \"title\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title\"\n        },\n        \"namespace\": {\n          \"default\": \"result\",\n          \"title\": \"Namespace\",\n          \"type\": \"string\"\n        },\n        \"stretched\": {\n          \"default\": false,\n          \"title\": \"Stretched\",\n          \"type\": \"boolean\"\n        },\n        \"withBackground\": {\n          \"default\": false,\n          \"title\": \"Withbackground\",\n          \"type\": \"boolean\"\n        },\n        \"withBorder\": {\n          \"default\": false,\n          \"title\": \"Withborder\",\n          \"type\": \"boolean\"\n        },\n        \"fileKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Filekey\"\n        },\n        \"signedURL\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Signedurl\"\n        }\n      },\n      \"title\": \"ImageContent\",\n      \"type\": \"object\"\n    },\n    \"KetcherContent\": {\n      \"properties\": {\n        \"synthesisId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Synthesisid\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"blockId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Blockid\"\n        },\n        \"data\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Data\"\n        },\n        \"fileKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Filekey\"\n        },\n        \"s3Key\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"S3Key\"\n        },\n        \"png\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Png\"\n        },\n        \"ketcherUrl\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Ketcherurl\"\n        }\n      },\n      \"title\": \"KetcherContent\",\n      \"type\": \"object\"\n    },\n    \"NotebookListItem\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"content\"\n      ],\n      \"title\": \"NotebookListItem\",\n      \"type\": \"object\"\n    },\n    \"NumberedListContent\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        },\n        \"style\": {\n          \"const\": \"ordered\",\n          \"default\": \"ordered\",\n          \"title\": \"Style\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"items\"\n      ],\n      \"title\": \"NumberedListContent\",\n      \"type\": \"object\"\n    },\n    \"ParagraphContent\": {\n      \"properties\": {\n        \"text\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Text\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ],\n      \"title\": \"ParagraphContent\",\n      \"type\": \"object\"\n    },\n    \"PutOperation\": {\n      \"enum\": [\n        \"update\",\n        \"delete\"\n      ],\n      \"title\": \"PutOperation\",\n      \"type\": \"string\"\n    },\n    \"TableContent\": {\n      \"properties\": {\n        \"content\": {\n          \"items\": {\n            \"items\": {\n              \"anyOf\": [\n                {\n                  \"type\": \"string\"\n                },\n                {\n                  \"type\": \"null\"\n                }\n              ]\n            },\n            \"type\": \"array\"\n          },\n          \"title\": \"Content\",\n          \"type\": \"array\"\n        },\n        \"withHeadings\": {\n          \"default\": false,\n          \"title\": \"Withheadings\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"content\"\n      ],\n      \"title\": \"TableContent\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"operation\": {\n      \"$ref\": \"#/$defs/PutOperation\"\n    },\n    \"blockType\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/BlockType\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"content\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/HeaderContent\"\n        },\n        {\n          \"$ref\": \"#/$defs/ParagraphContent\"\n        },\n        {\n          \"$ref\": \"#/$defs/ChecklistContent\"\n        },\n        {\n          \"$ref\": \"#/$defs/AttachesContent\"\n        },\n        {\n          \"$ref\": \"#/$defs/ImageContent\"\n        },\n        {\n          \"$ref\": \"#/$defs/KetcherContent\"\n        },\n        {\n          \"$ref\": \"#/$defs/TableContent\"\n        },\n        {\n          \"$ref\": \"#/$defs/BulletedListContent\"\n        },\n        {\n          \"$ref\": \"#/$defs/NumberedListContent\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Content\"\n    },\n    \"previousBlockId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Previousblockid\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"operation\"\n  ],\n  \"title\": \"PutBlockDatum\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>operation</code>                 (<code>PutOperation</code>)             </li> <li> <code>type</code>                 (<code>BlockType | None</code>)             </li> <li> <code>content</code>                 (<code>NotebookContent | None</code>)             </li> <li> <code>previous_block_id</code>                 (<code>str | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>content_matches_type</code> </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockDatum.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockDatum.operation","title":"operation","text":"<pre><code>operation: PutOperation\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockDatum.type","title":"type","text":"<pre><code>type: BlockType | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockDatum.content","title":"content","text":"<pre><code>content: NotebookContent | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockDatum.previous_block_id","title":"previous_block_id","text":"<pre><code>previous_block_id: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockDatum.content_matches_type","title":"content_matches_type","text":"<pre><code>content_matches_type() -&gt; PutBlockDatum\n</code></pre> Source code in <code>src/albert/resources/notebooks.py</code> <pre><code>@model_validator(mode=\"after\")\ndef content_matches_type(self) -&gt; \"PutBlockDatum\":\n    if self.content is None:\n        return self  # skip check if there's no content\n\n    content_type = allowed_notebook_contents.get(self.type)\n    if content_type and not isinstance(self.content, content_type):\n        msg = f\"The content type and block type do not match. [content_type={type(self.content)}, block_type={self.type}]\"\n        raise AlbertException(msg)\n    return self\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockDatum.model_dump","title":"model_dump","text":"<pre><code>model_dump(**kwargs) -&gt; dict[str, Any]\n</code></pre> <p>Shallow model_dump to exclude None values (None only removed from top level). This ensures required attrs are not removed.</p> Source code in <code>src/albert/resources/notebooks.py</code> <pre><code>def model_dump(self, **kwargs) -&gt; dict[str, Any]:\n    \"\"\"\n    Shallow model_dump to exclude None values (None only removed from top level).\n    This ensures required attrs are not removed.\n    \"\"\"\n    base = super().model_dump(**kwargs)\n    return {k: v for k, v in base.items() if v is not None}\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockPayload","title":"PutBlockPayload","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AttachesContent\": {\n      \"properties\": {\n        \"title\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title\"\n        },\n        \"namespace\": {\n          \"default\": \"result\",\n          \"title\": \"Namespace\",\n          \"type\": \"string\"\n        },\n        \"fileKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Filekey\"\n        },\n        \"mimeType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Mimetype\"\n        },\n        \"signedURL\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Signedurl\"\n        }\n      },\n      \"title\": \"AttachesContent\",\n      \"type\": \"object\"\n    },\n    \"BlockType\": {\n      \"enum\": [\n        \"paragraph\",\n        \"list\",\n        \"header\",\n        \"checklist\",\n        \"image\",\n        \"attaches\",\n        \"ketcher\",\n        \"table\"\n      ],\n      \"title\": \"BlockType\",\n      \"type\": \"string\"\n    },\n    \"BulletedListContent\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        },\n        \"style\": {\n          \"const\": \"unordered\",\n          \"default\": \"unordered\",\n          \"title\": \"Style\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"items\"\n      ],\n      \"title\": \"BulletedListContent\",\n      \"type\": \"object\"\n    },\n    \"ChecklistContent\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ChecklistItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"items\"\n      ],\n      \"title\": \"ChecklistContent\",\n      \"type\": \"object\"\n    },\n    \"ChecklistItem\": {\n      \"properties\": {\n        \"checked\": {\n          \"title\": \"Checked\",\n          \"type\": \"boolean\"\n        },\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"checked\",\n        \"text\"\n      ],\n      \"title\": \"ChecklistItem\",\n      \"type\": \"object\"\n    },\n    \"HeaderContent\": {\n      \"properties\": {\n        \"level\": {\n          \"enum\": [\n            1,\n            2,\n            3\n          ],\n          \"title\": \"Level\",\n          \"type\": \"integer\"\n        },\n        \"text\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Text\"\n        }\n      },\n      \"required\": [\n        \"level\",\n        \"text\"\n      ],\n      \"title\": \"HeaderContent\",\n      \"type\": \"object\"\n    },\n    \"ImageContent\": {\n      \"properties\": {\n        \"title\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Title\"\n        },\n        \"namespace\": {\n          \"default\": \"result\",\n          \"title\": \"Namespace\",\n          \"type\": \"string\"\n        },\n        \"stretched\": {\n          \"default\": false,\n          \"title\": \"Stretched\",\n          \"type\": \"boolean\"\n        },\n        \"withBackground\": {\n          \"default\": false,\n          \"title\": \"Withbackground\",\n          \"type\": \"boolean\"\n        },\n        \"withBorder\": {\n          \"default\": false,\n          \"title\": \"Withborder\",\n          \"type\": \"boolean\"\n        },\n        \"fileKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Filekey\"\n        },\n        \"signedURL\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Signedurl\"\n        }\n      },\n      \"title\": \"ImageContent\",\n      \"type\": \"object\"\n    },\n    \"KetcherContent\": {\n      \"properties\": {\n        \"synthesisId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Synthesisid\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"blockId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Blockid\"\n        },\n        \"data\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Data\"\n        },\n        \"fileKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Filekey\"\n        },\n        \"s3Key\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"S3Key\"\n        },\n        \"png\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Png\"\n        },\n        \"ketcherUrl\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Ketcherurl\"\n        }\n      },\n      \"title\": \"KetcherContent\",\n      \"type\": \"object\"\n    },\n    \"NotebookListItem\": {\n      \"properties\": {\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Content\"\n        },\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"content\"\n      ],\n      \"title\": \"NotebookListItem\",\n      \"type\": \"object\"\n    },\n    \"NumberedListContent\": {\n      \"properties\": {\n        \"items\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/NotebookListItem\"\n          },\n          \"title\": \"Items\",\n          \"type\": \"array\"\n        },\n        \"style\": {\n          \"const\": \"ordered\",\n          \"default\": \"ordered\",\n          \"title\": \"Style\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"items\"\n      ],\n      \"title\": \"NumberedListContent\",\n      \"type\": \"object\"\n    },\n    \"ParagraphContent\": {\n      \"properties\": {\n        \"text\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Text\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ],\n      \"title\": \"ParagraphContent\",\n      \"type\": \"object\"\n    },\n    \"PutBlockDatum\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"operation\": {\n          \"$ref\": \"#/$defs/PutOperation\"\n        },\n        \"blockType\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/BlockType\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"content\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/HeaderContent\"\n            },\n            {\n              \"$ref\": \"#/$defs/ParagraphContent\"\n            },\n            {\n              \"$ref\": \"#/$defs/ChecklistContent\"\n            },\n            {\n              \"$ref\": \"#/$defs/AttachesContent\"\n            },\n            {\n              \"$ref\": \"#/$defs/ImageContent\"\n            },\n            {\n              \"$ref\": \"#/$defs/KetcherContent\"\n            },\n            {\n              \"$ref\": \"#/$defs/TableContent\"\n            },\n            {\n              \"$ref\": \"#/$defs/BulletedListContent\"\n            },\n            {\n              \"$ref\": \"#/$defs/NumberedListContent\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Content\"\n        },\n        \"previousBlockId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Previousblockid\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"operation\"\n      ],\n      \"title\": \"PutBlockDatum\",\n      \"type\": \"object\"\n    },\n    \"PutOperation\": {\n      \"enum\": [\n        \"update\",\n        \"delete\"\n      ],\n      \"title\": \"PutOperation\",\n      \"type\": \"string\"\n    },\n    \"TableContent\": {\n      \"properties\": {\n        \"content\": {\n          \"items\": {\n            \"items\": {\n              \"anyOf\": [\n                {\n                  \"type\": \"string\"\n                },\n                {\n                  \"type\": \"null\"\n                }\n              ]\n            },\n            \"type\": \"array\"\n          },\n          \"title\": \"Content\",\n          \"type\": \"array\"\n        },\n        \"withHeadings\": {\n          \"default\": false,\n          \"title\": \"Withheadings\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"content\"\n      ],\n      \"title\": \"TableContent\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"data\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/PutBlockDatum\"\n      },\n      \"title\": \"Data\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"data\"\n  ],\n  \"title\": \"PutBlockPayload\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data</code>                 (<code>list[PutBlockDatum]</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockPayload.data","title":"data","text":"<pre><code>data: list[PutBlockDatum]\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.PutBlockPayload.model_dump","title":"model_dump","text":"<pre><code>model_dump(**kwargs) -&gt; dict[str, Any]\n</code></pre> <p>model_dump to ensure only top-level None attrs are removed on PutBlockDatum.</p> Source code in <code>src/albert/resources/notebooks.py</code> <pre><code>def model_dump(self, **kwargs) -&gt; dict[str, Any]:\n    \"\"\"model_dump to ensure only top-level None attrs are removed on PutBlockDatum.\"\"\"\n    return {\"data\": [item.model_dump(**kwargs) for item in self.data]}\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyACL","title":"NotebookCopyACL","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>fgclist</code> <code>list[ACL]</code> <code>acl_class</code> <code>str</code>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyACL.fgclist","title":"fgclist","text":"<pre><code>fgclist: list[ACL] = Field(default=None)\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyACL.acl_class","title":"acl_class","text":"<pre><code>acl_class: str = Field(alias='class')\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyInfo","title":"NotebookCopyInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ACL\": {\n      \"description\": \"The Access Control List (ACL) for a user\",\n      \"properties\": {\n        \"id\": {\n          \"description\": \"The id of the user for which this ACL applies\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"fgc\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AccessControlLevel\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The Fine-Grain Control Level\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"ACL\",\n      \"type\": \"object\"\n    },\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    },\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"NotebookCopyACL\": {\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"fgclist\": {\n          \"default\": null,\n          \"items\": {\n            \"$ref\": \"#/$defs/ACL\"\n          },\n          \"title\": \"Fgclist\",\n          \"type\": \"array\"\n        },\n        \"class\": {\n          \"title\": \"Class\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"class\"\n      ],\n      \"title\": \"NotebookCopyACL\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"parentId\": {\n      \"title\": \"Parentid\",\n      \"type\": \"string\"\n    },\n    \"notebookName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Notebookname\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"acl\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/NotebookCopyACL\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"parentId\"\n  ],\n  \"title\": \"NotebookCopyInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>NotebookId</code>)             </li> <li> <code>parent_id</code>                 (<code>str</code>)             </li> <li> <code>notebook_name</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>acl</code>                 (<code>NotebookCopyACL | None</code>)             </li> </ul>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyInfo.id","title":"id","text":"<pre><code>id: NotebookId\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyInfo.parent_id","title":"parent_id","text":"<pre><code>parent_id: str\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyInfo.notebook_name","title":"notebook_name","text":"<pre><code>notebook_name: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyInfo.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/notebooks/#albert.resources.notebooks.NotebookCopyInfo.acl","title":"acl","text":"<pre><code>acl: NotebookCopyACL | None = None\n</code></pre>"},{"location":"resources/notes/","title":"Notes","text":""},{"location":"resources/notes/#albert.resources.notes","title":"albert.resources.notes","text":""},{"location":"resources/notes/#albert.resources.notes.NoteAttachmentEntityLink","title":"NoteAttachmentEntityLink","text":"<p>               Bases: <code>EntityLink</code></p> <p>Entity link for a note attachment w/ an optional signed download URL.</p> <p>Attributes:</p> Name Type Description <code>signed_url</code> <code>str | None</code>"},{"location":"resources/notes/#albert.resources.notes.NoteAttachmentEntityLink.signed_url","title":"signed_url","text":"<pre><code>signed_url: str | None = Field(\n    default=None, alias=\"signedURL\"\n)\n</code></pre>"},{"location":"resources/notes/#albert.resources.notes.Note","title":"Note","text":"<p>               Bases: <code>BaseResource</code></p> <p>Represents a Note on the Albert Platform. Users can be mentioned in notes by using f-string and the User.to_note_mention() method. This allows for easy tagging and referencing of users within notes. example: f\"Hello {tagged_user.to_note_mention()}!\"</p> <p>Attributes:</p> Name Type Description <code>parent_id</code> <code>str</code> <code>note</code> <code>str</code> <code>id</code> <code>str | None</code> <code>attachments</code> <code>list[NoteAttachmentEntityLink] | None</code>"},{"location":"resources/notes/#albert.resources.notes.Note.parent_id","title":"parent_id","text":"<pre><code>parent_id: str = Field(..., alias='parentId')\n</code></pre>"},{"location":"resources/notes/#albert.resources.notes.Note.note","title":"note","text":"<pre><code>note: str\n</code></pre>"},{"location":"resources/notes/#albert.resources.notes.Note.id","title":"id","text":"<pre><code>id: str | None = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/notes/#albert.resources.notes.Note.attachments","title":"attachments","text":"<pre><code>attachments: list[NoteAttachmentEntityLink] | None = Field(\n    default=None,\n    exclude=True,\n    frozen=True,\n    alias=\"Attachments\",\n)\n</code></pre>"},{"location":"resources/parameter_groups/","title":"Parameter Groups","text":""},{"location":"resources/parameter_groups/#albert.resources.parameter_groups","title":"albert.resources.parameter_groups","text":""},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.PGType","title":"PGType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The type of a parameter group</p> <p>Attributes:</p> Name Type Description <code>GENERAL</code> <code>BATCH</code> <code>PROPERTY</code>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.PGType.GENERAL","title":"GENERAL","text":"<pre><code>GENERAL = 'general'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.PGType.BATCH","title":"BATCH","text":"<pre><code>BATCH = 'batch'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.PGType.PROPERTY","title":"PROPERTY","text":"<pre><code>PROPERTY = 'property'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.DataType","title":"DataType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>NUMBER</code> <code>STRING</code> <code>ENUM</code>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.DataType.NUMBER","title":"NUMBER","text":"<pre><code>NUMBER = 'number'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.DataType.STRING","title":"STRING","text":"<pre><code>STRING = 'string'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.DataType.ENUM","title":"ENUM","text":"<pre><code>ENUM = 'enum'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.Operator","title":"Operator","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>BETWEEN</code> <code>LESS_THAN</code> <code>LESS_THAN_OR_EQUAL</code> <code>GREATER_THAN_OR_EQUAL</code> <code>GREATER_THAN</code> <code>EQUALS</code>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.Operator.BETWEEN","title":"BETWEEN","text":"<pre><code>BETWEEN = 'between'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.Operator.LESS_THAN","title":"LESS_THAN","text":"<pre><code>LESS_THAN = 'lt'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.Operator.LESS_THAN_OR_EQUAL","title":"LESS_THAN_OR_EQUAL","text":"<pre><code>LESS_THAN_OR_EQUAL = 'lte'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.Operator.GREATER_THAN_OR_EQUAL","title":"GREATER_THAN_OR_EQUAL","text":"<pre><code>GREATER_THAN_OR_EQUAL = 'gte'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.Operator.GREATER_THAN","title":"GREATER_THAN","text":"<pre><code>GREATER_THAN = 'gt'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.Operator.EQUALS","title":"EQUALS","text":"<pre><code>EQUALS = 'eq'\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.EnumValidationValue","title":"EnumValidationValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Represents a value for an enum type validation.</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>The text of the enum value.</p> <code>id</code> <code>str | None</code> <p>The ID of the enum value. If not provided, the ID will be generated upon creation.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Represents a value for an enum type validation.\\n\\nAttributes\\n----------\\ntext : str\\n    The text of the enum value.\\nid : str | None\\n    The ID of the enum value. If not provided, the ID will be generated upon creation.\",\n  \"properties\": {\n    \"text\": {\n      \"title\": \"Text\",\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"originalText\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Originaltext\"\n    }\n  },\n  \"required\": [\n    \"text\"\n  ],\n  \"title\": \"EnumValidationValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>text</code>                 (<code>str</code>)             </li> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>original_text</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.EnumValidationValue.text","title":"text","text":"<pre><code>text: str\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.EnumValidationValue.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.EnumValidationValue.original_text","title":"original_text","text":"<pre><code>original_text: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ValueValidation","title":"ValueValidation","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"DataType\": {\n      \"enum\": [\n        \"number\",\n        \"string\",\n        \"enum\"\n      ],\n      \"title\": \"DataType\",\n      \"type\": \"string\"\n    },\n    \"EnumValidationValue\": {\n      \"description\": \"Represents a value for an enum type validation.\\n\\nAttributes\\n----------\\ntext : str\\n    The text of the enum value.\\nid : str | None\\n    The ID of the enum value. If not provided, the ID will be generated upon creation.\",\n      \"properties\": {\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"originalText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originaltext\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ],\n      \"title\": \"EnumValidationValue\",\n      \"type\": \"object\"\n    },\n    \"Operator\": {\n      \"enum\": [\n        \"between\",\n        \"lt\",\n        \"lte\",\n        \"gte\",\n        \"gt\",\n        \"eq\"\n      ],\n      \"title\": \"Operator\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"datatype\": {\n      \"$ref\": \"#/$defs/DataType\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/EnumValidationValue\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"min\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Min\"\n    },\n    \"max\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Max\"\n    },\n    \"operator\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Operator\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"required\": [\n    \"datatype\"\n  ],\n  \"title\": \"ValueValidation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>datatype</code>                 (<code>DataType</code>)             </li> <li> <code>value</code>                 (<code>str | list[EnumValidationValue] | None</code>)             </li> <li> <code>min</code>                 (<code>str | None</code>)             </li> <li> <code>max</code>                 (<code>str | None</code>)             </li> <li> <code>operator</code>                 (<code>Operator | None</code>)             </li> </ul>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ValueValidation.datatype","title":"datatype","text":"<pre><code>datatype: DataType\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ValueValidation.value","title":"value","text":"<pre><code>value: str | list[EnumValidationValue] | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ValueValidation.min","title":"min","text":"<pre><code>min: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ValueValidation.max","title":"max","text":"<pre><code>max: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ValueValidation.operator","title":"operator","text":"<pre><code>operator: Operator | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue","title":"ParameterValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>The value of a parameter in a parameter group.</p> <p>Attributes:</p> Name Type Description <code>parameter</code> <code>Parameter | None</code> <p>The Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.</p> <code>category</code> <code>ParameterCategory</code> <p>The category of the parameter.</p> <code>short_name</code> <code>str | None</code> <p>The short name of the parameter value.</p> <code>value</code> <code>str | None</code> <p>The default value of the parameter. Can be a string or an InventoryItem (if, for example, the parameter is an instrumnt choice).</p> <code>unit</code> <code>Unit | None</code> <p>The unit of measure for the provided parameter value.</p> <code>name</code> <code>str</code> <p>The name of the parameter. Read-only.</p> <code>sequence</code> <code>int</code> <p>The sequence of the parameter. Read-only.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ACL\": {\n      \"description\": \"The Access Control List (ACL) for a user\",\n      \"properties\": {\n        \"id\": {\n          \"description\": \"The id of the user for which this ACL applies\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"fgc\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AccessControlLevel\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The Fine-Grain Control Level\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"ACL\",\n      \"type\": \"object\"\n    },\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    },\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"Cas\": {\n      \"description\": \"Represents a CAS entity.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"number\": {\n          \"description\": \"The CAS number.\",\n          \"title\": \"Number\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Name of the CAS.\",\n          \"title\": \"Name\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The description or name of the CAS.\",\n          \"title\": \"Description\"\n        },\n        \"notes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Notes related to the CAS.\",\n          \"title\": \"Notes\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CasCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The category of the CAS.\"\n        },\n        \"casSmiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS SMILES notation.\",\n          \"title\": \"Cassmiles\"\n        },\n        \"inchiKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"InChIKey of the CAS.\",\n          \"title\": \"Inchikey\"\n        },\n        \"iUpacName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"IUPAC name of the CAS.\",\n          \"title\": \"Iupacname\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The AlbertID of the CAS.\",\n          \"title\": \"Albertid\"\n        },\n        \"hazards\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Hazard\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazards associated with the CAS.\",\n          \"title\": \"Hazards\"\n        },\n        \"wgk\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"German Water Hazard Class (WGK) number.\",\n          \"title\": \"Wgk\"\n        },\n        \"ecListNo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"European Community (EC) number.\",\n          \"title\": \"Eclistno\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Type of the CAS.\",\n          \"title\": \"Type\"\n        },\n        \"classificationType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Classification type of the CAS.\",\n          \"title\": \"Classificationtype\"\n        },\n        \"order\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS order.\",\n          \"title\": \"Order\"\n        },\n        \"Metadata\": {\n          \"additionalProperties\": {\n            \"anyOf\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              },\n              {\n                \"items\": {\n                  \"$ref\": \"#/$defs/EntityLink\"\n                },\n                \"type\": \"array\"\n              }\n            ]\n          },\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        }\n      },\n      \"required\": [\n        \"number\"\n      ],\n      \"title\": \"Cas\",\n      \"type\": \"object\"\n    },\n    \"CasAmount\": {\n      \"description\": \"CasAmount is a Pydantic model representing an amount of a given CAS.\\n\\nAttributes\\n----------\\nmin : float\\n    The minimum amount of the CAS in the formulation.\\nmax : float\\n    The maximum amount of the CAS in the formulation.\\ntarget: float | None\\n    The inventory value or target of the CAS in the formulation.\\nid : str | None\\n    The Albert ID of the CAS Number Resource this amount represents. Provide either a Cas or an ID.\\ncas : Cas | None\\n    The CAS object associated with this amount. Provide either a Cas or an id.\\ncas_smiles: str | None\\n    The SMILES string of the CAS Number resource. Obtained from the Cas object when provided.\\nnumber: str | None\\n    The CAS number. Obtained from the Cas object when provided.\",\n      \"properties\": {\n        \"min\": {\n          \"title\": \"Min\",\n          \"type\": \"number\"\n        },\n        \"max\": {\n          \"title\": \"Max\",\n          \"type\": \"number\"\n        },\n        \"inventoryValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Inventoryvalue\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"casCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cascategory\"\n        },\n        \"cas\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Cas\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"casSmiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cassmiles\"\n        },\n        \"number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Number\"\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CasAuditFieldsWithEmail\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"min\",\n        \"max\"\n      ],\n      \"title\": \"CasAmount\",\n      \"type\": \"object\"\n    },\n    \"CasAuditFieldsWithEmail\": {\n      \"description\": \"The audit fields for a CAS resource with email\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        },\n        \"email\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Email\"\n        }\n      },\n      \"title\": \"CasAuditFieldsWithEmail\",\n      \"type\": \"object\"\n    },\n    \"CasCategory\": {\n      \"enum\": [\n        \"User\",\n        \"Verisk\",\n        \"TSCA - Public\",\n        \"TSCA - Private\",\n        \"not TSCA\",\n        \"CAS linked to External Database\",\n        \"Unknown (Trade Secret)\",\n        \"CL_Inventory Upload\"\n      ],\n      \"title\": \"CasCategory\",\n      \"type\": \"string\"\n    },\n    \"Company\": {\n      \"description\": \"Company is a Pydantic model representing a company entity.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the company.\\nid : str | None\\n    The Albert ID of the company. Set when the company is retrieved from Albert.\\ndistance : float | None\\n    The scores of a company in a search result, optional. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"distance\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Distance\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Company\",\n      \"type\": \"object\"\n    },\n    \"DataType\": {\n      \"enum\": [\n        \"number\",\n        \"string\",\n        \"enum\"\n      ],\n      \"title\": \"DataType\",\n      \"type\": \"string\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"EnumValidationValue\": {\n      \"description\": \"Represents a value for an enum type validation.\\n\\nAttributes\\n----------\\ntext : str\\n    The text of the enum value.\\nid : str | None\\n    The ID of the enum value. If not provided, the ID will be generated upon creation.\",\n      \"properties\": {\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"originalText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originaltext\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ],\n      \"title\": \"EnumValidationValue\",\n      \"type\": \"object\"\n    },\n    \"Hazard\": {\n      \"description\": \"Represents a chemical hazard.\",\n      \"properties\": {\n        \"subCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard subcategory\",\n          \"title\": \"Subcategory\"\n        },\n        \"hCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code\",\n          \"title\": \"Hcode\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard category\",\n          \"title\": \"Category\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard classification\",\n          \"title\": \"Class\"\n        },\n        \"hCodeText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code text\",\n          \"title\": \"Hcodetext\"\n        }\n      },\n      \"title\": \"Hazard\",\n      \"type\": \"object\"\n    },\n    \"InventoryCategory\": {\n      \"enum\": [\n        \"RawMaterials\",\n        \"Consumables\",\n        \"Equipment\",\n        \"Formulas\"\n      ],\n      \"title\": \"InventoryCategory\",\n      \"type\": \"string\"\n    },\n    \"InventoryItem\": {\n      \"description\": \"An InventoryItem is a Pydantic model representing an item in the inventory. Can be a raw material, consumable, equipment, or formula.\\nNote: Formulas should be registered via the Worksheet collection / Sheet resource.\\n\\nReturns\\n-------\\nInventoryItem\\n    An InventoryItem that can be used to represent an item in the inventory. Can be a raw material, consumable, equipment, or formula.\\n\\nAttributes\\n------\\n\\nname : str\\n    The name of the InventoryItem.\\nid : str | None\\n    The Albert ID of the InventoryItem. Set when the InventoryItem is retrieved from Albert.\\ndescription : str | None\\n    The description of the InventoryItem.\\ncategory : InventoryCategory\\n    The category of the InventoryItem. Allowed values are `RawMaterials`, `Consumables`, `Equipment`, and `Formulas`.\\nunit_category : InventoryUnitCategory\\n    The unit category of the InventoryItem. Can be mass, volume, length, pressure, or units. By default, mass is used for RawMaterials and Formulas, and units is used for Equipment and Consumables.\\nsecurity_class : SecurityClass | None\\n    The security class of the InventoryItem. Optional. Can be confidential, shared, or restricted.\\ncompany : Company | str | None\\n    The company associated with the InventoryItem. Can be a Company object or a string. If a String is provided, a Company object with the name of the provided string will be first-or-created.\\nminimum : list[InventoryMinimum] | None\\n    The minimum amount of the InventoryItem that must be kept in stock at a given Location. Optional.\\nalias : str | None\\n    An alias for the InventoryItem. Optional.\\ncas : list[CasAmount] | None\\n    The CAS numbers associated with the InventoryItem. This is how a compositional breakdown can be provided. Optional.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\\n    Metadata associated with the InventoryItem. Optional. Allowed metadata fields can be found in the CustomFields documentation.\\nproject_id : str | None\\n    The project ID associated with the InventoryItem. Read Only. Required for Formulas.\\nformula_id : str | None\\n    The formula ID associated with the InventoryItem. Read Only.\\ntags : list[str|Tag] | None\\n    The tags associated with the InventoryItem. Optional. If a string is provided, a Tag object with the name of the provided string will be first-or-created.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Tags\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/Tag\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tags\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"category\": {\n          \"$ref\": \"#/$defs/InventoryCategory\"\n        },\n        \"unitCategory\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/InventoryUnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SecurityClass\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Company\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Company\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Company\"\n        },\n        \"minimum\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/InventoryMinimum\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minimum\"\n        },\n        \"alias\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Alias\"\n        },\n        \"Cas\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/CasAmount\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cas\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"parentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentid\"\n        },\n        \"ACL\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ACL\"\n          },\n          \"title\": \"Acl\",\n          \"type\": \"array\"\n        },\n        \"TaskConfig\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"additionalProperties\": true,\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Taskconfig\"\n        },\n        \"formulaId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Formulaid\"\n        },\n        \"Symbols\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"additionalProperties\": true,\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbols\"\n        },\n        \"unNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unnumber\"\n        },\n        \"recentAttachmentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Recentattachmentid\"\n        }\n      },\n      \"required\": [\n        \"category\"\n      ],\n      \"title\": \"InventoryItem\",\n      \"type\": \"object\"\n    },\n    \"InventoryMinimum\": {\n      \"description\": \"Defined the minimum amount of an InventoryItem that must be kept in stock at a given Location.\\n\\nAttributes\\n----------\\nid : str\\n    The unique identifier of the Location object associated with this InventoryMinimum.\\n    Provide either a Location or a location id.\\nlocation : Location\\n    The Location object associated with this InventoryMinimum. Provide either a Location or a location id.\\nminimum : float\\n    The minimum amount of the InventoryItem that must be kept in stock at the given Location.\",\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"minimum\": {\n          \"maximum\": 1000000000000000,\n          \"minimum\": 0,\n          \"title\": \"Minimum\",\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"minimum\"\n      ],\n      \"title\": \"InventoryMinimum\",\n      \"type\": \"object\"\n    },\n    \"InventoryUnitCategory\": {\n      \"enum\": [\n        \"mass\",\n        \"volume\",\n        \"length\",\n        \"pressure\",\n        \"units\"\n      ],\n      \"title\": \"InventoryUnitCategory\",\n      \"type\": \"string\"\n    },\n    \"Location\": {\n      \"description\": \"A location in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the location.\\nid : str | None\\n    The Albert ID of the location. Set when the location is retrieved from Albert.\\nlatitude : float\\n    The latitude of the location.\\nlongitude : float\\n    The longitude of the location.\\naddress : str\\n    The address of the location.\\ncountry : str | None\\n    The country code of the location. Must be two characters long.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"latitude\": {\n          \"title\": \"Latitude\",\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"title\": \"Longitude\",\n          \"type\": \"number\"\n        },\n        \"address\": {\n          \"title\": \"Address\",\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"anyOf\": [\n            {\n              \"maxLength\": 2,\n              \"minLength\": 2,\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Country\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"latitude\",\n        \"longitude\",\n        \"address\"\n      ],\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Operator\": {\n      \"enum\": [\n        \"between\",\n        \"lt\",\n        \"lte\",\n        \"gte\",\n        \"gt\",\n        \"eq\"\n      ],\n      \"title\": \"Operator\",\n      \"type\": \"string\"\n    },\n    \"Parameter\": {\n      \"description\": \"A parameter in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the parameter. Names must be unique.\\nid : str | None\\n    The Albert ID of the parameter. Set when the parameter is retrieved from Albert.\\ncategory : ParameterCategory\\n    The category of the parameter. Allowed values are `Normal` and `Special`. Read-only.\\nrank : int\\n    The rank of the returned parameter. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"rank\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rank\"\n        },\n        \"required\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Required\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Parameter\",\n      \"type\": \"object\"\n    },\n    \"ParameterCategory\": {\n      \"description\": \"The category of a parameter\",\n      \"enum\": [\n        \"Normal\",\n        \"Special\"\n      ],\n      \"title\": \"ParameterCategory\",\n      \"type\": \"string\"\n    },\n    \"SecurityClass\": {\n      \"description\": \"The security class of a resource\",\n      \"enum\": [\n        \"shared\",\n        \"restricted\",\n        \"confidential\",\n        \"private\"\n      ],\n      \"title\": \"SecurityClass\",\n      \"type\": \"string\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Tag\": {\n      \"description\": \"Tag is a Pydantic model representing a tag entity.\\n\\nAttributes\\n----------\\ntag : str\\n    The name of the tag.\\nid : str | None\\n    The Albert ID of the tag. Set when the tag is retrieved from Albert.\\n\\nMethods\\n-------\\nfrom_string(tag: str) -&gt; \\\"Tag\\\"\\n    Creates a Tag object from a string.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Tag\",\n      \"type\": \"object\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    },\n    \"ValueValidation\": {\n      \"properties\": {\n        \"datatype\": {\n          \"$ref\": \"#/$defs/DataType\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/EnumValidationValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Min\"\n        },\n        \"max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max\"\n        },\n        \"operator\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Operator\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"datatype\"\n      ],\n      \"title\": \"ValueValidation\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"The value of a parameter in a parameter group.\\n\\nAttributes\\n----------\\nparameter : Parameter | None\\n    The Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.\\nid : str | None\\n    The Albert ID of the Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.\\ncategory: ParameterCategory\\n    The category of the parameter.\\nshort_name : str | None\\n    The short name of the parameter value.\\nvalue : str | None\\n    The default value of the parameter. Can be a string or an InventoryItem (if, for example, the parameter is an instrumnt choice).\\nunit : Unit | None\\n    The unit of measure for the provided parameter value.\\nname : str\\n    The name of the parameter. Read-only.\\nsequence : int\\n    The sequence of the parameter. Read-only.\",\n  \"properties\": {\n    \"parameter\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Parameter\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"category\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/ParameterCategory\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"shortName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Shortname\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"$ref\": \"#/$defs/InventoryItem\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"Unit\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Unit\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    },\n    \"Added\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/AuditFields\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"validation\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ValueValidation\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Validation\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"sequence\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sequence\"\n    },\n    \"originalShortName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Originalshortname\"\n    },\n    \"originalName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Originalname\"\n    }\n  },\n  \"title\": \"ParameterValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>parameter</code>                 (<code>Parameter | None</code>)             </li> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>category</code>                 (<code>ParameterCategory | None</code>)             </li> <li> <code>short_name</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>str | SerializeAsEntityLink[InventoryItem] | None</code>)             </li> <li> <code>unit</code>                 (<code>SerializeAsEntityLink[Unit] | None</code>)             </li> <li> <code>added</code>                 (<code>AuditFields | None</code>)             </li> <li> <code>validation</code>                 (<code>list[ValueValidation] | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>sequence</code>                 (<code>str | None</code>)             </li> <li> <code>original_short_name</code>                 (<code>str | None</code>)             </li> <li> <code>original_name</code>                 (<code>str | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_parameter_value</code>                 \u2192                   <code>value</code> </li> <li> <code>set_parameter_fields</code> </li> </ul>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.parameter","title":"parameter","text":"<pre><code>parameter: Parameter | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.category","title":"category","text":"<pre><code>category: ParameterCategory | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.short_name","title":"short_name","text":"<pre><code>short_name: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.value","title":"value","text":"<pre><code>value: str | SerializeAsEntityLink[InventoryItem] | None = (\n    None\n)\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.unit","title":"unit","text":"<pre><code>unit: SerializeAsEntityLink[Unit] | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.added","title":"added","text":"<pre><code>added: AuditFields | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.validation","title":"validation","text":"<pre><code>validation: list[ValueValidation] | None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.sequence","title":"sequence","text":"<pre><code>sequence: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.original_short_name","title":"original_short_name","text":"<pre><code>original_short_name: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.original_name","title":"original_name","text":"<pre><code>original_name: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.validate_parameter_value","title":"validate_parameter_value","text":"<pre><code>validate_parameter_value(value: Any) -&gt; Any\n</code></pre> Source code in <code>src/albert/resources/parameter_groups.py</code> <pre><code>@field_validator(\"value\", mode=\"before\")\n@classmethod\ndef validate_parameter_value(cls, value: Any) -&gt; Any:\n    # Bug in ParameterGroups sometimes returns incorrect JSON from batch endpoint\n    # Set to None if value is a dict but no ID field\n    # Reference: https://linear.app/albert-invent/issue/IN-10\n    if isinstance(value, dict) and \"id\" not in value:\n        return None\n    return value\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterValue.set_parameter_fields","title":"set_parameter_fields","text":"<pre><code>set_parameter_fields() -&gt; ParameterValue\n</code></pre> Source code in <code>src/albert/resources/parameter_groups.py</code> <pre><code>@model_validator(mode=\"after\")\ndef set_parameter_fields(self) -&gt; \"ParameterValue\":\n    if self.parameter is None and self.id is None:\n        raise ValueError(\"Please provide either an id or an parameter object.\")\n\n    if self.parameter is not None:\n        object.__setattr__(self, \"id\", self.parameter.id)\n        object.__setattr__(self, \"category\", self.parameter.category)\n        object.__setattr__(self, \"name\", self.parameter.name)\n\n    return self\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup","title":"ParameterGroup","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Use 'Standards' key in metadata to store standards</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <code>type</code> <code>PGType | None</code> <code>id</code> <code>str | None</code> <code>description</code> <code>str | None</code> <code>security_class</code> <code>SecurityClass</code> <code>acl</code> <code>list[SerializeAsEntityLink[User]] | None</code> <code>metadata</code> <code>dict[str, MetadataItem]</code> <code>parameters</code> <code>list[ParameterValue]</code> <code>verified</code> <code>bool</code> <code>documents</code> <code>list[EntityLink]</code>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.type","title":"type","text":"<pre><code>type: PGType | None = Field(default=None)\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.id","title":"id","text":"<pre><code>id: str | None = Field(None, alias='albertId')\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.description","title":"description","text":"<pre><code>description: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.security_class","title":"security_class","text":"<pre><code>security_class: SecurityClass = Field(\n    default=RESTRICTED, alias=\"class\"\n)\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.acl","title":"acl","text":"<pre><code>acl: list[SerializeAsEntityLink[User]] | None = Field(\n    default=None, alias=\"ACL\"\n)\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] = Field(\n    alias=\"Metadata\", default_factory=dict\n)\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.parameters","title":"parameters","text":"<pre><code>parameters: list[ParameterValue] = Field(\n    default_factory=list, alias=\"Parameters\"\n)\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.verified","title":"verified","text":"<pre><code>verified: bool = Field(\n    default=False, exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroup.documents","title":"documents","text":"<pre><code>documents: list[EntityLink] = Field(\n    default_factory=list, exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterSearchItemParameter","title":"ParameterSearchItemParameter","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"LocalizedNames\": {\n      \"properties\": {\n        \"de\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"De\"\n        },\n        \"ja\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Ja\"\n        },\n        \"zh\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Zh\"\n        },\n        \"es\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Es\"\n        }\n      },\n      \"title\": \"LocalizedNames\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"localizedNames\": {\n      \"$ref\": \"#/$defs/LocalizedNames\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"id\",\n    \"localizedNames\"\n  ],\n  \"title\": \"ParameterSearchItemParameter\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>localized_names</code>                 (<code>LocalizedNames</code>)             </li> </ul>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterSearchItemParameter.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterSearchItemParameter.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterSearchItemParameter.localized_names","title":"localized_names","text":"<pre><code>localized_names: LocalizedNames\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroupSearchItem","title":"ParameterGroupSearchItem","text":"<p>               Bases: <code>BaseAlbertModel</code>, <code>HydrationMixin[ParameterGroup]</code></p> <p>Lightweight representation of a ParameterGroup returned from unhydrated search().</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"LocalizedNames\": {\n      \"properties\": {\n        \"de\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"De\"\n        },\n        \"ja\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Ja\"\n        },\n        \"zh\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Zh\"\n        },\n        \"es\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Es\"\n        }\n      },\n      \"title\": \"LocalizedNames\",\n      \"type\": \"object\"\n    },\n    \"PGType\": {\n      \"description\": \"The type of a parameter group\",\n      \"enum\": [\n        \"general\",\n        \"batch\",\n        \"property\"\n      ],\n      \"title\": \"PGType\",\n      \"type\": \"string\"\n    },\n    \"ParameterSearchItemParameter\": {\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"localizedNames\": {\n          \"$ref\": \"#/$defs/LocalizedNames\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"id\",\n        \"localizedNames\"\n      ],\n      \"title\": \"ParameterSearchItemParameter\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"Lightweight representation of a ParameterGroup returned from unhydrated search().\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/PGType\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"albertId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Albertid\"\n    },\n    \"description\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Description\"\n    },\n    \"parameters\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/ParameterSearchItemParameter\"\n      },\n      \"title\": \"Parameters\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"title\": \"ParameterGroupSearchItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>_collection</code>                 (<code>BaseCollection | None</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>PGType | None</code>)             </li> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>description</code>                 (<code>str | None</code>)             </li> <li> <code>parameters</code>                 (<code>list[ParameterSearchItemParameter]</code>)             </li> </ul>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroupSearchItem.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroupSearchItem.type","title":"type","text":"<pre><code>type: PGType | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroupSearchItem.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroupSearchItem.description","title":"description","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"resources/parameter_groups/#albert.resources.parameter_groups.ParameterGroupSearchItem.parameters","title":"parameters","text":"<pre><code>parameters: list[ParameterSearchItemParameter]\n</code></pre>"},{"location":"resources/parameters/","title":"Parameters","text":""},{"location":"resources/parameters/#albert.resources.parameters","title":"albert.resources.parameters","text":""},{"location":"resources/parameters/#albert.resources.parameters.ParameterCategory","title":"ParameterCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The category of a parameter</p> <p>Attributes:</p> Name Type Description <code>NORMAL</code> <code>SPECIAL</code>"},{"location":"resources/parameters/#albert.resources.parameters.ParameterCategory.NORMAL","title":"NORMAL","text":"<pre><code>NORMAL = 'Normal'\n</code></pre>"},{"location":"resources/parameters/#albert.resources.parameters.ParameterCategory.SPECIAL","title":"SPECIAL","text":"<pre><code>SPECIAL = 'Special'\n</code></pre>"},{"location":"resources/parameters/#albert.resources.parameters.Parameter","title":"Parameter","text":"<p>               Bases: <code>BaseResource</code></p> <p>A parameter in Albert.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the parameter. Names must be unique.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the parameter. Set when the parameter is retrieved from Albert.</p> <code>category</code> <code>ParameterCategory</code> <p>The category of the parameter. Allowed values are <code>Normal</code> and <code>Special</code>. Read-only.</p> <code>rank</code> <code>int</code> <p>The rank of the returned parameter. Read-only.</p>"},{"location":"resources/parameters/#albert.resources.parameters.Parameter.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/parameters/#albert.resources.parameters.Parameter.id","title":"id","text":"<pre><code>id: str | None = Field(alias='albertId', default=None)\n</code></pre>"},{"location":"resources/parameters/#albert.resources.parameters.Parameter.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] | None = Field(\n    alias=\"Metadata\", default=None\n)\n</code></pre>"},{"location":"resources/parameters/#albert.resources.parameters.Parameter.category","title":"category","text":"<pre><code>category: ParameterCategory | None = Field(\n    default=None, exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/parameters/#albert.resources.parameters.Parameter.rank","title":"rank","text":"<pre><code>rank: int | None = Field(\n    default=None, exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/parameters/#albert.resources.parameters.Parameter.required","title":"required","text":"<pre><code>required: bool | None = Field(default=None, exclude=True)\n</code></pre>"},{"location":"resources/pricings/","title":"Pricings","text":""},{"location":"resources/pricings/#albert.resources.pricings","title":"albert.resources.pricings","text":""},{"location":"resources/pricings/#albert.resources.pricings.LeadTimeUnit","title":"LeadTimeUnit","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The unit of measure for the provided lead time.</p> <p>Attributes:</p> Name Type Description <code>DAYS</code> <code>WEEKS</code> <code>MONTHS</code>"},{"location":"resources/pricings/#albert.resources.pricings.LeadTimeUnit.DAYS","title":"DAYS","text":"<pre><code>DAYS = 'Days'\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.LeadTimeUnit.WEEKS","title":"WEEKS","text":"<pre><code>WEEKS = 'Weeks'\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.LeadTimeUnit.MONTHS","title":"MONTHS","text":"<pre><code>MONTHS = 'Months'\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing","title":"Pricing","text":"<p>               Bases: <code>BaseResource</code></p> <p>A Price of a given InventoryItem at a given Location.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str | None</code> <p>The Albert ID of the pricing. Set when the pricing is retrieved from Albert.</p> <code>inventory_id</code> <code>str</code> <p>The Albert ID of the inventory item.</p> <code>company</code> <code>Company</code> <p>The company that the pricing belongs to.</p> <code>location</code> <code>Location</code> <p>The location that the pricing belongs to.</p> <code>description</code> <code>str | None</code> <p>The description of the pricing. Optional.</p> <code>pack_size</code> <code>str | None</code> <p>The pack size of the pricing. Optional. Used to calculate the cost per unit.</p> <code>price</code> <code>float</code> <p>The price of the pricing IN CURRENCY/ KG or CURRENCY/L! Must do the conversion! Depends on InventoryItem's unit of measure.</p> <code>currency</code> <code>str</code> <p>The currency of the pricing. Defaults to <code>USD</code>.</p> <code>fob</code> <code>str | None</code> <p>The FOB of the pricing. Optional.</p> <code>lead_time</code> <code>int | None</code> <p>The lead time of the pricing. Optional.</p> <code>lead_time_unit</code> <code>LeadTimeUnit | None</code> <p>The unit of measure for the provided lead time. Optional.</p> <code>expiration_date</code> <code>str | None</code> <p>The expiration date of the pricing. YYYY-MM-DD format.</p>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.id","title":"id","text":"<pre><code>id: str | None = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: str | None = Field(\n    default=None, alias=\"parentId\"\n)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.company","title":"company","text":"<pre><code>company: SerializeAsEntityLink[Company] = Field(\n    alias=\"Company\"\n)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.location","title":"location","text":"<pre><code>location: SerializeAsEntityLink[Location] = Field(\n    alias=\"Location\"\n)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.description","title":"description","text":"<pre><code>description: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.pack_size","title":"pack_size","text":"<pre><code>pack_size: str | None = Field(\n    default=None, alias=\"packSize\"\n)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.price","title":"price","text":"<pre><code>price: float = Field(ge=0, le=9999999999)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.currency","title":"currency","text":"<pre><code>currency: str = Field(default='USD', alias='currency')\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.fob","title":"fob","text":"<pre><code>fob: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.lead_time","title":"lead_time","text":"<pre><code>lead_time: int | None = Field(\n    default=None, alias=\"leadTime\"\n)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.lead_time_unit","title":"lead_time_unit","text":"<pre><code>lead_time_unit: LeadTimeUnit | None = Field(\n    default=None, alias=\"leadTimeUnit\"\n)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.expiration_date","title":"expiration_date","text":"<pre><code>expiration_date: str | None = Field(\n    default=None, alias=\"expirationDate\"\n)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.Pricing.default","title":"default","text":"<pre><code>default: int | None = Field(\n    default=None, exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.InventoryPricings","title":"InventoryPricings","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Pricings for a given InventoryItem.</p> <p>Attributes:</p> Name Type Description <code>inventory_id</code> <code>Inventory</code> <p>The inventory ID the pricings belong to.</p> <code>pricings</code> <code>list[Pricing]</code> <p>The list of pricings.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"Company\": {\n      \"description\": \"Company is a Pydantic model representing a company entity.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the company.\\nid : str | None\\n    The Albert ID of the company. Set when the company is retrieved from Albert.\\ndistance : float | None\\n    The scores of a company in a search result, optional. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"distance\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Distance\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Company\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"LeadTimeUnit\": {\n      \"description\": \"The unit of measure for the provided lead time.\",\n      \"enum\": [\n        \"Days\",\n        \"Weeks\",\n        \"Months\"\n      ],\n      \"title\": \"LeadTimeUnit\",\n      \"type\": \"string\"\n    },\n    \"Location\": {\n      \"description\": \"A location in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the location.\\nid : str | None\\n    The Albert ID of the location. Set when the location is retrieved from Albert.\\nlatitude : float\\n    The latitude of the location.\\nlongitude : float\\n    The longitude of the location.\\naddress : str\\n    The address of the location.\\ncountry : str | None\\n    The country code of the location. Must be two characters long.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"latitude\": {\n          \"title\": \"Latitude\",\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"title\": \"Longitude\",\n          \"type\": \"number\"\n        },\n        \"address\": {\n          \"title\": \"Address\",\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"anyOf\": [\n            {\n              \"maxLength\": 2,\n              \"minLength\": 2,\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Country\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"latitude\",\n        \"longitude\",\n        \"address\"\n      ],\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Pricing\": {\n      \"description\": \"A Price of a given InventoryItem at a given Location.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the pricing. Set when the pricing is retrieved from Albert.\\ninventory_id : str\\n    The Albert ID of the inventory item.\\ncompany : Company\\n    The company that the pricing belongs to.\\nlocation : Location\\n    The location that the pricing belongs to.\\ndescription : str | None\\n    The description of the pricing. Optional.\\npack_size : str | None\\n    The pack size of the pricing. Optional. Used to calculate the cost per unit.\\nprice : float\\n    The price of the pricing IN CURRENCY/ KG or CURRENCY/L! Must do the conversion! Depends on InventoryItem's unit of measure.\\ncurrency : str\\n    The currency of the pricing. Defaults to `USD`.\\nfob : str | None\\n    The FOB of the pricing. Optional.\\nlead_time : int | None\\n    The lead time of the pricing. Optional.\\nlead_time_unit : LeadTimeUnit | None\\n    The unit of measure for the provided lead time. Optional.\\nexpiration_date : str | None\\n    The expiration date of the pricing. YYYY-MM-DD format.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"parentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentid\"\n        },\n        \"Company\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Company\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            }\n          ],\n          \"title\": \"Company\"\n        },\n        \"Location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            }\n          ],\n          \"title\": \"Location\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"packSize\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Packsize\"\n        },\n        \"price\": {\n          \"maximum\": 9999999999,\n          \"minimum\": 0,\n          \"title\": \"Price\",\n          \"type\": \"number\"\n        },\n        \"currency\": {\n          \"default\": \"USD\",\n          \"title\": \"Currency\",\n          \"type\": \"string\"\n        },\n        \"fob\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Fob\"\n        },\n        \"leadTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Leadtime\"\n        },\n        \"leadTimeUnit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/LeadTimeUnit\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"expirationDate\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Expirationdate\"\n        },\n        \"default\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Default\"\n        }\n      },\n      \"required\": [\n        \"Company\",\n        \"Location\",\n        \"price\"\n      ],\n      \"title\": \"Pricing\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"Pricings for a given InventoryItem.\\n\\nAttributes\\n----------\\ninventory_id : Inventory\\n    The inventory ID the pricings belong to.\\npricings : list[Pricing]\\n    The list of pricings.\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"pricings\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Pricing\"\n      },\n      \"title\": \"Pricings\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"pricings\"\n  ],\n  \"title\": \"InventoryPricings\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>inventory_id</code>                 (<code>InventoryId</code>)             </li> <li> <code>pricings</code>                 (<code>list[Pricing]</code>)             </li> </ul>"},{"location":"resources/pricings/#albert.resources.pricings.InventoryPricings.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: InventoryId\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.InventoryPricings.pricings","title":"pricings","text":"<pre><code>pricings: list[Pricing]\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.PricingBy","title":"PricingBy","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>LOCATION</code> <code>COMPANY</code>"},{"location":"resources/pricings/#albert.resources.pricings.PricingBy.LOCATION","title":"LOCATION","text":"<pre><code>LOCATION = 'Location'\n</code></pre>"},{"location":"resources/pricings/#albert.resources.pricings.PricingBy.COMPANY","title":"COMPANY","text":"<pre><code>COMPANY = 'Company'\n</code></pre>"},{"location":"resources/product_design/","title":"Product Design","text":""},{"location":"resources/product_design/#albert.resources.product_design","title":"albert.resources.product_design","text":""},{"location":"resources/product_design/#albert.resources.product_design.CasLevelSubstance","title":"CasLevelSubstance","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"casPrimaryKeyId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Casprimarykeyid\"\n    },\n    \"casID\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Casid\"\n    },\n    \"amount\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Amount\"\n    }\n  },\n  \"title\": \"CasLevelSubstance\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>cas_primary_key_id</code>                 (<code>str | None</code>)             </li> <li> <code>cas_id</code>                 (<code>str | None</code>)             </li> <li> <code>amount</code>                 (<code>float | None</code>)             </li> </ul>"},{"location":"resources/product_design/#albert.resources.product_design.CasLevelSubstance.cas_primary_key_id","title":"cas_primary_key_id","text":"<pre><code>cas_primary_key_id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.CasLevelSubstance.cas_id","title":"cas_id","text":"<pre><code>cas_id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.CasLevelSubstance.amount","title":"amount","text":"<pre><code>amount: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.NormalizedCAS","title":"NormalizedCAS","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"albertId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Albertid\"\n    },\n    \"smiles\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Smiles\"\n    }\n  },\n  \"title\": \"NormalizedCAS\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>albert_id</code>                 (<code>str | None</code>)             </li> <li> <code>smiles</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/product_design/#albert.resources.product_design.NormalizedCAS.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.NormalizedCAS.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.NormalizedCAS.albert_id","title":"albert_id","text":"<pre><code>albert_id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.NormalizedCAS.smiles","title":"smiles","text":"<pre><code>smiles: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventorySDS","title":"UnpackedInventorySDS","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"albertId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Albertid\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"class\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Class\"\n    },\n    \"unNumber\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unnumber\"\n    }\n  },\n  \"title\": \"UnpackedInventorySDS\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>albert_id</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>sds_class</code>                 (<code>str | None</code>)             </li> <li> <code>un_number</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventorySDS.albert_id","title":"albert_id","text":"<pre><code>albert_id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventorySDS.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventorySDS.sds_class","title":"sds_class","text":"<pre><code>sds_class: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventorySDS.un_number","title":"un_number","text":"<pre><code>un_number: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedCasInfo","title":"UnpackedCasInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"min\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Min\"\n    },\n    \"max\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Max\"\n    },\n    \"number\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Number\"\n    },\n    \"casAvg\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Casavg\"\n    },\n    \"casSum\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cassum\"\n    }\n  },\n  \"title\": \"UnpackedCasInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>min</code>                 (<code>float | None</code>)             </li> <li> <code>max</code>                 (<code>float | None</code>)             </li> <li> <code>number</code>                 (<code>str | None</code>)             </li> <li> <code>cas_average</code>                 (<code>float | None</code>)             </li> <li> <code>cas_sum</code>                 (<code>float | None</code>)             </li> </ul>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedCasInfo.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedCasInfo.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedCasInfo.min","title":"min","text":"<pre><code>min: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedCasInfo.max","title":"max","text":"<pre><code>max: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedCasInfo.number","title":"number","text":"<pre><code>number: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedCasInfo.cas_average","title":"cas_average","text":"<pre><code>cas_average: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedCasInfo.cas_sum","title":"cas_sum","text":"<pre><code>cas_sum: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventoryListItem","title":"UnpackedInventoryListItem","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"rowInventoryId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rowinventoryid\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"colId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Colid\"\n    },\n    \"colInventoryId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Colinventoryid\"\n    },\n    \"parentId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Parentid\"\n    },\n    \"rowId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rowid\"\n    }\n  },\n  \"title\": \"UnpackedInventoryListItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>row_inventory_id</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>column_id</code>                 (<code>str | None</code>)             </li> <li> <code>column_inventory_id</code>                 (<code>str | None</code>)             </li> <li> <code>parent_id</code>                 (<code>str | None</code>)             </li> <li> <code>row_id</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventoryListItem.row_inventory_id","title":"row_inventory_id","text":"<pre><code>row_inventory_id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventoryListItem.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventoryListItem.column_id","title":"column_id","text":"<pre><code>column_id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventoryListItem.column_inventory_id","title":"column_inventory_id","text":"<pre><code>column_inventory_id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventoryListItem.parent_id","title":"parent_id","text":"<pre><code>parent_id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventoryListItem.row_id","title":"row_id","text":"<pre><code>row_id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventory","title":"UnpackedInventory","text":"<p>               Bases: <code>UnpackedInventoryListItem</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"UnpackedCasInfo\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Min\"\n        },\n        \"max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max\"\n        },\n        \"number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Number\"\n        },\n        \"casAvg\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Casavg\"\n        },\n        \"casSum\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cassum\"\n        }\n      },\n      \"title\": \"UnpackedCasInfo\",\n      \"type\": \"object\"\n    },\n    \"UnpackedInventorySDS\": {\n      \"properties\": {\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Class\"\n        },\n        \"unNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unnumber\"\n        }\n      },\n      \"title\": \"UnpackedInventorySDS\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"rowInventoryId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rowinventoryid\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"colId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Colid\"\n    },\n    \"colInventoryId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Colinventoryid\"\n    },\n    \"parentId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Parentid\"\n    },\n    \"rowId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rowid\"\n    },\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"rsnNumber\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rsnnumber\"\n    },\n    \"totalCasSum\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Totalcassum\"\n    },\n    \"sdsInfo\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/UnpackedInventorySDS\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"casInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/UnpackedCasInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Casinfo\"\n    }\n  },\n  \"title\": \"UnpackedInventory\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>row_inventory_id</code>                 (<code>str | None</code>)             </li> <li> <code>column_id</code>                 (<code>str | None</code>)             </li> <li> <code>column_inventory_id</code>                 (<code>str | None</code>)             </li> <li> <code>parent_id</code>                 (<code>str | None</code>)             </li> <li> <code>row_id</code>                 (<code>str | None</code>)             </li> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>rsn_number</code>                 (<code>str | None</code>)             </li> <li> <code>total_cas_sum</code>                 (<code>float | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>sds_info</code>                 (<code>UnpackedInventorySDS | None</code>)             </li> <li> <code>cas_info</code>                 (<code>list[UnpackedCasInfo] | None</code>)             </li> </ul>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventory.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventory.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventory.rsn_number","title":"rsn_number","text":"<pre><code>rsn_number: str | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventory.total_cas_sum","title":"total_cas_sum","text":"<pre><code>total_cas_sum: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventory.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventory.sds_info","title":"sds_info","text":"<pre><code>sds_info: UnpackedInventorySDS | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedInventory.cas_info","title":"cas_info","text":"<pre><code>cas_info: list[UnpackedCasInfo] | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedProductDesign","title":"UnpackedProductDesign","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"CasLevelSubstance\": {\n      \"properties\": {\n        \"casPrimaryKeyId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Casprimarykeyid\"\n        },\n        \"casID\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Casid\"\n        },\n        \"amount\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Amount\"\n        }\n      },\n      \"title\": \"CasLevelSubstance\",\n      \"type\": \"object\"\n    },\n    \"NormalizedCAS\": {\n      \"properties\": {\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"smiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Smiles\"\n        }\n      },\n      \"title\": \"NormalizedCAS\",\n      \"type\": \"object\"\n    },\n    \"UnpackedCasInfo\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Min\"\n        },\n        \"max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max\"\n        },\n        \"number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Number\"\n        },\n        \"casAvg\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Casavg\"\n        },\n        \"casSum\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cassum\"\n        }\n      },\n      \"title\": \"UnpackedCasInfo\",\n      \"type\": \"object\"\n    },\n    \"UnpackedInventory\": {\n      \"properties\": {\n        \"rowInventoryId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowinventoryid\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"colId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Colid\"\n        },\n        \"colInventoryId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Colinventoryid\"\n        },\n        \"parentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentid\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"rsnNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rsnnumber\"\n        },\n        \"totalCasSum\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Totalcassum\"\n        },\n        \"sdsInfo\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnpackedInventorySDS\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"casInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/UnpackedCasInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Casinfo\"\n        }\n      },\n      \"title\": \"UnpackedInventory\",\n      \"type\": \"object\"\n    },\n    \"UnpackedInventoryListItem\": {\n      \"properties\": {\n        \"rowInventoryId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowinventoryid\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"colId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Colid\"\n        },\n        \"colInventoryId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Colinventoryid\"\n        },\n        \"parentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentid\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        }\n      },\n      \"title\": \"UnpackedInventoryListItem\",\n      \"type\": \"object\"\n    },\n    \"UnpackedInventorySDS\": {\n      \"properties\": {\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Class\"\n        },\n        \"unNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unnumber\"\n        }\n      },\n      \"title\": \"UnpackedInventorySDS\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"Inventories\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/UnpackedInventory\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Inventories\"\n    },\n    \"inventoryList\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/UnpackedInventoryListItem\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Inventorylist\"\n    },\n    \"inventorySDSList\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/UnpackedInventorySDS\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Inventorysdslist\"\n    },\n    \"casLevelSubstances\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/CasLevelSubstance\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Caslevelsubstances\"\n    },\n    \"normalizedCasList\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/NormalizedCAS\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Normalizedcaslist\"\n    }\n  },\n  \"title\": \"UnpackedProductDesign\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>inventories</code>                 (<code>list[UnpackedInventory] | None</code>)             </li> <li> <code>inventory_list</code>                 (<code>list[UnpackedInventoryListItem] | None</code>)             </li> <li> <code>inventory_sds_list</code>                 (<code>list[UnpackedInventorySDS] | None</code>)             </li> <li> <code>cas_level_substances</code>                 (<code>list[CasLevelSubstance] | None</code>)             </li> <li> <code>normalized_cas_list</code>                 (<code>list[NormalizedCAS] | None</code>)             </li> </ul>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedProductDesign.inventories","title":"inventories","text":"<pre><code>inventories: list[UnpackedInventory] | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedProductDesign.inventory_list","title":"inventory_list","text":"<pre><code>inventory_list: list[UnpackedInventoryListItem] | None = (\n    None\n)\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedProductDesign.inventory_sds_list","title":"inventory_sds_list","text":"<pre><code>inventory_sds_list: list[UnpackedInventorySDS] | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedProductDesign.cas_level_substances","title":"cas_level_substances","text":"<pre><code>cas_level_substances: list[CasLevelSubstance] | None = None\n</code></pre>"},{"location":"resources/product_design/#albert.resources.product_design.UnpackedProductDesign.normalized_cas_list","title":"normalized_cas_list","text":"<pre><code>normalized_cas_list: list[NormalizedCAS] | None = None\n</code></pre>"},{"location":"resources/projects/","title":"Projects","text":""},{"location":"resources/projects/#albert.resources.projects","title":"albert.resources.projects","text":""},{"location":"resources/projects/#albert.resources.projects.ProjectClass","title":"ProjectClass","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The ACL Class of a project</p> <p>Attributes:</p> Name Type Description <code>SHARED</code> <code>CONFIDENTIAL</code> <code>PRIVATE</code>"},{"location":"resources/projects/#albert.resources.projects.ProjectClass.SHARED","title":"SHARED","text":"<pre><code>SHARED = 'shared'\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.ProjectClass.CONFIDENTIAL","title":"CONFIDENTIAL","text":"<pre><code>CONFIDENTIAL = 'confidential'\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.ProjectClass.PRIVATE","title":"PRIVATE","text":"<pre><code>PRIVATE = 'private'\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.State","title":"State","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The current state of a project</p> <p>Attributes:</p> Name Type Description <code>NOT_STARTED</code> <code>ACTIVE</code> <code>CLOSED_SUCCESS</code> <code>CLOSED_ARCHIVED</code>"},{"location":"resources/projects/#albert.resources.projects.State.NOT_STARTED","title":"NOT_STARTED","text":"<pre><code>NOT_STARTED = 'Not Started'\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.State.ACTIVE","title":"ACTIVE","text":"<pre><code>ACTIVE = 'Active'\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.State.CLOSED_SUCCESS","title":"CLOSED_SUCCESS","text":"<pre><code>CLOSED_SUCCESS = 'Closed - Success'\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.State.CLOSED_ARCHIVED","title":"CLOSED_ARCHIVED","text":"<pre><code>CLOSED_ARCHIVED = 'Closed - Archived'\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.TaskConfig","title":"TaskConfig","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>The task configuration for a project</p> Show JSON schema: <pre><code>{\n  \"description\": \"The task configuration for a project\",\n  \"properties\": {\n    \"datatemplateId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Datatemplateid\"\n    },\n    \"workflowId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Workflowid\"\n    },\n    \"defaultTaskName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Defaulttaskname\"\n    },\n    \"target\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Target\"\n    },\n    \"hidden\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": false,\n      \"title\": \"Hidden\"\n    }\n  },\n  \"title\": \"TaskConfig\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>datatemplateId</code>                 (<code>str | None</code>)             </li> <li> <code>workflowId</code>                 (<code>str | None</code>)             </li> <li> <code>defaultTaskName</code>                 (<code>str | None</code>)             </li> <li> <code>target</code>                 (<code>str | None</code>)             </li> <li> <code>hidden</code>                 (<code>bool | None</code>)             </li> </ul>"},{"location":"resources/projects/#albert.resources.projects.TaskConfig.datatemplateId","title":"datatemplateId","text":"<pre><code>datatemplateId: str | None = None\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.TaskConfig.workflowId","title":"workflowId","text":"<pre><code>workflowId: str | None = None\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.TaskConfig.defaultTaskName","title":"defaultTaskName","text":"<pre><code>defaultTaskName: str | None = None\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.TaskConfig.target","title":"target","text":"<pre><code>target: str | None = None\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.TaskConfig.hidden","title":"hidden","text":"<pre><code>hidden: bool | None = False\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.GridDefault","title":"GridDefault","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The default grid for a project</p> <p>Attributes:</p> Name Type Description <code>PD</code> <code>WKS</code>"},{"location":"resources/projects/#albert.resources.projects.GridDefault.PD","title":"PD","text":"<pre><code>PD = 'PD'\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.GridDefault.WKS","title":"WKS","text":"<pre><code>WKS = 'WKS'\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project","title":"Project","text":"<p>               Bases: <code>BaseResource</code></p> <p>A project in Albert.</p> <p>Attributes:</p> Name Type Description <code>description</code> <code>str</code> <p>The description of the project. Used as the name of the project as well.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the project. Set when the project is retrieved from Albert.</p> <code>locations</code> <code>list[Location] | None</code> <p>The locations associated with the project. Optional.</p> <code>project_class</code> <code>ProjectClass</code> <p>The class of the project. Defaults to PRIVATE.</p> <code>metadata</code> <code>dict[str, str | list[EntityLink] | EntityLink] | None</code> <p>The metadata of the project. Optional. Metadata allowed values can be found using the Custom Fields API.</p> <code>prefix</code> <code>str | None</code> <p>The prefix of the project. Optional.</p> <code>acl</code> <code>list[ACL] | None</code> <p>The ACL of the project. Optional.</p> <code>task_config</code> <code>list[TaskConfig] | None</code> <p>The task configuration of the project. Optional.</p> <code>grid</code> <code>GridDefault | None</code> <p>The default grid of the project. Optional.</p> <code>state</code> <code>State | None</code> <p>The state/status of the project. Allowed states are customizeable using the entitystatus API. Optional.</p> <code>application_engineering_inventory_ids</code> <code>list[str] | None</code> <p>Inventory Ids to be added as application engineering. Optional.</p> <p>Methods:</p> Name Description <code>validate_status</code> <p>Somehow, some statuses are capitalized in the API response. This ensures they are always lowercase.</p>"},{"location":"resources/projects/#albert.resources.projects.Project.description","title":"description","text":"<pre><code>description: str = Field(min_length=1, max_length=2000)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.locations","title":"locations","text":"<pre><code>locations: list[SerializeAsEntityLink[Location]] | None = (\n    Field(\n        default=None,\n        min_length=1,\n        max_length=20,\n        alias=\"Locations\",\n    )\n)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.project_class","title":"project_class","text":"<pre><code>project_class: ProjectClass | None = Field(\n    default=PRIVATE, alias=\"class\"\n)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.prefix","title":"prefix","text":"<pre><code>prefix: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.application_engineering_inventory_ids","title":"application_engineering_inventory_ids","text":"<pre><code>application_engineering_inventory_ids: list[str] | None = (\n    Field(\n        default=None,\n        alias=\"appEngg\",\n        description=\"Inventory Ids to be added as application engineering\",\n    )\n)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.id","title":"id","text":"<pre><code>id: ProjectId | None = Field(None, alias='albertId')\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.acl","title":"acl","text":"<pre><code>acl: list[ACL] | None = Field(\n    default_factory=list, alias=\"ACL\"\n)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.old_api_params","title":"old_api_params","text":"<pre><code>old_api_params: dict | None = None\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.task_config","title":"task_config","text":"<pre><code>task_config: list[TaskConfig] | None = Field(\n    default_factory=list\n)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.grid","title":"grid","text":"<pre><code>grid: GridDefault | None = None\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] | None = Field(\n    alias=\"Metadata\", default=None\n)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.status","title":"status","text":"<pre><code>status: str | None = Field(\n    default=None, exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.state","title":"state","text":"<pre><code>state: State | None = Field(default=None, exclude=True)\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.Project.validate_status","title":"validate_status","text":"<pre><code>validate_status(value)\n</code></pre> <p>Somehow, some statuses are capitalized in the API response. This ensures they are always lowercase.</p> Source code in <code>src/albert/resources/projects.py</code> <pre><code>@field_validator(\"status\", mode=\"before\")\ndef validate_status(cls, value):\n    \"\"\"Somehow, some statuses are capitalized in the API response. This ensures they are always lowercase.\"\"\"\n    if isinstance(value, str):\n        return value.lower()\n    return value\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.ProjectSearchItem","title":"ProjectSearchItem","text":"<p>               Bases: <code>BaseAlbertModel</code>, <code>HydrationMixin[Project]</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"albertId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Albertid\"\n    },\n    \"description\": {\n      \"maxLength\": 2000,\n      \"minLength\": 1,\n      \"title\": \"Description\",\n      \"type\": \"string\"\n    },\n    \"status\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Status\"\n    }\n  },\n  \"required\": [\n    \"description\"\n  ],\n  \"title\": \"ProjectSearchItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>_collection</code>                 (<code>BaseCollection | None</code>)             </li> <li> <code>id</code>                 (<code>ProjectId | None</code>)             </li> <li> <code>description</code>                 (<code>str</code>)             </li> <li> <code>status</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/projects/#albert.resources.projects.ProjectSearchItem.id","title":"id","text":"<pre><code>id: ProjectId | None = None\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.ProjectSearchItem.description","title":"description","text":"<pre><code>description: str\n</code></pre>"},{"location":"resources/projects/#albert.resources.projects.ProjectSearchItem.status","title":"status","text":"<pre><code>status: str | None = None\n</code></pre>"},{"location":"resources/property_data/","title":"Property Data","text":""},{"location":"resources/property_data/#albert.resources.property_data","title":"albert.resources.property_data","text":""},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataStatus","title":"PropertyDataStatus","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The status of a resource</p> <p>Attributes:</p> Name Type Description <code>SUCCESS</code> <code>FAILURE</code>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataStatus.SUCCESS","title":"SUCCESS","text":"<pre><code>SUCCESS = 'Success'\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataStatus.FAILURE","title":"FAILURE","text":"<pre><code>FAILURE = 'Failed'\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.DataEntity","title":"DataEntity","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>TASK</code> <code>WORKFLOW</code> <code>INVENTORY</code>"},{"location":"resources/property_data/#albert.resources.property_data.DataEntity.TASK","title":"TASK","text":"<pre><code>TASK = 'task'\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.DataEntity.WORKFLOW","title":"WORKFLOW","text":"<pre><code>WORKFLOW = 'workflow'\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.DataEntity.INVENTORY","title":"INVENTORY","text":"<pre><code>INVENTORY = 'inventory'\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyData","title":"PropertyData","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    }\n  },\n  \"title\": \"PropertyData\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>PropertyDataId | None</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyData.id","title":"id","text":"<pre><code>id: PropertyDataId | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyData.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue","title":"PropertyValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"PropertyData\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"PropertyData\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"sequence\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sequence\"\n    },\n    \"calculation\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Calculation\"\n    },\n    \"valueNumeric\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Valuenumeric\"\n    },\n    \"valueString\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Valuestring\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"Unit\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Unit\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        },\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        }\n      ],\n      \"title\": \"Unit\"\n    },\n    \"PropertyData\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/PropertyData\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"dataColumnUniqueId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Datacolumnuniqueid\"\n    },\n    \"hidden\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": false,\n      \"title\": \"Hidden\"\n    }\n  },\n  \"title\": \"PropertyValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>sequence</code>                 (<code>str | None</code>)             </li> <li> <code>calculation</code>                 (<code>str | None</code>)             </li> <li> <code>numeric_value</code>                 (<code>float | None</code>)             </li> <li> <code>string_value</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> <li> <code>unit</code>                 (<code>SerializeAsEntityLink[Unit] | dict</code>)             </li> <li> <code>property_data</code>                 (<code>PropertyData | None</code>)             </li> <li> <code>data_column_unique_id</code>                 (<code>str | None</code>)             </li> <li> <code>hidden</code>                 (<code>bool | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.sequence","title":"sequence","text":"<pre><code>sequence: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.calculation","title":"calculation","text":"<pre><code>calculation: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.numeric_value","title":"numeric_value","text":"<pre><code>numeric_value: float | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.string_value","title":"string_value","text":"<pre><code>string_value: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.unit","title":"unit","text":"<pre><code>unit: SerializeAsEntityLink[Unit] | dict\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.property_data","title":"property_data","text":"<pre><code>property_data: PropertyData | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.data_column_unique_id","title":"data_column_unique_id","text":"<pre><code>data_column_unique_id: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyValue.hidden","title":"hidden","text":"<pre><code>hidden: bool | None = False\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.Trial","title":"Trial","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"PropertyData\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"PropertyData\",\n      \"type\": \"object\"\n    },\n    \"PropertyValue\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"calculation\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Calculation\"\n        },\n        \"valueNumeric\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuenumeric\"\n        },\n        \"valueString\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuestring\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            }\n          ],\n          \"title\": \"Unit\"\n        },\n        \"PropertyData\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/PropertyData\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"dataColumnUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumnuniqueid\"\n        },\n        \"hidden\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Hidden\"\n        }\n      },\n      \"title\": \"PropertyValue\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"trialNo\": {\n      \"title\": \"Trialno\",\n      \"type\": \"integer\"\n    },\n    \"visibleTrialNo\": {\n      \"default\": 1,\n      \"title\": \"Visibletrialno\",\n      \"type\": \"integer\"\n    },\n    \"void\": {\n      \"default\": false,\n      \"title\": \"Void\",\n      \"type\": \"boolean\"\n    },\n    \"DataColumns\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/PropertyValue\"\n      },\n      \"title\": \"Datacolumns\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"trialNo\"\n  ],\n  \"title\": \"Trial\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>trial_number</code>                 (<code>int</code>)             </li> <li> <code>visible_trial_number</code>                 (<code>int</code>)             </li> <li> <code>void</code>                 (<code>bool</code>)             </li> <li> <code>data_columns</code>                 (<code>list[PropertyValue]</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.Trial.trial_number","title":"trial_number","text":"<pre><code>trial_number: int\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.Trial.visible_trial_number","title":"visible_trial_number","text":"<pre><code>visible_trial_number: int = 1\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.Trial.void","title":"void","text":"<pre><code>void: bool = False\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.Trial.data_columns","title":"data_columns","text":"<pre><code>data_columns: list[PropertyValue]\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.DataInterval","title":"DataInterval","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"PropertyData\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"PropertyData\",\n      \"type\": \"object\"\n    },\n    \"PropertyValue\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"calculation\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Calculation\"\n        },\n        \"valueNumeric\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuenumeric\"\n        },\n        \"valueString\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuestring\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            }\n          ],\n          \"title\": \"Unit\"\n        },\n        \"PropertyData\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/PropertyData\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"dataColumnUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumnuniqueid\"\n        },\n        \"hidden\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Hidden\"\n        }\n      },\n      \"title\": \"PropertyValue\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Trial\": {\n      \"properties\": {\n        \"trialNo\": {\n          \"title\": \"Trialno\",\n          \"type\": \"integer\"\n        },\n        \"visibleTrialNo\": {\n          \"default\": 1,\n          \"title\": \"Visibletrialno\",\n          \"type\": \"integer\"\n        },\n        \"void\": {\n          \"default\": false,\n          \"title\": \"Void\",\n          \"type\": \"boolean\"\n        },\n        \"DataColumns\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/PropertyValue\"\n          },\n          \"title\": \"Datacolumns\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"trialNo\"\n      ],\n      \"title\": \"Trial\",\n      \"type\": \"object\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"intervalCombination\": {\n      \"title\": \"Intervalcombination\",\n      \"type\": \"string\"\n    },\n    \"void\": {\n      \"default\": false,\n      \"title\": \"Void\",\n      \"type\": \"boolean\"\n    },\n    \"Trials\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Trial\"\n      },\n      \"title\": \"Trials\",\n      \"type\": \"array\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    }\n  },\n  \"required\": [\n    \"intervalCombination\"\n  ],\n  \"title\": \"DataInterval\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>interval_combination</code>                 (<code>str</code>)             </li> <li> <code>void</code>                 (<code>bool</code>)             </li> <li> <code>trials</code>                 (<code>list[Trial]</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.DataInterval.interval_combination","title":"interval_combination","text":"<pre><code>interval_combination: str\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.DataInterval.void","title":"void","text":"<pre><code>void: bool = False\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.DataInterval.trials","title":"trials","text":"<pre><code>trials: list[Trial]\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.DataInterval.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskData","title":"TaskData","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ACL\": {\n      \"description\": \"The Access Control List (ACL) for a user\",\n      \"properties\": {\n        \"id\": {\n          \"description\": \"The id of the user for which this ACL applies\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"fgc\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AccessControlLevel\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The Fine-Grain Control Level\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"ACL\",\n      \"type\": \"object\"\n    },\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    },\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"Cas\": {\n      \"description\": \"Represents a CAS entity.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"number\": {\n          \"description\": \"The CAS number.\",\n          \"title\": \"Number\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Name of the CAS.\",\n          \"title\": \"Name\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The description or name of the CAS.\",\n          \"title\": \"Description\"\n        },\n        \"notes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Notes related to the CAS.\",\n          \"title\": \"Notes\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CasCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The category of the CAS.\"\n        },\n        \"casSmiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS SMILES notation.\",\n          \"title\": \"Cassmiles\"\n        },\n        \"inchiKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"InChIKey of the CAS.\",\n          \"title\": \"Inchikey\"\n        },\n        \"iUpacName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"IUPAC name of the CAS.\",\n          \"title\": \"Iupacname\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The AlbertID of the CAS.\",\n          \"title\": \"Albertid\"\n        },\n        \"hazards\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Hazard\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazards associated with the CAS.\",\n          \"title\": \"Hazards\"\n        },\n        \"wgk\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"German Water Hazard Class (WGK) number.\",\n          \"title\": \"Wgk\"\n        },\n        \"ecListNo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"European Community (EC) number.\",\n          \"title\": \"Eclistno\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Type of the CAS.\",\n          \"title\": \"Type\"\n        },\n        \"classificationType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Classification type of the CAS.\",\n          \"title\": \"Classificationtype\"\n        },\n        \"order\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS order.\",\n          \"title\": \"Order\"\n        },\n        \"Metadata\": {\n          \"additionalProperties\": {\n            \"anyOf\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              },\n              {\n                \"items\": {\n                  \"$ref\": \"#/$defs/EntityLink\"\n                },\n                \"type\": \"array\"\n              }\n            ]\n          },\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        }\n      },\n      \"required\": [\n        \"number\"\n      ],\n      \"title\": \"Cas\",\n      \"type\": \"object\"\n    },\n    \"CasAmount\": {\n      \"description\": \"CasAmount is a Pydantic model representing an amount of a given CAS.\\n\\nAttributes\\n----------\\nmin : float\\n    The minimum amount of the CAS in the formulation.\\nmax : float\\n    The maximum amount of the CAS in the formulation.\\ntarget: float | None\\n    The inventory value or target of the CAS in the formulation.\\nid : str | None\\n    The Albert ID of the CAS Number Resource this amount represents. Provide either a Cas or an ID.\\ncas : Cas | None\\n    The CAS object associated with this amount. Provide either a Cas or an id.\\ncas_smiles: str | None\\n    The SMILES string of the CAS Number resource. Obtained from the Cas object when provided.\\nnumber: str | None\\n    The CAS number. Obtained from the Cas object when provided.\",\n      \"properties\": {\n        \"min\": {\n          \"title\": \"Min\",\n          \"type\": \"number\"\n        },\n        \"max\": {\n          \"title\": \"Max\",\n          \"type\": \"number\"\n        },\n        \"inventoryValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Inventoryvalue\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"casCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cascategory\"\n        },\n        \"cas\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Cas\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"casSmiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cassmiles\"\n        },\n        \"number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Number\"\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CasAuditFieldsWithEmail\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"min\",\n        \"max\"\n      ],\n      \"title\": \"CasAmount\",\n      \"type\": \"object\"\n    },\n    \"CasAuditFieldsWithEmail\": {\n      \"description\": \"The audit fields for a CAS resource with email\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        },\n        \"email\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Email\"\n        }\n      },\n      \"title\": \"CasAuditFieldsWithEmail\",\n      \"type\": \"object\"\n    },\n    \"CasCategory\": {\n      \"enum\": [\n        \"User\",\n        \"Verisk\",\n        \"TSCA - Public\",\n        \"TSCA - Private\",\n        \"not TSCA\",\n        \"CAS linked to External Database\",\n        \"Unknown (Trade Secret)\",\n        \"CL_Inventory Upload\"\n      ],\n      \"title\": \"CasCategory\",\n      \"type\": \"string\"\n    },\n    \"Company\": {\n      \"description\": \"Company is a Pydantic model representing a company entity.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the company.\\nid : str | None\\n    The Albert ID of the company. Set when the company is retrieved from Albert.\\ndistance : float | None\\n    The scores of a company in a search result, optional. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"distance\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Distance\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Company\",\n      \"type\": \"object\"\n    },\n    \"DataColumn\": {\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"defalt\": {\n          \"default\": false,\n          \"title\": \"Defalt\",\n          \"type\": \"boolean\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"albertId\": {\n          \"default\": null,\n          \"title\": \"Albertid\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"DataColumn\",\n      \"type\": \"object\"\n    },\n    \"DataColumnValue\": {\n      \"properties\": {\n        \"data_column\": {\n          \"$ref\": \"#/$defs/DataColumn\",\n          \"default\": null\n        },\n        \"id\": {\n          \"default\": null,\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"hidden\": {\n          \"default\": false,\n          \"title\": \"Hidden\",\n          \"type\": \"boolean\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"calculation\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Calculation\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"validation\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ValueValidation\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Validation\"\n        }\n      },\n      \"title\": \"DataColumnValue\",\n      \"type\": \"object\"\n    },\n    \"DataInterval\": {\n      \"properties\": {\n        \"intervalCombination\": {\n          \"title\": \"Intervalcombination\",\n          \"type\": \"string\"\n        },\n        \"void\": {\n          \"default\": false,\n          \"title\": \"Void\",\n          \"type\": \"boolean\"\n        },\n        \"Trials\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/Trial\"\n          },\n          \"title\": \"Trials\",\n          \"type\": \"array\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"intervalCombination\"\n      ],\n      \"title\": \"DataInterval\",\n      \"type\": \"object\"\n    },\n    \"DataTemplate\": {\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Tags\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/Tag\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tags\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"security_class\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SecurityClass\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"default\": false,\n          \"title\": \"Verified\",\n          \"type\": \"boolean\"\n        },\n        \"ACL\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/User\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Acl\"\n        },\n        \"DataColumns\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/DataColumnValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumns\"\n        },\n        \"Parameters\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ParameterValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parameters\"\n        },\n        \"DeletedParameters\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ParameterValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Deletedparameters\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"DataTemplate\",\n      \"type\": \"object\"\n    },\n    \"DataType\": {\n      \"enum\": [\n        \"number\",\n        \"string\",\n        \"enum\"\n      ],\n      \"title\": \"DataType\",\n      \"type\": \"string\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"EnumValidationValue\": {\n      \"description\": \"Represents a value for an enum type validation.\\n\\nAttributes\\n----------\\ntext : str\\n    The text of the enum value.\\nid : str | None\\n    The ID of the enum value. If not provided, the ID will be generated upon creation.\",\n      \"properties\": {\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"originalText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originaltext\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ],\n      \"title\": \"EnumValidationValue\",\n      \"type\": \"object\"\n    },\n    \"Hazard\": {\n      \"description\": \"Represents a chemical hazard.\",\n      \"properties\": {\n        \"subCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard subcategory\",\n          \"title\": \"Subcategory\"\n        },\n        \"hCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code\",\n          \"title\": \"Hcode\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard category\",\n          \"title\": \"Category\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard classification\",\n          \"title\": \"Class\"\n        },\n        \"hCodeText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code text\",\n          \"title\": \"Hcodetext\"\n        }\n      },\n      \"title\": \"Hazard\",\n      \"type\": \"object\"\n    },\n    \"Interval\": {\n      \"description\": \"A Pydantic class representing an interval.\\n\\nAttrubutes\\n----------\\nvalue : str\\n    The value of the interval setpoint.\\nunit : Unit\\n    The unit of the related value.\",\n      \"properties\": {\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        }\n      },\n      \"title\": \"Interval\",\n      \"type\": \"object\"\n    },\n    \"IntervalCombination\": {\n      \"description\": \"A class representing the interval combinations of on a workflow.\\nThis is returned by the workflow endpoint when at least one parameter\\nin the workflow has been intervalized.\\n\\nInterval Combinations can be single intervalized parameters or cartesian prodcuts of\\ntwo intervalized parameters.\\n\\nAttributes\\n----------\\ninterval_id: IntervalId | None\\n    forign key reference to the interval id\\n    this combination is associated with\\n    It will have the form ROW# or ROW#XROW# depending on\\n    if it is a single interval or a product of two intervals\\ninterval_params: str | None\\n    The parameters participating in the interval.\\ninterval_string: str | None\\n    The string representation of the interval combination\\n    This will have the form \\\"[Parameter Name]: [Parameter Value] [Parameter Unit]\\\"\\n    for each parameter in the interval combination\",\n      \"properties\": {\n        \"interval\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Interval\"\n        },\n        \"intervalParams\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Intervalparams\"\n        },\n        \"intervalString\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Intervalstring\"\n        }\n      },\n      \"title\": \"IntervalCombination\",\n      \"type\": \"object\"\n    },\n    \"InventoryCategory\": {\n      \"enum\": [\n        \"RawMaterials\",\n        \"Consumables\",\n        \"Equipment\",\n        \"Formulas\"\n      ],\n      \"title\": \"InventoryCategory\",\n      \"type\": \"string\"\n    },\n    \"InventoryItem\": {\n      \"description\": \"An InventoryItem is a Pydantic model representing an item in the inventory. Can be a raw material, consumable, equipment, or formula.\\nNote: Formulas should be registered via the Worksheet collection / Sheet resource.\\n\\nReturns\\n-------\\nInventoryItem\\n    An InventoryItem that can be used to represent an item in the inventory. Can be a raw material, consumable, equipment, or formula.\\n\\nAttributes\\n------\\n\\nname : str\\n    The name of the InventoryItem.\\nid : str | None\\n    The Albert ID of the InventoryItem. Set when the InventoryItem is retrieved from Albert.\\ndescription : str | None\\n    The description of the InventoryItem.\\ncategory : InventoryCategory\\n    The category of the InventoryItem. Allowed values are `RawMaterials`, `Consumables`, `Equipment`, and `Formulas`.\\nunit_category : InventoryUnitCategory\\n    The unit category of the InventoryItem. Can be mass, volume, length, pressure, or units. By default, mass is used for RawMaterials and Formulas, and units is used for Equipment and Consumables.\\nsecurity_class : SecurityClass | None\\n    The security class of the InventoryItem. Optional. Can be confidential, shared, or restricted.\\ncompany : Company | str | None\\n    The company associated with the InventoryItem. Can be a Company object or a string. If a String is provided, a Company object with the name of the provided string will be first-or-created.\\nminimum : list[InventoryMinimum] | None\\n    The minimum amount of the InventoryItem that must be kept in stock at a given Location. Optional.\\nalias : str | None\\n    An alias for the InventoryItem. Optional.\\ncas : list[CasAmount] | None\\n    The CAS numbers associated with the InventoryItem. This is how a compositional breakdown can be provided. Optional.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\\n    Metadata associated with the InventoryItem. Optional. Allowed metadata fields can be found in the CustomFields documentation.\\nproject_id : str | None\\n    The project ID associated with the InventoryItem. Read Only. Required for Formulas.\\nformula_id : str | None\\n    The formula ID associated with the InventoryItem. Read Only.\\ntags : list[str|Tag] | None\\n    The tags associated with the InventoryItem. Optional. If a string is provided, a Tag object with the name of the provided string will be first-or-created.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Tags\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/Tag\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tags\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"category\": {\n          \"$ref\": \"#/$defs/InventoryCategory\"\n        },\n        \"unitCategory\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/InventoryUnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SecurityClass\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Company\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Company\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Company\"\n        },\n        \"minimum\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/InventoryMinimum\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minimum\"\n        },\n        \"alias\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Alias\"\n        },\n        \"Cas\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/CasAmount\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cas\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"parentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentid\"\n        },\n        \"ACL\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ACL\"\n          },\n          \"title\": \"Acl\",\n          \"type\": \"array\"\n        },\n        \"TaskConfig\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"additionalProperties\": true,\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Taskconfig\"\n        },\n        \"formulaId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Formulaid\"\n        },\n        \"Symbols\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"additionalProperties\": true,\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbols\"\n        },\n        \"unNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unnumber\"\n        },\n        \"recentAttachmentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Recentattachmentid\"\n        }\n      },\n      \"required\": [\n        \"category\"\n      ],\n      \"title\": \"InventoryItem\",\n      \"type\": \"object\"\n    },\n    \"InventoryMinimum\": {\n      \"description\": \"Defined the minimum amount of an InventoryItem that must be kept in stock at a given Location.\\n\\nAttributes\\n----------\\nid : str\\n    The unique identifier of the Location object associated with this InventoryMinimum.\\n    Provide either a Location or a location id.\\nlocation : Location\\n    The Location object associated with this InventoryMinimum. Provide either a Location or a location id.\\nminimum : float\\n    The minimum amount of the InventoryItem that must be kept in stock at the given Location.\",\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"minimum\": {\n          \"maximum\": 1000000000000000,\n          \"minimum\": 0,\n          \"title\": \"Minimum\",\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"minimum\"\n      ],\n      \"title\": \"InventoryMinimum\",\n      \"type\": \"object\"\n    },\n    \"InventoryUnitCategory\": {\n      \"enum\": [\n        \"mass\",\n        \"volume\",\n        \"length\",\n        \"pressure\",\n        \"units\"\n      ],\n      \"title\": \"InventoryUnitCategory\",\n      \"type\": \"string\"\n    },\n    \"Location\": {\n      \"description\": \"A location in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the location.\\nid : str | None\\n    The Albert ID of the location. Set when the location is retrieved from Albert.\\nlatitude : float\\n    The latitude of the location.\\nlongitude : float\\n    The longitude of the location.\\naddress : str\\n    The address of the location.\\ncountry : str | None\\n    The country code of the location. Must be two characters long.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"latitude\": {\n          \"title\": \"Latitude\",\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"title\": \"Longitude\",\n          \"type\": \"number\"\n        },\n        \"address\": {\n          \"title\": \"Address\",\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"anyOf\": [\n            {\n              \"maxLength\": 2,\n              \"minLength\": 2,\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Country\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"latitude\",\n        \"longitude\",\n        \"address\"\n      ],\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Operator\": {\n      \"enum\": [\n        \"between\",\n        \"lt\",\n        \"lte\",\n        \"gte\",\n        \"gt\",\n        \"eq\"\n      ],\n      \"title\": \"Operator\",\n      \"type\": \"string\"\n    },\n    \"PGType\": {\n      \"description\": \"The type of a parameter group\",\n      \"enum\": [\n        \"general\",\n        \"batch\",\n        \"property\"\n      ],\n      \"title\": \"PGType\",\n      \"type\": \"string\"\n    },\n    \"Parameter\": {\n      \"description\": \"A parameter in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the parameter. Names must be unique.\\nid : str | None\\n    The Albert ID of the parameter. Set when the parameter is retrieved from Albert.\\ncategory : ParameterCategory\\n    The category of the parameter. Allowed values are `Normal` and `Special`. Read-only.\\nrank : int\\n    The rank of the returned parameter. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"rank\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rank\"\n        },\n        \"required\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Required\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Parameter\",\n      \"type\": \"object\"\n    },\n    \"ParameterCategory\": {\n      \"description\": \"The category of a parameter\",\n      \"enum\": [\n        \"Normal\",\n        \"Special\"\n      ],\n      \"title\": \"ParameterCategory\",\n      \"type\": \"string\"\n    },\n    \"ParameterGroup\": {\n      \"description\": \"Use 'Standards' key in metadata to store standards\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Tags\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/Tag\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tags\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/PGType\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"class\": {\n          \"$ref\": \"#/$defs/SecurityClass\",\n          \"default\": \"restricted\"\n        },\n        \"ACL\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/User\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Acl\"\n        },\n        \"Metadata\": {\n          \"additionalProperties\": {\n            \"anyOf\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              },\n              {\n                \"items\": {\n                  \"$ref\": \"#/$defs/EntityLink\"\n                },\n                \"type\": \"array\"\n              }\n            ]\n          },\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        },\n        \"Parameters\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ParameterValue\"\n          },\n          \"title\": \"Parameters\",\n          \"type\": \"array\"\n        },\n        \"verified\": {\n          \"default\": false,\n          \"title\": \"Verified\",\n          \"type\": \"boolean\"\n        },\n        \"documents\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/EntityLink\"\n          },\n          \"title\": \"Documents\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"ParameterGroup\",\n      \"type\": \"object\"\n    },\n    \"ParameterGroupSetpoints\": {\n      \"description\": \"A class that represents the setpoints on a parameter group.\\n\\n\\nAttributes\\n----------\\nparameter_group : ParameterGroup\\n    The parameter group to set the setpoints on. Provide either a parameter_group or a paramerter_group_id\\nparameter_group_id : ParameterGroupId\\n    The id of the parameter group.  Provide either a parameter_group or a paramerter_group_id\\nparameter_group_name : str\\n    The name of the parameter group. This is a read-only field.\\nparameter_setpoints : list[ParameterSetpoint]\\n    The setpoints to apply to the parameter group.\",\n      \"properties\": {\n        \"parameter_group\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterGroup\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"default\": \"Pre-linked Parameters\",\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"Parameters\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ParameterSetpoint\"\n          },\n          \"title\": \"Parameters\",\n          \"type\": \"array\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        },\n        \"prgSequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Prgsequence\"\n        }\n      },\n      \"title\": \"ParameterGroupSetpoints\",\n      \"type\": \"object\"\n    },\n    \"ParameterSetpoint\": {\n      \"description\": \"A Pydantic class representing the setpoint or intervals of a parameter to use.\\nFor a single value, provide the value and unit. For multiple values, provide intervals.\\na parameter or parameter_id must be provided.\\n\\nAttributes\\n----------\\nparameter : Parameter\\n    The parameter to set the setpoint on. Provide either a parameter or a parameter_id.\\nparameter_id : ParameterId\\n    The id of the parameter. Provide either a parameter or a parameter_id.\\nvalue : str | EntityLink\\n    The value of the setpoint. If the parameter is a InventoryItem, provide the EntityLink of the InventoryItem.\\nunit : Unit\\n    The unit of the setpoint.\\nintervals : list[Interval]\\n    The intervals of the setpoint. Either the intervals or value + unit\\ncategory : ParameterCategory\\n    The category of the parameter. Special for InventoryItem (then use name to specify \\\"Equipment\\\", \\\"Consumeable\\\", etc), normal for all others\\nshort_name : str\\n    The short / display name of the parameter. Required if value is a dictionary.\\nrow_id : RowId\\n    The id of the parameter with respect to the interval row id.\",\n      \"properties\": {\n        \"parameter\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Parameter\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"Intervals\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Interval\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Intervals\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"shortName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Shortname\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        },\n        \"prgPrmRowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Prgprmrowid\"\n        }\n      },\n      \"title\": \"ParameterSetpoint\",\n      \"type\": \"object\"\n    },\n    \"ParameterValue\": {\n      \"description\": \"The value of a parameter in a parameter group.\\n\\nAttributes\\n----------\\nparameter : Parameter | None\\n    The Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.\\nid : str | None\\n    The Albert ID of the Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.\\ncategory: ParameterCategory\\n    The category of the parameter.\\nshort_name : str | None\\n    The short name of the parameter value.\\nvalue : str | None\\n    The default value of the parameter. Can be a string or an InventoryItem (if, for example, the parameter is an instrumnt choice).\\nunit : Unit | None\\n    The unit of measure for the provided parameter value.\\nname : str\\n    The name of the parameter. Read-only.\\nsequence : int\\n    The sequence of the parameter. Read-only.\",\n      \"properties\": {\n        \"parameter\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Parameter\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"shortName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Shortname\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"$ref\": \"#/$defs/InventoryItem\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"Added\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"validation\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ValueValidation\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Validation\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"originalShortName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originalshortname\"\n        },\n        \"originalName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originalname\"\n        }\n      },\n      \"title\": \"ParameterValue\",\n      \"type\": \"object\"\n    },\n    \"PropertyData\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"PropertyData\",\n      \"type\": \"object\"\n    },\n    \"PropertyValue\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"calculation\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Calculation\"\n        },\n        \"valueNumeric\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuenumeric\"\n        },\n        \"valueString\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuestring\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            }\n          ],\n          \"title\": \"Unit\"\n        },\n        \"PropertyData\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/PropertyData\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"dataColumnUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumnuniqueid\"\n        },\n        \"hidden\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Hidden\"\n        }\n      },\n      \"title\": \"PropertyValue\",\n      \"type\": \"object\"\n    },\n    \"Role\": {\n      \"description\": \"A role in Albert. Note: Roles are not currently creatable via the SDK.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the role.\\nid : str\\n    The Albert ID of the role. Set when the role is retrieved from Albert.\\npolicies : list[Any] | None\\n    The policies associated with the role.\\ntenant : str\\n    The tenant ID of the role.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"policies\": {\n          \"anyOf\": [\n            {\n              \"items\": {},\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Policies\"\n        },\n        \"tenant\": {\n          \"title\": \"Tenant\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"tenant\"\n      ],\n      \"title\": \"Role\",\n      \"type\": \"object\"\n    },\n    \"SecurityClass\": {\n      \"description\": \"The security class of a resource\",\n      \"enum\": [\n        \"shared\",\n        \"restricted\",\n        \"confidential\",\n        \"private\"\n      ],\n      \"title\": \"SecurityClass\",\n      \"type\": \"string\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Tag\": {\n      \"description\": \"Tag is a Pydantic model representing a tag entity.\\n\\nAttributes\\n----------\\ntag : str\\n    The name of the tag.\\nid : str | None\\n    The Albert ID of the tag. Set when the tag is retrieved from Albert.\\n\\nMethods\\n-------\\nfrom_string(tag: str) -&gt; \\\"Tag\\\"\\n    Creates a Tag object from a string.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Tag\",\n      \"type\": \"object\"\n    },\n    \"Trial\": {\n      \"properties\": {\n        \"trialNo\": {\n          \"title\": \"Trialno\",\n          \"type\": \"integer\"\n        },\n        \"visibleTrialNo\": {\n          \"default\": 1,\n          \"title\": \"Visibletrialno\",\n          \"type\": \"integer\"\n        },\n        \"void\": {\n          \"default\": false,\n          \"title\": \"Void\",\n          \"type\": \"boolean\"\n        },\n        \"DataColumns\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/PropertyValue\"\n          },\n          \"title\": \"Datacolumns\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"trialNo\"\n      ],\n      \"title\": \"Trial\",\n      \"type\": \"object\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    },\n    \"User\": {\n      \"description\": \"Represents a User on the Albert Platform\\n\\nAttributes\\n----------\\nname : str\\n    The name of the user.\\nid : str | None\\n    The Albert ID of the user. Set when the user is retrieved from Albert.\\nlocation : Location | None\\n    The location of the user.\\nemail : EmailStr | None\\n    The email of the user.\\nroles : list[Role]\\n    The roles of the user.\\nuser_class : UserClass\\n    The ACL class level of the user.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Location\"\n        },\n        \"email\": {\n          \"default\": null,\n          \"format\": \"email\",\n          \"title\": \"Email\",\n          \"type\": \"string\"\n        },\n        \"Roles\": {\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/$defs/Role\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              }\n            ]\n          },\n          \"maxItems\": 1,\n          \"title\": \"Roles\",\n          \"type\": \"array\"\n        },\n        \"userClass\": {\n          \"$ref\": \"#/$defs/UserClass\",\n          \"default\": \"standard\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"User\",\n      \"type\": \"object\"\n    },\n    \"UserClass\": {\n      \"description\": \"The ACL class level of the user\",\n      \"enum\": [\n        \"guest\",\n        \"standard\",\n        \"trusted\",\n        \"privileged\",\n        \"admin\"\n      ],\n      \"title\": \"UserClass\",\n      \"type\": \"string\"\n    },\n    \"ValueValidation\": {\n      \"properties\": {\n        \"datatype\": {\n          \"$ref\": \"#/$defs/DataType\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/EnumValidationValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Min\"\n        },\n        \"max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max\"\n        },\n        \"operator\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Operator\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"datatype\"\n      ],\n      \"title\": \"ValueValidation\",\n      \"type\": \"object\"\n    },\n    \"Workflow\": {\n      \"description\": \"A Pydantic Class representing a workflow in Albert.\\n\\nWorkflows are combinations of Data Templates and Parameter groups and their associated setpoints.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the workflow.\\nparameter_group_setpoints : list[ParameterGroupSetpoints]\\n    The setpoints to apply to the parameter groups in the workflow.\\nid : str | None\\n    The AlbertID of the workflow. This is set when a workflow is retrived from the platform.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"ParameterGroups\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ParameterGroupSetpoints\"\n          },\n          \"title\": \"Parametergroups\",\n          \"type\": \"array\"\n        },\n        \"IntervalCombinations\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/IntervalCombination\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Intervalcombinations\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"blockMapping\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Blockmapping\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"ParameterGroups\"\n      ],\n      \"title\": \"Workflow\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"qcTask\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Qctask\"\n    },\n    \"InitialWorkflow\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Workflow\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        }\n      ],\n      \"title\": \"Initialworkflow\"\n    },\n    \"FinalWorkflow\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Workflow\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        }\n      ],\n      \"title\": \"Finalworkflow\"\n    },\n    \"Datatemplate\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/DataTemplate\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        }\n      ],\n      \"title\": \"Datatemplate\"\n    },\n    \"Data\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/DataInterval\"\n      },\n      \"title\": \"Data\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"name\",\n    \"InitialWorkflow\",\n    \"FinalWorkflow\",\n    \"Datatemplate\"\n  ],\n  \"title\": \"TaskData\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>task_id</code>                 (<code>TaskId</code>)             </li> <li> <code>task_name</code>                 (<code>str</code>)             </li> <li> <code>qc_task</code>                 (<code>bool | None</code>)             </li> <li> <code>initial_workflow</code>                 (<code>SerializeAsEntityLink[Workflow]</code>)             </li> <li> <code>finial_workflow</code>                 (<code>SerializeAsEntityLink[Workflow]</code>)             </li> <li> <code>data_template</code>                 (<code>SerializeAsEntityLink[DataTemplate]</code>)             </li> <li> <code>data</code>                 (<code>list[DataInterval]</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.TaskData.task_id","title":"task_id","text":"<pre><code>task_id: TaskId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskData.task_name","title":"task_name","text":"<pre><code>task_name: str\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskData.qc_task","title":"qc_task","text":"<pre><code>qc_task: bool | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskData.initial_workflow","title":"initial_workflow","text":"<pre><code>initial_workflow: SerializeAsEntityLink[Workflow]\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskData.finial_workflow","title":"finial_workflow","text":"<pre><code>finial_workflow: SerializeAsEntityLink[Workflow]\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskData.data_template","title":"data_template","text":"<pre><code>data_template: SerializeAsEntityLink[DataTemplate]\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskData.data","title":"data","text":"<pre><code>data: list[DataInterval]\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CustomInventoryDataColumn","title":"CustomInventoryDataColumn","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"PropertyData\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"PropertyData\",\n      \"type\": \"object\"\n    },\n    \"PropertyValue\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"calculation\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Calculation\"\n        },\n        \"valueNumeric\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuenumeric\"\n        },\n        \"valueString\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuestring\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            }\n          ],\n          \"title\": \"Unit\"\n        },\n        \"PropertyData\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/PropertyData\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"dataColumnUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumnuniqueid\"\n        },\n        \"hidden\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Hidden\"\n        }\n      },\n      \"title\": \"PropertyValue\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"PropertyData\": {\n      \"$ref\": \"#/$defs/PropertyValue\"\n    },\n    \"Unit\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Unit\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        },\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Unit\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"name\",\n    \"PropertyData\"\n  ],\n  \"title\": \"CustomInventoryDataColumn\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data_column_id</code>                 (<code>DataColumnId</code>)             </li> <li> <code>data_column_name</code>                 (<code>str</code>)             </li> <li> <code>property_data</code>                 (<code>PropertyValue</code>)             </li> <li> <code>unit</code>                 (<code>SerializeAsEntityLink[Unit] | None | dict</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.CustomInventoryDataColumn.data_column_id","title":"data_column_id","text":"<pre><code>data_column_id: DataColumnId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CustomInventoryDataColumn.data_column_name","title":"data_column_name","text":"<pre><code>data_column_name: str\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CustomInventoryDataColumn.property_data","title":"property_data","text":"<pre><code>property_data: PropertyValue\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CustomInventoryDataColumn.unit","title":"unit","text":"<pre><code>unit: SerializeAsEntityLink[Unit] | None | dict\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CustomData","title":"CustomData","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"CustomInventoryDataColumn\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"PropertyData\": {\n          \"$ref\": \"#/$defs/PropertyValue\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Unit\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"name\",\n        \"PropertyData\"\n      ],\n      \"title\": \"CustomInventoryDataColumn\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"InventoryCategory\": {\n      \"enum\": [\n        \"RawMaterials\",\n        \"Consumables\",\n        \"Equipment\",\n        \"Formulas\"\n      ],\n      \"title\": \"InventoryCategory\",\n      \"type\": \"string\"\n    },\n    \"Location\": {\n      \"description\": \"A location in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the location.\\nid : str | None\\n    The Albert ID of the location. Set when the location is retrieved from Albert.\\nlatitude : float\\n    The latitude of the location.\\nlongitude : float\\n    The longitude of the location.\\naddress : str\\n    The address of the location.\\ncountry : str | None\\n    The country code of the location. Must be two characters long.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"latitude\": {\n          \"title\": \"Latitude\",\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"title\": \"Longitude\",\n          \"type\": \"number\"\n        },\n        \"address\": {\n          \"title\": \"Address\",\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"anyOf\": [\n            {\n              \"maxLength\": 2,\n              \"minLength\": 2,\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Country\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"latitude\",\n        \"longitude\",\n        \"address\"\n      ],\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Lot\": {\n      \"description\": \"A lot in Albert.\\n\\nAttributes\\n----------\\nid : LotId | None\\n    The Albert ID of the lot. Set when the lot is retrieved from Albert.\\ninventory_id : InventoryId\\n    The Albert ID of the inventory item associated with the lot.\\ntask_id : str | None\\n    The Albert ID of the task associated with the creation of lot. Optional.\\nnotes : str | None\\n    The notes associated with the lot. Optional.\\nexpiration_date : str | None\\n    The expiration date of the lot. YYYY-MM-DD format. Optional.\\nmanufacturer_lot_number : str | None\\n    The manufacturer lot number of the lot. Optional.\\nstorage_location : StorageLocation | None\\n    The storage location of the lot. Optional.\\npack_size : str | None\\n    The pack size of the lot. Optional. Used to calculate the cost per unit.\\ninitial_quantity : NonNegativeFloat | None\\n    The initial quantity of the lot. Optional.\\ncost : NonNegativeFloat | None\\n    The cost of the lot. Optional.\\ninventory_on_hand : NonNegativeFloat\\n    The inventory on hand of the lot.\\nowner : list[User] | None\\n    The owners of the lot. Optional.\\nlot_number : str | None\\n    The lot number of the lot. Optional.\\nexternal_barcode_id : str | None\\n    The external barcode ID of the lot. Optional.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\\n    The metadata of the lot. Optional. Metadata allowed values can be found using the Custom Fields API.\\nhas_notes : bool\\n    Whether the lot has notes. Read-only.\\nhas_attachments : bool\\n    Whether the lot has attachments. Read-only.\\nbarcode_id : str\\n    The barcode ID of the lot. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/LotStatus\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"parentId\": {\n          \"title\": \"Parentid\",\n          \"type\": \"string\"\n        },\n        \"taskId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Taskid\"\n        },\n        \"expirationDate\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Expirationdate\"\n        },\n        \"manufacturerLotNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Manufacturerlotnumber\"\n        },\n        \"StorageLocation\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/StorageLocation\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Storagelocation\"\n        },\n        \"packSize\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Packsize\"\n        },\n        \"initialQuantity\": {\n          \"anyOf\": [\n            {\n              \"minimum\": 0,\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Initialquantity\"\n        },\n        \"cost\": {\n          \"anyOf\": [\n            {\n              \"minimum\": 0,\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cost\"\n        },\n        \"inventoryOnHand\": {\n          \"minimum\": 0,\n          \"title\": \"Inventoryonhand\",\n          \"type\": \"number\"\n        },\n        \"Owner\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/User\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Owner\"\n        },\n        \"lotNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lotnumber\"\n        },\n        \"externalBarcodeId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Externalbarcodeid\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"Location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Location\"\n        },\n        \"notes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Notes\"\n        },\n        \"hasNotes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Hasnotes\"\n        },\n        \"hasAttachments\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Hasattachments\"\n        },\n        \"parentName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentname\"\n        },\n        \"parentUnit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentunit\"\n        },\n        \"parentCategory\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/InventoryCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"barcodeId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Barcodeid\"\n        }\n      },\n      \"required\": [\n        \"parentId\",\n        \"inventoryOnHand\"\n      ],\n      \"title\": \"Lot\",\n      \"type\": \"object\"\n    },\n    \"LotStatus\": {\n      \"description\": \"The status of a lot\",\n      \"enum\": [\n        \"active\",\n        \"inactive\",\n        \"quarantined\"\n      ],\n      \"title\": \"LotStatus\",\n      \"type\": \"string\"\n    },\n    \"PropertyData\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"PropertyData\",\n      \"type\": \"object\"\n    },\n    \"PropertyValue\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"calculation\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Calculation\"\n        },\n        \"valueNumeric\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuenumeric\"\n        },\n        \"valueString\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuestring\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            }\n          ],\n          \"title\": \"Unit\"\n        },\n        \"PropertyData\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/PropertyData\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"dataColumnUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumnuniqueid\"\n        },\n        \"hidden\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Hidden\"\n        }\n      },\n      \"title\": \"PropertyValue\",\n      \"type\": \"object\"\n    },\n    \"Role\": {\n      \"description\": \"A role in Albert. Note: Roles are not currently creatable via the SDK.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the role.\\nid : str\\n    The Albert ID of the role. Set when the role is retrieved from Albert.\\npolicies : list[Any] | None\\n    The policies associated with the role.\\ntenant : str\\n    The tenant ID of the role.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"policies\": {\n          \"anyOf\": [\n            {\n              \"items\": {},\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Policies\"\n        },\n        \"tenant\": {\n          \"title\": \"Tenant\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"tenant\"\n      ],\n      \"title\": \"Role\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"StorageLocation\": {\n      \"description\": \"A storage location entity. For example, a specific flammables cabinet or a storage room.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the storage location.\\nid : str | None\\n    The Albert ID of the storage location. Set when the storage location is retrieved from Albert.\\nlocation : Location\\n    The location entity link of the storage location.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"maxLength\": 255,\n          \"minLength\": 2,\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            }\n          ],\n          \"title\": \"Location\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"Location\"\n      ],\n      \"title\": \"StorageLocation\",\n      \"type\": \"object\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    },\n    \"User\": {\n      \"description\": \"Represents a User on the Albert Platform\\n\\nAttributes\\n----------\\nname : str\\n    The name of the user.\\nid : str | None\\n    The Albert ID of the user. Set when the user is retrieved from Albert.\\nlocation : Location | None\\n    The location of the user.\\nemail : EmailStr | None\\n    The email of the user.\\nroles : list[Role]\\n    The roles of the user.\\nuser_class : UserClass\\n    The ACL class level of the user.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Location\"\n        },\n        \"email\": {\n          \"default\": null,\n          \"format\": \"email\",\n          \"title\": \"Email\",\n          \"type\": \"string\"\n        },\n        \"Roles\": {\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/$defs/Role\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              }\n            ]\n          },\n          \"maxItems\": 1,\n          \"title\": \"Roles\",\n          \"type\": \"array\"\n        },\n        \"userClass\": {\n          \"$ref\": \"#/$defs/UserClass\",\n          \"default\": \"standard\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"User\",\n      \"type\": \"object\"\n    },\n    \"UserClass\": {\n      \"description\": \"The ACL class level of the user\",\n      \"enum\": [\n        \"guest\",\n        \"standard\",\n        \"trusted\",\n        \"privileged\",\n        \"admin\"\n      ],\n      \"title\": \"UserClass\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"Lot\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Lot\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        },\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Lot\"\n    },\n    \"DataColumn\": {\n      \"$ref\": \"#/$defs/CustomInventoryDataColumn\"\n    }\n  },\n  \"required\": [\n    \"DataColumn\"\n  ],\n  \"title\": \"CustomData\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>lot</code>                 (<code>SerializeAsEntityLink[Lot] | None | dict</code>)             </li> <li> <code>data_column</code>                 (<code>CustomInventoryDataColumn</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.CustomData.lot","title":"lot","text":"<pre><code>lot: SerializeAsEntityLink[Lot] | None | dict\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CustomData.data_column","title":"data_column","text":"<pre><code>data_column: CustomInventoryDataColumn\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataInventoryInformation","title":"PropertyDataInventoryInformation","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"lotId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lotid\"\n    }\n  },\n  \"title\": \"PropertyDataInventoryInformation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>inventory_id</code>                 (<code>str | None</code>)             </li> <li> <code>lot_id</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataInventoryInformation.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataInventoryInformation.lot_id","title":"lot_id","text":"<pre><code>lot_id: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CheckPropertyData","title":"CheckPropertyData","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>block_id</code> <code>str | None</code> <code>interval_id</code> <code>str | None</code> <code>inventory_id</code> <code>str | None</code> <code>lot_id</code> <code>str | None</code> <code>data_exists</code> <code>bool | None</code> <code>message</code> <code>str | None</code>"},{"location":"resources/property_data/#albert.resources.property_data.CheckPropertyData.block_id","title":"block_id","text":"<pre><code>block_id: str | None = Field(default=None, alias='blockId')\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CheckPropertyData.interval_id","title":"interval_id","text":"<pre><code>interval_id: str | None = Field(\n    default=None, alias=\"interval\"\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CheckPropertyData.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: str | None = Field(\n    default=None, alias=\"inventoryId\"\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CheckPropertyData.lot_id","title":"lot_id","text":"<pre><code>lot_id: str | None = Field(default=None, alias='lotId')\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CheckPropertyData.data_exists","title":"data_exists","text":"<pre><code>data_exists: bool | None = Field(\n    default=None, alias=\"dataExist\"\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.CheckPropertyData.message","title":"message","text":"<pre><code>message: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyData","title":"InventoryPropertyData","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>inventory_id</code> <code>str</code> <code>inventory_name</code> <code>str | None</code> <code>task_property_data</code> <code>list[TaskData]</code> <code>custom_property_data</code> <code>list[CustomData]</code>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyData.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: str = Field(alias='inventoryId')\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyData.inventory_name","title":"inventory_name","text":"<pre><code>inventory_name: str | None = Field(\n    default=None, alias=\"inventoryName\"\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyData.task_property_data","title":"task_property_data","text":"<pre><code>task_property_data: list[TaskData] = Field(\n    default_factory=list, alias=\"Task\"\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyData.custom_property_data","title":"custom_property_data","text":"<pre><code>custom_property_data: list[CustomData] = Field(\n    default_factory=list, alias=\"NoTask\"\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData","title":"TaskPropertyData","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>entity</code> <code>Literal[TASK]</code> <code>parent_id</code> <code>str</code> <code>task_id</code> <code>str | None</code> <code>inventory</code> <code>PropertyDataInventoryInformation | None</code> <code>category</code> <code>DataEntity | None</code> <code>initial_workflow</code> <code>SerializeAsEntityLink[Workflow] | None</code> <code>finial_workflow</code> <code>SerializeAsEntityLink[Workflow] | None</code> <code>data_template</code> <code>SerializeAsEntityLink[DataTemplate] | None</code> <code>data</code> <code>list[DataInterval]</code> <code>block_id</code> <code>str | None</code>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.entity","title":"entity","text":"<pre><code>entity: Literal[TASK] = TASK\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.parent_id","title":"parent_id","text":"<pre><code>parent_id: str = Field(..., alias='parentId')\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.task_id","title":"task_id","text":"<pre><code>task_id: str | None = Field(default=None, alias='id')\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.inventory","title":"inventory","text":"<pre><code>inventory: PropertyDataInventoryInformation | None = Field(\n    default=None, alias=\"Inventory\"\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.category","title":"category","text":"<pre><code>category: DataEntity | None = Field(default=None)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.initial_workflow","title":"initial_workflow","text":"<pre><code>initial_workflow: SerializeAsEntityLink[Workflow] | None = (\n    Field(default=None, alias=\"InitialWorkflow\")\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.finial_workflow","title":"finial_workflow","text":"<pre><code>finial_workflow: SerializeAsEntityLink[Workflow] | None = (\n    Field(default=None, alias=\"FinalWorkflow\")\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.data_template","title":"data_template","text":"<pre><code>data_template: (\n    SerializeAsEntityLink[DataTemplate] | None\n) = Field(default=None, alias=\"DataTemplate\")\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.data","title":"data","text":"<pre><code>data: list[DataInterval] = Field(\n    alias=\"Data\", frozen=True, exclude=True\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyData.block_id","title":"block_id","text":"<pre><code>block_id: str | None = Field(alias='blockId', default=None)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.BulkPropertyDataColumn","title":"BulkPropertyDataColumn","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>A Simple Data Structure representing all the rows of data in a block's data column.</p> Show JSON schema: <pre><code>{\n  \"description\": \"A Simple Data Structure representing all the rows of data in a block's data column.\",\n  \"properties\": {\n    \"data_column_name\": {\n      \"default\": null,\n      \"description\": \"The name of the data column (case sensitive).\",\n      \"title\": \"Data Column Name\",\n      \"type\": \"string\"\n    },\n    \"data_series\": {\n      \"description\": \"The values, in order of row number, for the data column.\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"title\": \"Data Series\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"BulkPropertyDataColumn\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data_column_name</code>                 (<code>str</code>)             </li> <li> <code>data_series</code>                 (<code>list[str]</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.BulkPropertyDataColumn.data_column_name","title":"data_column_name","text":"<pre><code>data_column_name: str = None\n</code></pre> <p>The name of the data column (case sensitive).</p>"},{"location":"resources/property_data/#albert.resources.property_data.BulkPropertyDataColumn.data_series","title":"data_series","text":"<pre><code>data_series: list[str]\n</code></pre> <p>The values, in order of row number, for the data column.</p>"},{"location":"resources/property_data/#albert.resources.property_data.BulkPropertyData","title":"BulkPropertyData","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>A Simple Data Structure representing all the columns of data in a block's data column.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BulkPropertyDataColumn\": {\n      \"description\": \"A Simple Data Structure representing all the rows of data in a block's data column.\",\n      \"properties\": {\n        \"data_column_name\": {\n          \"default\": null,\n          \"description\": \"The name of the data column (case sensitive).\",\n          \"title\": \"Data Column Name\",\n          \"type\": \"string\"\n        },\n        \"data_series\": {\n          \"description\": \"The values, in order of row number, for the data column.\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"title\": \"Data Series\",\n          \"type\": \"array\"\n        }\n      },\n      \"title\": \"BulkPropertyDataColumn\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"A Simple Data Structure representing all the columns of data in a block's data column.\",\n  \"properties\": {\n    \"columns\": {\n      \"description\": \"The columns of data in the block's data column.\",\n      \"items\": {\n        \"$ref\": \"#/$defs/BulkPropertyDataColumn\"\n      },\n      \"title\": \"Columns\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"BulkPropertyData\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>columns</code>                 (<code>list[BulkPropertyDataColumn]</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.BulkPropertyData.columns","title":"columns","text":"<pre><code>columns: list[BulkPropertyDataColumn]\n</code></pre> <p>The columns of data in the block's data column.</p>"},{"location":"resources/property_data/#albert.resources.property_data.BulkPropertyData.from_dataframe","title":"from_dataframe","text":"<pre><code>from_dataframe(df: DataFrame) -&gt; BulkPropertyData\n</code></pre> <p>Converts a DataFrame to a BulkPropertyData object.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>DataFrame</code> <p>The DataFrame to convert.</p> required <p>Returns:</p> Type Description <code>BulkPropertyData</code> <p>The BulkPropertyData object that represents the data in the DataFrame.</p> Source code in <code>src/albert/resources/property_data.py</code> <pre><code>@classmethod\ndef from_dataframe(cls, df: pd.DataFrame) -&gt; \"BulkPropertyData\":\n    \"\"\"\n    Converts a DataFrame to a BulkPropertyData object.\n\n    Parameters\n    ----------\n    df : pd.DataFrame\n        The DataFrame to convert.\n\n    Returns\n    -------\n    BulkPropertyData\n        The BulkPropertyData object that represents the data in the DataFrame.\n    \"\"\"\n    # Convert all the values to strings, since all albert values are string typed in Albert\n    df = df.fillna(\"\").astype(str)\n    columns = []\n    for column in df.columns:\n        data_column = BulkPropertyDataColumn(\n            data_column_name=column, data_series=df[column].tolist()\n        )\n        columns.append(data_column)\n    return BulkPropertyData(columns=columns)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyValue","title":"TaskPropertyValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    }\n  },\n  \"title\": \"TaskPropertyValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>value</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyValue.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskDataColumn","title":"TaskDataColumn","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"columnId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Columnid\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"TaskDataColumn\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data_column_id</code>                 (<code>DataColumnId</code>)             </li> <li> <code>column_sequence</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.TaskDataColumn.data_column_id","title":"data_column_id","text":"<pre><code>data_column_id: DataColumnId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskDataColumn.column_sequence","title":"column_sequence","text":"<pre><code>column_sequence: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskDataColumnValue","title":"TaskDataColumnValue","text":"<p>               Bases: <code>TaskDataColumn</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"TaskPropertyValue\": {\n      \"properties\": {\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"TaskPropertyValue\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"columnId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Columnid\"\n    },\n    \"Value\": {\n      \"$ref\": \"#/$defs/TaskPropertyValue\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"Value\"\n  ],\n  \"title\": \"TaskDataColumnValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data_column_id</code>                 (<code>DataColumnId</code>)             </li> <li> <code>column_sequence</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>TaskPropertyValue</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>set_string_value</code>                 \u2192                   <code>value</code> </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.TaskDataColumnValue.value","title":"value","text":"<pre><code>value: TaskPropertyValue\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskDataColumnValue.set_string_value","title":"set_string_value","text":"<pre><code>set_string_value(v)\n</code></pre> <p>Converts a string to TaskPropertyValue if the input is a string.</p> Source code in <code>src/albert/resources/property_data.py</code> <pre><code>@field_validator(\"value\", mode=\"before\")\ndef set_string_value(cls, v):\n    \"\"\"\n    Converts a string to TaskPropertyValue if the input is a string.\n    \"\"\"\n    if isinstance(v, str):\n        return TaskPropertyValue(value=v)\n    return v\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskTrialData","title":"TaskTrialData","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"TaskDataColumnValue\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"columnId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Columnid\"\n        },\n        \"Value\": {\n          \"$ref\": \"#/$defs/TaskPropertyValue\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"Value\"\n      ],\n      \"title\": \"TaskDataColumnValue\",\n      \"type\": \"object\"\n    },\n    \"TaskPropertyValue\": {\n      \"properties\": {\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"TaskPropertyValue\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"trialNo\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Trialno\"\n    },\n    \"DataColumns\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/TaskDataColumnValue\"\n      },\n      \"title\": \"Datacolumns\",\n      \"type\": \"array\"\n    }\n  },\n  \"title\": \"TaskTrialData\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>trial_number</code>                 (<code>int | None</code>)             </li> <li> <code>data_columns</code>                 (<code>list[TaskDataColumnValue]</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.TaskTrialData.trial_number","title":"trial_number","text":"<pre><code>trial_number: int | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskTrialData.data_columns","title":"data_columns","text":"<pre><code>data_columns: list[TaskDataColumnValue]\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryDataColumn","title":"InventoryDataColumn","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    }\n  },\n  \"title\": \"InventoryDataColumn\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data_column_id</code>                 (<code>DataColumnId | None</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryDataColumn.data_column_id","title":"data_column_id","text":"<pre><code>data_column_id: DataColumnId | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryDataColumn.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyCreate","title":"TaskPropertyCreate","text":"<p>               Bases: <code>BaseResource</code></p> <p>Represents a task property to be created.</p> <p>This class is used to create new task properties. Users can use the <code>Workflowe.get_interval_id</code> method to find the correct interval given the names and setpoints of the parameters.</p> Notes <ul> <li>Users can use <code>Workflow.get_interval_id(parameter_values={\"name1\":\"value1\", \"name2\":\"value2\"})</code>   to find the correct interval given the names and setpoints of the parameters.</li> <li>Leave <code>trial_number</code> blank to create a new row/trial.</li> <li><code>visible_trial_number</code> can be used to set the relative row number, allowing you to pass multiple rows of data at once.</li> </ul> <p>Methods:</p> Name Description <code>set_visible_trial_number</code> <p>Attributes:</p> Name Type Description <code>entity</code> <code>Literal[TASK]</code> <code>interval_combination</code> <code>str</code> <code>data_column</code> <code>TaskDataColumn</code> <code>value</code> <code>str | None</code> <code>trial_number</code> <code>int</code> <code>data_template</code> <code>SerializeAsEntityLink[DataTemplate]</code> <code>visible_trial_number</code> <code>int | None</code>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyCreate.entity","title":"entity","text":"<pre><code>entity: Literal[TASK] = Field(\n    default=TASK,\n    description=\"The entity type, which is always `DataEntity.TASK` for task properties.\",\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyCreate.interval_combination","title":"interval_combination","text":"<pre><code>interval_combination: str = Field(\n    alias=\"intervalCombination\",\n    examples=[\"default\", \"ROW4XROW2\", \"ROW2\"],\n    default=\"default\",\n    description=\"The interval combination, which can be found using `Workflow.get_interval_id`.\",\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyCreate.data_column","title":"data_column","text":"<pre><code>data_column: TaskDataColumn = Field(\n    ...,\n    alias=\"DataColumns\",\n    description=\"The data column associated with the task property.\",\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyCreate.value","title":"value","text":"<pre><code>value: str | None = Field(\n    default=None,\n    description=\"The value of the task property.\",\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyCreate.trial_number","title":"trial_number","text":"<pre><code>trial_number: int = Field(\n    alias=\"trialNo\",\n    default=None,\n    description=\"The trial number/ row number. Leave blank to create a new row/trial.\",\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyCreate.data_template","title":"data_template","text":"<pre><code>data_template: SerializeAsEntityLink[DataTemplate] = Field(\n    ...,\n    alias=\"DataTemplate\",\n    description=\"The data template associated with the task property.\",\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyCreate.visible_trial_number","title":"visible_trial_number","text":"<pre><code>visible_trial_number: int | None = Field(\n    alias=\"visibleTrialNo\",\n    default=None,\n    description=\"Can be used to set the relative row number, allowing you to pass multiple rows of data at once.\",\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.TaskPropertyCreate.set_visible_trial_number","title":"set_visible_trial_number","text":"<pre><code>set_visible_trial_number() -&gt; TaskPropertyCreate\n</code></pre> Source code in <code>src/albert/resources/property_data.py</code> <pre><code>@model_validator(mode=\"after\")\ndef set_visible_trial_number(self) -&gt; \"TaskPropertyCreate\":\n    if self.visible_trial_number is None:\n        if self.trial_number is not None:\n            self.visible_trial_number = self.trial_number\n        else:\n            self.visible_trial_number = \"1\"\n    return self\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataPatchDatum","title":"PropertyDataPatchDatum","text":"<p>               Bases: <code>PatchDatum</code></p> <p>Attributes:</p> Name Type Description <code>property_column_id</code> <code>DataColumnId | PropertyDataId</code>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataPatchDatum.property_column_id","title":"property_column_id","text":"<pre><code>property_column_id: DataColumnId | PropertyDataId = Field(\n    alias=\"id\"\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyDataCreate","title":"InventoryPropertyDataCreate","text":"<p>               Bases: <code>BaseResource</code></p> <p>Attributes:</p> Name Type Description <code>entity</code> <code>Literal[INVENTORY]</code> <code>inventory_id</code> <code>InventoryId</code> <code>data_columns</code> <code>list[InventoryDataColumn]</code> <code>status</code> <code>PropertyDataStatus | None</code>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyDataCreate.entity","title":"entity","text":"<pre><code>entity: Literal[INVENTORY] = Field(default=INVENTORY)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyDataCreate.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: InventoryId = Field(alias='parentId')\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyDataCreate.data_columns","title":"data_columns","text":"<pre><code>data_columns: list[InventoryDataColumn] = Field(\n    default_factory=list, max_length=1, alias=\"DataColumn\"\n)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.InventoryPropertyDataCreate.status","title":"status","text":"<pre><code>status: PropertyDataStatus | None = Field(default=None)\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.WorkflowItem","title":"WorkflowItem","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"parameterGroupId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Parametergroupid\"\n    },\n    \"valueNumeric\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Valuenumeric\"\n    },\n    \"unitName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unitname\"\n    },\n    \"unitId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unitid\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"id\"\n  ],\n  \"title\": \"WorkflowItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>id</code>                 (<code>ParameterId</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> <li> <code>parameter_group_id</code>                 (<code>ParameterGroupId | None</code>)             </li> <li> <code>value_numeric</code>                 (<code>float | None</code>)             </li> <li> <code>unit_name</code>                 (<code>str | None</code>)             </li> <li> <code>unit_id</code>                 (<code>UnitId | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.WorkflowItem.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.WorkflowItem.id","title":"id","text":"<pre><code>id: ParameterId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.WorkflowItem.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.WorkflowItem.parameter_group_id","title":"parameter_group_id","text":"<pre><code>parameter_group_id: ParameterGroupId | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.WorkflowItem.value_numeric","title":"value_numeric","text":"<pre><code>value_numeric: float | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.WorkflowItem.unit_name","title":"unit_name","text":"<pre><code>unit_name: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.WorkflowItem.unit_id","title":"unit_id","text":"<pre><code>unit_id: UnitId | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataResult","title":"PropertyDataResult","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"valueNumeric\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Valuenumeric\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"trial\": {\n      \"title\": \"Trial\",\n      \"type\": \"string\"\n    },\n    \"valueString\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Valuestring\"\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"id\",\n    \"trial\"\n  ],\n  \"title\": \"PropertyDataResult\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>value_numeric</code>                 (<code>float | None</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>data_column_id</code>                 (<code>DataColumnId</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> <li> <code>trial</code>                 (<code>str</code>)             </li> <li> <code>value_string</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataResult.value_numeric","title":"value_numeric","text":"<pre><code>value_numeric: float | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataResult.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataResult.data_column_id","title":"data_column_id","text":"<pre><code>data_column_id: DataColumnId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataResult.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataResult.trial","title":"trial","text":"<pre><code>trial: str\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataResult.value_string","title":"value_string","text":"<pre><code>value_string: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem","title":"PropertyDataSearchItem","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"PropertyDataResult\": {\n      \"properties\": {\n        \"valueNumeric\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuenumeric\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"trial\": {\n          \"title\": \"Trial\",\n          \"type\": \"string\"\n        },\n        \"valueString\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuestring\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"id\",\n        \"trial\"\n      ],\n      \"title\": \"PropertyDataResult\",\n      \"type\": \"object\"\n    },\n    \"WorkflowItem\": {\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"parameterGroupId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parametergroupid\"\n        },\n        \"valueNumeric\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuenumeric\"\n        },\n        \"unitName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unitname\"\n        },\n        \"unitId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unitid\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"id\"\n      ],\n      \"title\": \"WorkflowItem\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"category\": {\n      \"title\": \"Category\",\n      \"type\": \"string\"\n    },\n    \"workflow\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/WorkflowItem\"\n      },\n      \"title\": \"Workflow\",\n      \"type\": \"array\"\n    },\n    \"result\": {\n      \"$ref\": \"#/$defs/PropertyDataResult\"\n    },\n    \"dataTemplateId\": {\n      \"title\": \"Datatemplateid\",\n      \"type\": \"string\"\n    },\n    \"workflowName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Workflowname\"\n    },\n    \"parentId\": {\n      \"title\": \"Parentid\",\n      \"type\": \"string\"\n    },\n    \"dataTemplateName\": {\n      \"title\": \"Datatemplatename\",\n      \"type\": \"string\"\n    },\n    \"createdBy\": {\n      \"title\": \"Createdby\",\n      \"type\": \"string\"\n    },\n    \"inventoryId\": {\n      \"title\": \"Inventoryid\",\n      \"type\": \"string\"\n    },\n    \"projectId\": {\n      \"title\": \"Projectid\",\n      \"type\": \"string\"\n    },\n    \"workflowId\": {\n      \"title\": \"Workflowid\",\n      \"type\": \"string\"\n    },\n    \"taskId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Taskid\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"category\",\n    \"workflow\",\n    \"result\",\n    \"dataTemplateId\",\n    \"parentId\",\n    \"dataTemplateName\",\n    \"createdBy\",\n    \"inventoryId\",\n    \"projectId\",\n    \"workflowId\"\n  ],\n  \"title\": \"PropertyDataSearchItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>PropertyDataId</code>)             </li> <li> <code>category</code>                 (<code>str</code>)             </li> <li> <code>workflow</code>                 (<code>list[WorkflowItem]</code>)             </li> <li> <code>result</code>                 (<code>PropertyDataResult</code>)             </li> <li> <code>data_template_id</code>                 (<code>DataTemplateId</code>)             </li> <li> <code>workflow_name</code>                 (<code>str | None</code>)             </li> <li> <code>parent_id</code>                 (<code>TaskId | InventoryId</code>)             </li> <li> <code>data_template_name</code>                 (<code>str</code>)             </li> <li> <code>created_by</code>                 (<code>str</code>)             </li> <li> <code>inventory_id</code>                 (<code>InventoryId</code>)             </li> <li> <code>project_id</code>                 (<code>ProjectId</code>)             </li> <li> <code>workflow_id</code>                 (<code>WorkflowId</code>)             </li> <li> <code>task_id</code>                 (<code>TaskId | None</code>)             </li> </ul>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.id","title":"id","text":"<pre><code>id: PropertyDataId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.category","title":"category","text":"<pre><code>category: str\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.workflow","title":"workflow","text":"<pre><code>workflow: list[WorkflowItem]\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.result","title":"result","text":"<pre><code>result: PropertyDataResult\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.data_template_id","title":"data_template_id","text":"<pre><code>data_template_id: DataTemplateId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.workflow_name","title":"workflow_name","text":"<pre><code>workflow_name: str | None = None\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.parent_id","title":"parent_id","text":"<pre><code>parent_id: TaskId | InventoryId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.data_template_name","title":"data_template_name","text":"<pre><code>data_template_name: str\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.created_by","title":"created_by","text":"<pre><code>created_by: str\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: InventoryId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.project_id","title":"project_id","text":"<pre><code>project_id: ProjectId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.workflow_id","title":"workflow_id","text":"<pre><code>workflow_id: WorkflowId\n</code></pre>"},{"location":"resources/property_data/#albert.resources.property_data.PropertyDataSearchItem.task_id","title":"task_id","text":"<pre><code>task_id: TaskId | None = None\n</code></pre>"},{"location":"resources/reports/","title":"Reports","text":""},{"location":"resources/reports/#albert.resources.reports","title":"albert.resources.reports","text":"<p>Attributes:</p> Name Type Description <code>ReportItem</code>"},{"location":"resources/reports/#albert.resources.reports.ReportItem","title":"ReportItem","text":"<pre><code>ReportItem = dict[str, Any] | list[dict[str, Any]] | None\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ReportInfo","title":"ReportInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Attributes:</p> Name Type Description <code>report_type_id</code> <code>str</code> <code>report_type</code> <code>str</code> <code>category</code> <code>str</code> <code>items</code> <code>list[ReportItem]</code>"},{"location":"resources/reports/#albert.resources.reports.ReportInfo.report_type_id","title":"report_type_id","text":"<pre><code>report_type_id: str = Field(..., alias='reportTypeId')\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ReportInfo.report_type","title":"report_type","text":"<pre><code>report_type: str = Field(..., alias='reportType')\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ReportInfo.category","title":"category","text":"<pre><code>category: str\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ReportInfo.items","title":"items","text":"<pre><code>items: list[ReportItem] = Field(..., alias='Items')\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ColumnState","title":"ColumnState","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Column State Object for reports.</p> <p>Attributes:</p> Name Type Description <code>col_id</code> <code>str</code> <code>row_group_index</code> <code>int | None</code> <code>agg_func</code> <code>str | None</code> <code>pivot</code> <code>bool</code> <code>pivot_index</code> <code>int | None</code> <code>row_group</code> <code>bool</code>"},{"location":"resources/reports/#albert.resources.reports.ColumnState.col_id","title":"col_id","text":"<pre><code>col_id: str = Field(..., alias='colId')\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ColumnState.row_group_index","title":"row_group_index","text":"<pre><code>row_group_index: int | None = Field(\n    default=None, alias=\"rowGroupIndex\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ColumnState.agg_func","title":"agg_func","text":"<pre><code>agg_func: str | None = Field(default=None, alias='aggFunc')\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ColumnState.pivot","title":"pivot","text":"<pre><code>pivot: bool = Field(default=False)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ColumnState.pivot_index","title":"pivot_index","text":"<pre><code>pivot_index: int | None = Field(\n    default=None, alias=\"pivotIndex\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ColumnState.row_group","title":"row_group","text":"<pre><code>row_group: bool = Field(default=False, alias='rowGroup')\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FilterModel","title":"FilterModel","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Filter Model Object for reports.</p> <p>Attributes:</p> Name Type Description <code>filter_type</code> <code>str</code> <code>values</code> <code>list[Any] | None</code>"},{"location":"resources/reports/#albert.resources.reports.FilterModel.filter_type","title":"filter_type","text":"<pre><code>filter_type: str = Field(..., alias='filterType')\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FilterModel.values","title":"values","text":"<pre><code>values: list[Any] | None = Field(default=None)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FilterState","title":"FilterState","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Filters State Object for reports.</p> <p>Attributes:</p> Name Type Description <code>filter_models</code> <code>list[FilterModel]</code>"},{"location":"resources/reports/#albert.resources.reports.FilterState.filter_models","title":"filter_models","text":"<pre><code>filter_models: list[FilterModel] = Field(\n    default_factory=list, alias=\"filterModels\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.MetadataState","title":"MetadataState","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Metadata State Object for reports.</p> <p>Attributes:</p> Name Type Description <code>grouped_rows</code> <code>list[str]</code>"},{"location":"resources/reports/#albert.resources.reports.MetadataState.grouped_rows","title":"grouped_rows","text":"<pre><code>grouped_rows: list[str] = Field(\n    default_factory=list, alias=\"groupedRows\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ChartConfiguration","title":"ChartConfiguration","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Chart Configuration Object for reports.</p> <p>Attributes:</p> Name Type Description <code>chart_type</code> <code>str | None</code>"},{"location":"resources/reports/#albert.resources.reports.ChartConfiguration.chart_type","title":"chart_type","text":"<pre><code>chart_type: str | None = Field(\n    default=None, alias=\"chartType\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ChartTemplate","title":"ChartTemplate","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Chart Template Object for reports.</p> <p>Attributes:</p> Name Type Description <code>chart_type</code> <code>str</code>"},{"location":"resources/reports/#albert.resources.reports.ChartTemplate.chart_type","title":"chart_type","text":"<pre><code>chart_type: str = Field(..., alias='chartType')\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ChartModelState","title":"ChartModelState","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Chart State Object for reports.</p> <p>Attributes:</p> Name Type Description <code>chart_template</code> <code>ChartTemplate | None</code> <code>chart_configuration</code> <code>ChartConfiguration | None</code>"},{"location":"resources/reports/#albert.resources.reports.ChartModelState.chart_template","title":"chart_template","text":"<pre><code>chart_template: ChartTemplate | None = Field(\n    default=None, alias=\"chartTemplate\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ChartModelState.chart_configuration","title":"chart_configuration","text":"<pre><code>chart_configuration: ChartConfiguration | None = Field(\n    default=None, alias=\"chartConfiguration\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.ColumnMapping","title":"ColumnMapping","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Column Mapping Object for reports.</p>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport","title":"FullAnalyticalReport","text":"<p>               Bases: <code>BaseResource</code></p> <p>A full analytical report in Albert.</p> <p>This resource represents a complete analytical report with all its configuration, data, and state information.</p> <p>Attributes:</p> Name Type Description <code>report_data_id</code> <code>str | None</code> <p>Unique Identifier of the Report which is created. Read-only.</p> <code>report_type_id</code> <code>str</code> <p>Type of report which will be created. Taken from reports/type API.</p> <code>report_type</code> <code>str | None</code> <p>Type of report which will be created. Name taken from reports/type API.</p> <code>name</code> <code>str</code> <p>Name of the report. Maximum length 500 characters.</p> <code>description</code> <code>str | None</code> <p>Description of the report. Maximum length 1000 characters.</p> <code>project_id</code> <code>str | None</code> <p>Project ID of the report. Not mandatory.</p> <code>project_name</code> <code>str | None</code> <p>Name of the project.</p> <code>parent_id</code> <code>str | None</code> <p>Parent ID of the report. Not mandatory.</p> <code>report_v2</code> <code>bool | None</code> <p>Whether this is a v2 report.</p> <code>input_data</code> <code>dict[str, Any] | None</code> <p>Input data for the report.</p> <code>report_state</code> <code>str | None</code> <p>Any string representing the report state.</p> <code>column_state</code> <code>List[ColumnState] | None</code> <p>Column state objects.</p> <code>filter_state</code> <code>FilterState | None</code> <p>Filters state object.</p> <code>meta_data_state</code> <code>MetadataState | None</code> <p>Metadata state object.</p> <code>chart_model_state</code> <code>List[ChartModelState] | None</code> <p>Chart state objects.</p> <code>field_mapping</code> <code>List[ColumnMapping] | None</code> <p>Column mapping objects.</p> <code>source_report_id</code> <code>str | None</code> <p>Report ID from which to copy states to the new report.</p> <code>created_by</code> <code>str | None</code> <p>Specifies the createdBy id.</p> <p>Methods:</p> Name Description <code>get_raw_dataframe</code> <p>Get the raw report data as a pandas DataFrame.</p>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.id","title":"id","text":"<pre><code>id: ReportId | None = Field(\n    default=None,\n    alias=AliasChoices(\"id\", \"albertId\"),\n    serialization_alias=\"id\",\n    exclude=True,\n    frozen=True,\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.report_type_id","title":"report_type_id","text":"<pre><code>report_type_id: str = Field(..., alias='reportTypeId')\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.name","title":"name","text":"<pre><code>name: str = Field(..., min_length=1, max_length=500)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.report_type","title":"report_type","text":"<pre><code>report_type: str | None = Field(\n    default=None, alias=\"reportType\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.description","title":"description","text":"<pre><code>description: str | None = Field(\n    default=None, max_length=1000\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.project_id","title":"project_id","text":"<pre><code>project_id: ProjectId | None = Field(\n    default=None, alias=\"projectId\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.project_name","title":"project_name","text":"<pre><code>project_name: str | None = Field(\n    default=None, alias=\"projectName\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.parent_id","title":"parent_id","text":"<pre><code>parent_id: str | None = Field(\n    default=None, alias=\"parentId\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.report_v2","title":"report_v2","text":"<pre><code>report_v2: bool | None = Field(\n    default=None, alias=\"reportV2\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.input_data","title":"input_data","text":"<pre><code>input_data: dict[str, Any] | None = Field(\n    default=None, alias=\"inputData\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.report_state","title":"report_state","text":"<pre><code>report_state: str | None = Field(\n    default=None, alias=\"reportState\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.column_state","title":"column_state","text":"<pre><code>column_state: list[ColumnState] | None = Field(\n    default_factory=list, alias=\"columnState\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.filter_state","title":"filter_state","text":"<pre><code>filter_state: FilterState | None = Field(\n    default=None, alias=\"filterState\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.meta_data_state","title":"meta_data_state","text":"<pre><code>meta_data_state: MetadataState | None = Field(\n    default=None, alias=\"metaDataState\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.chart_model_state","title":"chart_model_state","text":"<pre><code>chart_model_state: list[ChartModelState] | None = Field(\n    default_factory=list, alias=\"chartModelState\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.field_mapping","title":"field_mapping","text":"<pre><code>field_mapping: list[ColumnMapping] | None = Field(\n    default_factory=list, alias=\"FieldMapping\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.source_report_id","title":"source_report_id","text":"<pre><code>source_report_id: ReportId | None = Field(\n    default=None, alias=\"sourceReportId\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.created_by","title":"created_by","text":"<pre><code>created_by: str | None = Field(\n    default=None, alias=\"createdBy\"\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.report","title":"report","text":"<pre><code>report: list[dict[str, Any]] | None = Field(\n    default=None, frozen=True\n)\n</code></pre>"},{"location":"resources/reports/#albert.resources.reports.FullAnalyticalReport.get_raw_dataframe","title":"get_raw_dataframe","text":"<pre><code>get_raw_dataframe() -&gt; DataFrame\n</code></pre> <p>Get the raw report data as a pandas DataFrame.</p> <p>Returns:</p> Type Description <code>DataFrame</code> <p>The raw report data.</p> Source code in <code>src/albert/resources/reports.py</code> <pre><code>def get_raw_dataframe(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Get the raw report data as a pandas DataFrame.\n\n    Returns\n    -------\n    pd.DataFrame\n        The raw report data.\n    \"\"\"\n    if not self.report:\n        raise ValueError(\"Report data is not available\")\n    return pd.DataFrame(self.report)\n</code></pre>"},{"location":"resources/roles/","title":"Roles","text":""},{"location":"resources/roles/#albert.resources.roles","title":"albert.resources.roles","text":""},{"location":"resources/roles/#albert.resources.roles.Role","title":"Role","text":"<p>               Bases: <code>BaseResource</code></p> <p>A role in Albert. Note: Roles are not currently creatable via the SDK.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the role.</p> <code>id</code> <code>str</code> <p>The Albert ID of the role. Set when the role is retrieved from Albert.</p> <code>policies</code> <code>list[Any] | None</code> <p>The policies associated with the role.</p> <code>tenant</code> <code>str</code> <p>The tenant ID of the role.</p>"},{"location":"resources/roles/#albert.resources.roles.Role.id","title":"id","text":"<pre><code>id: str | None = Field(default=None, alias='albertId')\n</code></pre>"},{"location":"resources/roles/#albert.resources.roles.Role.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/roles/#albert.resources.roles.Role.policies","title":"policies","text":"<pre><code>policies: list[Any] | None = Field(default=None)\n</code></pre>"},{"location":"resources/roles/#albert.resources.roles.Role.tenant","title":"tenant","text":"<pre><code>tenant: str\n</code></pre>"},{"location":"resources/sheets/","title":"Sheets","text":""},{"location":"resources/sheets/#albert.resources.sheets","title":"albert.resources.sheets","text":""},{"location":"resources/sheets/#albert.resources.sheets.CellColor","title":"CellColor","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The allowed colors for a cell</p> <p>Attributes:</p> Name Type Description <code>WHITE</code> <code>RED</code> <code>GREEN</code> <code>BLUE</code> <code>YELLOW</code> <code>ORANGE</code> <code>PURPLE</code>"},{"location":"resources/sheets/#albert.resources.sheets.CellColor.WHITE","title":"WHITE","text":"<pre><code>WHITE = 'RGB(255, 255, 255)'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellColor.RED","title":"RED","text":"<pre><code>RED = 'RGB(255, 161, 161)'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellColor.GREEN","title":"GREEN","text":"<pre><code>GREEN = 'RGB(130, 222, 198)'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellColor.BLUE","title":"BLUE","text":"<pre><code>BLUE = 'RGB(214, 233, 255)'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellColor.YELLOW","title":"YELLOW","text":"<pre><code>YELLOW = 'RGB(254, 240, 159)'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellColor.ORANGE","title":"ORANGE","text":"<pre><code>ORANGE = 'RGB(255, 227, 210)'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellColor.PURPLE","title":"PURPLE","text":"<pre><code>PURPLE = 'RGB(238, 215, 255)'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType","title":"CellType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The type of information in the Cell</p> <p>Attributes:</p> Name Type Description <code>INVENTORY</code> <code>APP</code> <code>BLANK</code> <code>FORMULA</code> <code>TAG</code> <code>PRICE</code> <code>PDC</code> <code>BAT</code> <code>TOTAL</code> <code>TAS</code> <code>DEF</code> <code>LKP</code> <code>FOR</code> <code>EXTINV</code> <code>BTI</code>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.INVENTORY","title":"INVENTORY","text":"<pre><code>INVENTORY = 'INV'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.APP","title":"APP","text":"<pre><code>APP = 'APP'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.BLANK","title":"BLANK","text":"<pre><code>BLANK = 'BLK'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.FORMULA","title":"FORMULA","text":"<pre><code>FORMULA = 'Formula'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.TAG","title":"TAG","text":"<pre><code>TAG = 'TAG'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.PRICE","title":"PRICE","text":"<pre><code>PRICE = 'PRC'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.PDC","title":"PDC","text":"<pre><code>PDC = 'PDC'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.BAT","title":"BAT","text":"<pre><code>BAT = 'BAT'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.TOTAL","title":"TOTAL","text":"<pre><code>TOTAL = 'TOT'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.TAS","title":"TAS","text":"<pre><code>TAS = 'TAS'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.DEF","title":"DEF","text":"<pre><code>DEF = 'DEF'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.LKP","title":"LKP","text":"<pre><code>LKP = 'LKP'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.FOR","title":"FOR","text":"<pre><code>FOR = 'FOR'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.EXTINV","title":"EXTINV","text":"<pre><code>EXTINV = 'EXTINV'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.CellType.BTI","title":"BTI","text":"<pre><code>BTI = 'BTI'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.DesignType","title":"DesignType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The type of Design</p> <p>Attributes:</p> Name Type Description <code>APPS</code> <code>PRODUCTS</code> <code>RESULTS</code> <code>PROCESS</code>"},{"location":"resources/sheets/#albert.resources.sheets.DesignType.APPS","title":"APPS","text":"<pre><code>APPS = 'apps'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.DesignType.PRODUCTS","title":"PRODUCTS","text":"<pre><code>PRODUCTS = 'products'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.DesignType.RESULTS","title":"RESULTS","text":"<pre><code>RESULTS = 'results'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.DesignType.PROCESS","title":"PROCESS","text":"<pre><code>PROCESS = 'process'\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell","title":"Cell","text":"<p>               Bases: <code>BaseResource</code></p> <p>A Cell in a Sheet</p> <p>Attributes:</p> Name Type Description <code>column_id</code> <code>str</code> <p>The column ID of the cell.</p> <code>row_id</code> <code>str</code> <p>The row ID of the cell.</p> <code>value</code> <code>str | dict</code> <p>The value of the cell. If the cell is an inventory item, this will be a dict.</p> <code>min_value</code> <code>str | None</code> <p>The minimum allowed value for inventory cells. Optional.</p> <code>max_value</code> <code>str | None</code> <p>The maximum allowed value for inventory cells. Optional.</p> <code>row_label_name</code> <code>(str, optional)</code> <p>The display name of the row.</p> <code>type</code> <code>CellType</code> <p>The type of the cell. Allowed values are <code>INV</code>, <code>APP</code>, <code>BLK</code>, <code>Formula</code>, <code>TAG</code>, <code>PRC</code>, <code>PDC</code>, <code>BAT</code>, <code>TOT</code>, <code>TAS</code>, <code>DEF</code>, <code>LKP</code>, <code>FOR</code>, and <code>EXTINV</code>.</p> <code>row_type</code> <code>(CellType, optional)</code> <p>The type of the row containing this cell. Usually one of INV (inventory row), TOT (total row), TAS (task row), TAG, PRC, PDC, BAT or BLK.</p> <code>name</code> <code>str | None</code> <p>The name of the cell. Optional. Default is None.</p> <code>calculation</code> <code>str</code> <p>The calculation of the cell. Optional. Default is \"\".</p> <code>design_id</code> <code>str</code> <p>The design ID of the design this cell is in.</p> <code>format</code> <code>dict</code> <p>The format of the cell. Optional. Default is {}. The format is a dict with the keys <code>bgColor</code> and <code>fontColor</code>. The values are strings in the format <code>RGB(255, 255, 255)</code>.</p> <code>raw_value</code> <code>str</code> <p>The raw value of the cell. If the cell is an inventory item, this will be the value of the inventory item. Read-only.</p> <code>color</code> <code>str | None</code> <p>The color of the cell. Read only.</p>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.column_id","title":"column_id","text":"<pre><code>column_id: str = Field(alias='colId')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.row_id","title":"row_id","text":"<pre><code>row_id: str = Field(alias='rowId')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.row_label_name","title":"row_label_name","text":"<pre><code>row_label_name: str | None = Field(\n    default=None, alias=\"lableName\"\n)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.value","title":"value","text":"<pre><code>value: str | dict | list = ''\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.min_value","title":"min_value","text":"<pre><code>min_value: str | None = Field(\n    default=None, alias=\"minValue\"\n)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.max_value","title":"max_value","text":"<pre><code>max_value: str | None = Field(\n    default=None, alias=\"maxValue\"\n)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.type","title":"type","text":"<pre><code>type: CellType\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.row_type","title":"row_type","text":"<pre><code>row_type: CellType | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.name","title":"name","text":"<pre><code>name: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.calculation","title":"calculation","text":"<pre><code>calculation: str = ''\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.design_id","title":"design_id","text":"<pre><code>design_id: str\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.format","title":"format","text":"<pre><code>format: dict = Field(\n    default_factory=dict, alias=\"cellFormat\"\n)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.raw_value","title":"raw_value","text":"<pre><code>raw_value\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Cell.color","title":"color","text":"<pre><code>color\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Component","title":"Component","text":"<p>               Bases: <code>BaseResource</code></p> <p>Represents an amount of an inventory item in a formulation.</p> <p>Attributes:</p> Name Type Description <code>inventory_item</code> <code>InventoryItem | None</code> <p>The inventory item in the component. Optional when <code>inventory_id</code> is provided.</p> <code>inventory_id</code> <code>InventoryId | None</code> <p>The inventory identifier backing the component. Automatically populated from <code>inventory_item</code> when present; required when <code>inventory_item</code> is omitted.</p> <code>amount</code> <code>float</code> <p>The amount of the inventory item in the component.</p> <code>cell</code> <code>Cell</code> <p>The cell that the component is in. Read-only.</p>"},{"location":"resources/sheets/#albert.resources.sheets.Component.inventory_item","title":"inventory_item","text":"<pre><code>inventory_item: InventoryItem | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Component.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: InventoryId | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Component.amount","title":"amount","text":"<pre><code>amount: float\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Component.min_value","title":"min_value","text":"<pre><code>min_value: float | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Component.max_value","title":"max_value","text":"<pre><code>max_value: float | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Component.cell","title":"cell","text":"<pre><code>cell\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Component.inventory_item_id","title":"inventory_item_id","text":"<pre><code>inventory_item_id: InventoryId\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.DesignState","title":"DesignState","text":"<p>               Bases: <code>BaseResource</code></p> <p>The state of a Design</p> <p>Attributes:</p> Name Type Description <code>collapsed</code> <code>bool | None</code>"},{"location":"resources/sheets/#albert.resources.sheets.DesignState.collapsed","title":"collapsed","text":"<pre><code>collapsed: bool | None = False\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Design","title":"Design","text":"<p>               Bases: <code>BaseSessionResource</code></p> <p>A Design in a Sheet. Designs are sheet subsections that are largly abstracted away from the user.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The Albert ID of the design.</p> <code>design_type</code> <code>DesignType</code> <p>The type of the design. Allowed values are <code>apps</code>, <code>products</code>, and <code>results</code>.</p> <code>state</code> <code>DesignState | None</code> <p>The state of the design. Optional. Default is None.</p> <code>grid</code> <code>DataFrame | None</code> <p>The grid of the design. Optional. Default is None. Read-only.</p> <code>rows</code> <code>list[Row] | None</code> <p>The rows of the design. Optional. Default is None. Read-only.</p> <code>columns</code> <code>list[Column] | None</code> <p>The columns of the design. Optional. Default is None. Read-only.</p>"},{"location":"resources/sheets/#albert.resources.sheets.Design.state","title":"state","text":"<pre><code>state: DesignState | None = Field({})\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Design.id","title":"id","text":"<pre><code>id: str = Field(alias='albertId')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Design.design_type","title":"design_type","text":"<pre><code>design_type: DesignType = Field(alias='designType')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Design.sheet","title":"sheet","text":"<pre><code>sheet\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Design.grid","title":"grid","text":"<pre><code>grid\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Design.columns","title":"columns","text":"<pre><code>columns: list[Column]\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Design.rows","title":"rows","text":"<pre><code>rows: list[Row]\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.SheetFormulationRef","title":"SheetFormulationRef","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>A reference to a formulation in a sheet</p> Show JSON schema: <pre><code>{\n  \"description\": \"A reference to a formulation in a sheet\",\n  \"properties\": {\n    \"id\": {\n      \"description\": \"The Albert ID of the inventory item that is the formulation\",\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"description\": \"The name of the formulation\",\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"hidden\": {\n      \"description\": \"Whether the formulation is hidden\",\n      \"title\": \"Hidden\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"name\",\n    \"hidden\"\n  ],\n  \"title\": \"SheetFormulationRef\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>hidden</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"resources/sheets/#albert.resources.sheets.SheetFormulationRef.id","title":"id","text":"<pre><code>id: str\n</code></pre> <p>The Albert ID of the inventory item that is the formulation</p>"},{"location":"resources/sheets/#albert.resources.sheets.SheetFormulationRef.name","title":"name","text":"<pre><code>name: str\n</code></pre> <p>The name of the formulation</p>"},{"location":"resources/sheets/#albert.resources.sheets.SheetFormulationRef.hidden","title":"hidden","text":"<pre><code>hidden: bool\n</code></pre> <p>Whether the formulation is hidden</p>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet","title":"Sheet","text":"<p>               Bases: <code>BaseSessionResource</code></p> <p>A Sheet in Albert</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The Albert ID of the sheet.</p> <code>name</code> <code>str</code> <p>The name of the sheet.</p> <code>hidden</code> <code>bool</code> <p>Whether the sheet is hidden.</p> <code>designs</code> <code>list[Design]</code> <p>The designs of the sheet.</p> <code>project_id</code> <code>str</code> <p>The Albert ID of the project the sheet is in.</p> <code>grid</code> <code>DataFrame | None</code> <p>The grid of the sheet. Optional. Default is None. Read-only.</p> <code>columns</code> <code>list[Column]</code> <p>The columns of the sheet. Read-only.</p> <code>rows</code> <code>list[Row]</code> <p>The rows of the sheet. Read-only.</p> <p>Methods:</p> Name Description <code>set_session</code> <code>set_sheet_fields</code> <code>rename</code> <code>add_formulation</code> <code>add_formulation_columns</code> <code>add_blank_row</code> <code>add_inventory_row</code> <code>update_cells</code> <code>add_blank_column</code> <code>delete_column</code> <code>delete_row</code> <code>get_column</code> <p>Retrieve a Column by its colId, underlying inventory ID, or display header name.</p> <code>lock_column</code> <p>Lock or unlock a column in the sheet.</p>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.id","title":"id","text":"<pre><code>id: str = Field(alias='albertId')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.formulations","title":"formulations","text":"<pre><code>formulations: list[SheetFormulationRef] = Field(\n    default_factory=list, alias=\"Formulas\"\n)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.hidden","title":"hidden","text":"<pre><code>hidden: bool\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.designs","title":"designs","text":"<pre><code>designs: list[Design] = Field(alias='Designs')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.project_id","title":"project_id","text":"<pre><code>project_id: str = Field(alias='projectId')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.app_design","title":"app_design","text":"<pre><code>app_design\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.product_design","title":"product_design","text":"<pre><code>product_design\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.result_design","title":"result_design","text":"<pre><code>result_design\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.grid","title":"grid","text":"<pre><code>grid\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.leftmost_pinned_column","title":"leftmost_pinned_column","text":"<pre><code>leftmost_pinned_column\n</code></pre> <p>The leftmost pinned column in the sheet</p>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.columns","title":"columns","text":"<pre><code>columns: list[Column]\n</code></pre> <p>The columns of a given sheet</p>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.rows","title":"rows","text":"<pre><code>rows: list[Row]\n</code></pre> <p>The rows of a given sheet</p>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.set_session","title":"set_session","text":"<pre><code>set_session()\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>@model_validator(mode=\"after\")\ndef set_session(self):\n    if self.session is not None:\n        for d in self.designs:\n            d._session = self.session\n    return self\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.set_sheet_fields","title":"set_sheet_fields","text":"<pre><code>set_sheet_fields() -&gt; Sheet\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>@model_validator(mode=\"after\")\ndef set_sheet_fields(self: \"Sheet\") -&gt; \"Sheet\":\n    for _idx, d in enumerate(self.designs):  # Instead of creating a new list\n        d._sheet = self  # Set the reference to the sheet\n        if d.design_type == DesignType.APPS:\n            self._app_design = d\n        elif d.design_type == DesignType.PRODUCTS:\n            self._product_design = d\n        elif d.design_type == DesignType.RESULTS:\n            self._result_design = d\n    return self\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.rename","title":"rename","text":"<pre><code>rename(*, new_name: str)\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def rename(self, *, new_name: str):\n    endpoint = f\"/api/v3/worksheet/sheet/{self.id}\"\n\n    payload = [{\"attribute\": \"name\", \"operation\": \"update\", \"newValue\": new_name}]\n\n    self.session.patch(endpoint, json=payload)\n\n    self.name = new_name\n    return self\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.add_formulation","title":"add_formulation","text":"<pre><code>add_formulation(\n    *,\n    formulation_name: str,\n    components: list[Component],\n    inventory_id: InventoryId | None = None,\n    enforce_order: bool = False,\n    clear: bool = True,\n) -&gt; Column\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def add_formulation(\n    self,\n    *,\n    formulation_name: str,\n    components: list[Component],\n    inventory_id: InventoryId | None = None,\n    enforce_order: bool = False,\n    clear: bool = True,\n) -&gt; Column:\n    existing_formulation_names = [x.name for x in self.columns]\n    if clear and formulation_name in existing_formulation_names:\n        # get the existing column and clear it out to put the new formulation in\n        col = self.get_column(column_name=formulation_name, inventory_id=inventory_id)\n        self._clear_formulation_from_column(column=col)\n    else:\n        col = self.add_formulation_columns(formulation_names=[formulation_name])[0]\n    col_id = col.column_id\n\n    all_cells = []\n    self.grid = None  # reset the grid for saftey\n\n    for component in components:\n        component_inventory_id = component.inventory_item_id\n        row_id = self._get_row_id_for_component(\n            inventory_id=component_inventory_id,\n            existing_cells=all_cells,\n            enforce_order=enforce_order,\n        )\n        if row_id is None:\n            raise AlbertException(f\"No Component with id {component_inventory_id}\")\n\n        value = str(component.amount)\n        min_value = str(component.min_value) if component.min_value is not None else None\n        max_value = str(component.max_value) if component.max_value is not None else None\n        this_cell = Cell(\n            column_id=col_id,\n            row_id=row_id,\n            value=value,\n            calculation=\"\",\n            type=CellType.INVENTORY,\n            design_id=self.product_design.id,\n            name=formulation_name,\n            inventory_id=col.inventory_id,\n            min_value=min_value,\n            max_value=max_value,\n        )\n        all_cells.append(this_cell)\n\n    self.update_cells(cells=all_cells)\n    return self.get_column(column_id=col_id)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.add_formulation_columns","title":"add_formulation_columns","text":"<pre><code>add_formulation_columns(\n    *,\n    formulation_names: list[str],\n    starting_position: dict | None = None,\n) -&gt; list[Column]\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def add_formulation_columns(\n    self,\n    *,\n    formulation_names: list[str],\n    starting_position: dict | None = None,\n) -&gt; list[\"Column\"]:\n    if starting_position is None:\n        starting_position = {\n            \"reference_id\": self.leftmost_pinned_column,\n            \"position\": \"rightOf\",\n        }\n    sheet_id = self.id\n\n    endpoint = f\"/api/v3/worksheet/sheet/{sheet_id}/columns\"\n\n    # In case a user supplied a single formulation name instead of a list\n    formulation_names = (\n        formulation_names if isinstance(formulation_names, list) else [formulation_names]\n    )\n\n    payload = []\n    for formulation_name in (\n        formulation_names\n    ):  # IS there a limit to the number I can add at once? Need to check this.\n        # define payload for this item\n        payload.append(\n            {\n                \"type\": \"INV\",\n                \"name\": formulation_name,\n                \"referenceId\": starting_position[\"reference_id\"],  # initially defined column\n                \"position\": starting_position[\"position\"],\n            }\n        )\n    response = self.session.post(endpoint, json=payload)\n\n    self.grid = None\n    new_dicts = self._reformat_formulation_addition_payload(response_json=response.json())\n    return [Column(**x) for x in new_dicts]\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.add_blank_row","title":"add_blank_row","text":"<pre><code>add_blank_row(\n    *,\n    row_name: str,\n    design: DesignType | str | None = PRODUCTS,\n    position: dict | None = None,\n)\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def add_blank_row(\n    self,\n    *,\n    row_name: str,\n    design: DesignType | str | None = DesignType.PRODUCTS,\n    position: dict | None = None,\n):\n    if design == DesignType.RESULTS:\n        raise AlbertException(\"You cannot add rows to the results design\")\n    if position is None:\n        position = {\"reference_id\": \"ROW1\", \"position\": \"above\"}\n    endpoint = f\"/api/v3/worksheet/design/{self._get_design_id(design=design)}/rows\"\n\n    payload = [\n        {\n            \"type\": \"BLK\",\n            \"name\": row_name,\n            \"referenceId\": position[\"reference_id\"],\n            \"position\": position[\"position\"],\n        }\n    ]\n\n    response = self.session.post(endpoint, json=payload)\n\n    self.grid = None\n    row_dict = response.json()[0]\n    return Row(\n        rowId=row_dict[\"rowId\"],\n        type=row_dict[\"type\"],\n        session=self.session,\n        design=self._get_design(design=design),\n        name=row_dict[\"name\"],\n        sheet=self,\n    )\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.add_inventory_row","title":"add_inventory_row","text":"<pre><code>add_inventory_row(\n    *, inventory_id: str, position: dict | None = None\n)\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def add_inventory_row(\n    self,\n    *,\n    inventory_id: str,\n    position: dict | None = None,\n):\n    if position is None:\n        position = {\"reference_id\": \"ROW1\", \"position\": \"above\"}\n    design_id = self.product_design.id\n    endpoint = f\"/api/v3/worksheet/design/{design_id}/rows\"\n\n    payload = {\n        \"type\": \"INV\",\n        \"id\": (\"INV\" + inventory_id if not inventory_id.startswith(\"INV\") else inventory_id),\n        \"referenceId\": position[\"reference_id\"],\n        \"position\": position[\"position\"],\n    }\n\n    response = self.session.post(endpoint, json=payload)\n\n    self.grid = None\n    row_dict = response.json()\n    return Row(\n        rowId=row_dict[\"rowId\"],\n        inventory_id=inventory_id,\n        type=row_dict[\"type\"],\n        session=self.session,\n        design=self.product_design,\n        sheet=self,\n        name=row_dict[\"name\"],\n        id=row_dict[\"id\"],\n        manufacturer=row_dict[\"manufacturer\"],\n    )\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.update_cells","title":"update_cells","text":"<pre><code>update_cells(*, cells: list[Cell])\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def update_cells(self, *, cells: list[Cell]):\n    request_path_dict = {}\n    updated = []\n    failed = []\n    # sort by design ID\n    for c in cells:\n        if c.design_id not in request_path_dict:\n            request_path_dict[c.design_id] = [c]\n        else:\n            request_path_dict[c.design_id].append(c)\n\n    for design_id, cell_list in request_path_dict.items():\n        payloads = []\n        for cell in cell_list:\n            change_dict = self._get_cell_changes(cell=cell)\n            if change_dict is not None:\n                # For non-calculation cells, only one change is allowed at a time.\n                is_calculation_cell = cell.calculation is not None and cell.calculation != \"\"\n                max_items = 2 if is_calculation_cell else 1\n\n                if len(change_dict[\"data\"]) &gt; max_items:\n                    for item in change_dict[\"data\"]:\n                        payloads.append(\n                            {\n                                \"Id\": change_dict[\"Id\"],\n                                \"data\": [item],\n                            }\n                        )\n                else:\n                    payloads.append(change_dict)\n\n        if not payloads:\n            continue\n\n        this_url = f\"/api/v3/worksheet/{design_id}/values\"\n        for payload in payloads:\n            response = self.session.patch(\n                this_url,\n                json=[payload],  # The API expects a list of changes\n            )\n\n            original_cell = next(\n                (\n                    c\n                    for c in cell_list\n                    if c.row_id == payload[\"Id\"][\"rowId\"]\n                    and c.column_id == payload[\"Id\"][\"colId\"]\n                ),\n                None,\n            )\n\n            if response.status_code == 204:\n                if original_cell and original_cell not in updated:\n                    updated.append(original_cell)\n            elif response.status_code == 206:\n                cell_results = self._filter_cells(\n                    cells=[original_cell], response_dict=response.json()\n                )\n                updated.extend(cell_results[0])\n                failed.extend(cell_results[1])\n            else:\n                if original_cell and original_cell not in failed:\n                    failed.append(original_cell)\n\n    # reset the in-memory grid after updates\n    self.grid = None\n    return (updated, failed)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.add_blank_column","title":"add_blank_column","text":"<pre><code>add_blank_column(*, name: str, position: dict = None)\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def add_blank_column(self, *, name: str, position: dict = None):\n    if position is None:\n        position = {\"reference_id\": self.leftmost_pinned_column, \"position\": \"rightOf\"}\n    endpoint = f\"/api/v3/worksheet/sheet/{self.id}/columns\"\n    payload = [\n        {\n            \"type\": \"BLK\",\n            \"name\": name,\n            \"referenceId\": position[\"reference_id\"],\n            \"position\": position[\"position\"],\n        }\n    ]\n\n    response = self.session.post(endpoint, json=payload)\n\n    data = response.json()\n    data[0][\"sheet\"] = self\n    data[0][\"session\"] = self.session\n    self.grid = None  # reset the known grid. We could probably make this nicer later.\n    return Column(**data[0])\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.delete_column","title":"delete_column","text":"<pre><code>delete_column(*, column_id: str) -&gt; None\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def delete_column(self, *, column_id: str) -&gt; None:\n    endpoint = f\"/api/v3/worksheet/sheet/{self.id}/columns\"\n    payload = [{\"colId\": column_id}]\n    self.session.delete(endpoint, json=payload)\n\n    if self._grid is not None:  # if I have a grid loaded into memory, adjust it.\n        self.grid = None\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.delete_row","title":"delete_row","text":"<pre><code>delete_row(*, row_id: str, design_id: str) -&gt; None\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def delete_row(self, *, row_id: str, design_id: str) -&gt; None:\n    endpoint = f\"/api/v3/worksheet/design/{design_id}/rows\"\n    payload = [{\"rowId\": row_id}]\n    self.session.delete(endpoint, json=payload)\n\n    if self._grid is not None:  # if I have a grid loaded into memory, adjust it.\n        self.grid = None\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.get_column","title":"get_column","text":"<pre><code>get_column(\n    *,\n    column_id: str | None = None,\n    inventory_id: InventoryId | None = None,\n    column_name: str | None = None,\n) -&gt; Column\n</code></pre> <p>Retrieve a Column by its colId, underlying inventory ID, or display header name.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str | None</code> <p>The sheet column ID to match (e.g. \"COL5\").</p> <code>None</code> <code>inventory_id</code> <code>str | None</code> <p>The internal inventory identifier to match (e.g. \"INVP015-001\").</p> <code>None</code> <code>column_name</code> <code>str | None</code> <p>The human-readable header name of the column (e.g. \"p1\").</p> <code>None</code> <p>Returns:</p> Type Description <code>Column</code> <p>The matching Column object.</p> <p>Raises:</p> Type Description <code>AlbertException</code> <p>If no matching column is found or if multiple matches exist.</p> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>@validate_call\ndef get_column(\n    self,\n    *,\n    column_id: str | None = None,\n    inventory_id: InventoryId | None = None,\n    column_name: str | None = None,\n) -&gt; Column:\n    \"\"\"\n    Retrieve a Column by its colId, underlying inventory ID, or display header name.\n\n    Parameters\n    ----------\n    column_id : str | None\n        The sheet column ID to match (e.g. \"COL5\").\n    inventory_id : str | None\n        The internal inventory identifier to match (e.g. \"INVP015-001\").\n    column_name : str | None\n        The human-readable header name of the column (e.g. \"p1\").\n\n    Returns\n    -------\n    Column\n        The matching Column object.\n\n    Raises\n    ------\n    AlbertException\n        If no matching column is found or if multiple matches exist.\n    \"\"\"\n\n    if not (column_id or inventory_id or column_name):\n        raise AlbertException(\n            \"Must provide at least one of column_id, inventory_id or column_name\"\n        )\n    # Gather candidates matching your filters\n    candidates: list[Column] = []\n    for col in self.columns:\n        if column_id and col.column_id != column_id:\n            continue\n        if inventory_id and col.inventory_id != inventory_id:\n            continue\n        if column_name and col.name != column_name:\n            continue\n        candidates.append(col)\n\n    if not candidates:\n        raise AlbertException(\n            f\"No column found matching id={column_id}, \"\n            f\"inventory_id={inventory_id}, column_name={column_name}\"\n        )\n    if len(candidates) &gt; 1:\n        raise AlbertException(\"Ambiguous column match; please be more specific.\")\n\n    return candidates[0]\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Sheet.lock_column","title":"lock_column","text":"<pre><code>lock_column(\n    *,\n    column_id: str | None = None,\n    inventory_id: InventoryId | None = None,\n    column_name: str | None = None,\n    locked: bool = True,\n) -&gt; Column\n</code></pre> <p>Lock or unlock a column in the sheet.</p> <p>The column can be specified by its sheet column ID (e.g. <code>\"COL5\"</code>), by the underlying inventory identifier of a formulation/product, or by the displayed header name. By default the column will be locked; pass <code>locked=False</code> to unlock it.</p> <p>Parameters:</p> Name Type Description Default <code>column_id</code> <code>str | None</code> <p>The sheet column ID to match.</p> <code>None</code> <code>inventory_id</code> <code>str | None</code> <p>The inventory identifier of the formulation or product to match.</p> <code>None</code> <code>column_name</code> <code>str | None</code> <p>The displayed header name of the column.</p> <code>None</code> <code>locked</code> <code>bool</code> <p>Whether to lock (<code>True</code>) or unlock (<code>False</code>) the column. Defaults to <code>True</code>.</p> <code>True</code> <p>Returns:</p> Type Description <code>Column</code> <p>The column that was updated.</p> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def lock_column(\n    self,\n    *,\n    column_id: str | None = None,\n    inventory_id: InventoryId | None = None,\n    column_name: str | None = None,\n    locked: bool = True,\n) -&gt; Column:\n    \"\"\"Lock or unlock a column in the sheet.\n\n    The column can be specified by its sheet column ID (e.g. ``\"COL5\"``),\n    by the underlying inventory identifier of a formulation/product, or by\n    the displayed header name. By default the column will be locked; pass\n    ``locked=False`` to unlock it.\n\n    Parameters\n    ----------\n    column_id : str | None\n        The sheet column ID to match.\n    inventory_id : str | None\n        The inventory identifier of the formulation or product to match.\n    column_name : str | None\n        The displayed header name of the column.\n    locked : bool\n        Whether to lock (``True``) or unlock (``False``) the column. Defaults to\n        ``True``.\n\n    Returns\n    -------\n    Column\n        The column that was updated.\n    \"\"\"\n\n    column = self.get_column(\n        column_id=column_id, inventory_id=inventory_id, column_name=column_name\n    )\n\n    payload = {\n        \"data\": [\n            {\n                \"operation\": \"update\",\n                \"attribute\": \"locked\",\n                \"colIds\": [column.column_id],\n                \"newValue\": locked,\n            }\n        ]\n    }\n\n    self.session.patch(\n        url=f\"/api/v3/worksheet/sheet/{self.id}/columns\",\n        json=payload,\n    )\n\n    self.grid = None\n\n    return self.get_column(column_id=column.column_id)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column","title":"Column","text":"<p>               Bases: <code>BaseSessionResource</code></p> <p>A column in a Sheet</p> <p>Attributes:</p> Name Type Description <code>column_id</code> <code>str</code> <p>The column ID of the column.</p> <code>name</code> <code>str | None</code> <p>The name of the column. Optional. Default is None.</p> <code>type</code> <code>CellType</code> <p>The type of the column. Allowed values are <code>INV</code>, <code>APP</code>, <code>BLK</code>, <code>Formula</code>, <code>TAG</code>, <code>PRC</code>, <code>PDC</code>, <code>BAT</code>, <code>TOT</code>, <code>TAS</code>, <code>DEF</code>, <code>LKP</code>, <code>FOR</code>, and <code>EXTINV</code>.</p> <code>sheet</code> <code>Sheet</code> <p>The sheet the column is in.</p> <code>cells</code> <code>list[Cell]</code> <p>The cells in the column. Read-only.</p> <code>df_name</code> <code>str</code> <p>The name of the column in the DataFrame. Read-only</p> <p>Methods:</p> Name Description <code>rename</code> <code>recolor_cells</code>"},{"location":"resources/sheets/#albert.resources.sheets.Column.column_id","title":"column_id","text":"<pre><code>column_id: str = Field(alias='colId')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.name","title":"name","text":"<pre><code>name: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.type","title":"type","text":"<pre><code>type: CellType\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.sheet","title":"sheet","text":"<pre><code>sheet: Sheet\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: str | None = Field(default=None, exclude=True)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.locked","title":"locked","text":"<pre><code>locked: bool = Field(default=False)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.hidden","title":"hidden","text":"<pre><code>hidden: bool | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.pinned","title":"pinned","text":"<pre><code>pinned: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.column_width","title":"column_width","text":"<pre><code>column_width: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.df_name","title":"df_name","text":"<pre><code>df_name: str\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.cells","title":"cells","text":"<pre><code>cells: list[Cell]\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.rename","title":"rename","text":"<pre><code>rename(new_name)\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def rename(self, new_name):\n    payload = {\n        \"data\": [\n            {\n                \"operation\": \"update\",\n                \"attribute\": \"name\",\n                \"colId\": self.column_id,\n                \"oldValue\": self.name,\n                \"newValue\": new_name,\n            }\n        ]\n    }\n\n    self.session.patch(\n        url=f\"/api/v3/worksheet/sheet/{self.sheet.id}/columns\",\n        json=payload,\n    )\n\n    if self.sheet._grid is not None:  # if I have a grid loaded into memory, adjust it.\n        self.sheet.grid = None\n        # self.sheet._grid.rename(axis=1, mapper={self.name:new_name})\n    self.name = new_name\n    return self\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Column.recolor_cells","title":"recolor_cells","text":"<pre><code>recolor_cells(color: CellColor)\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def recolor_cells(self, color: CellColor):\n    new_cells = []\n    for c in self.cells:\n        cell_copy = c.model_copy(update={\"format\": {\"bgColor\": color.value}})\n        new_cells.append(cell_copy)\n    return self.sheet.update_cells(cells=new_cells)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row","title":"Row","text":"<p>               Bases: <code>BaseSessionResource</code></p> <p>A row in a Sheet</p> <p>Attributes:</p> Name Type Description <code>row_id</code> <code>str</code> <p>The row ID of the row.</p> <code>type</code> <code>CellType</code> <p>The type of the row. Allowed values are <code>INV</code>, <code>APP</code>, <code>BLK</code>, <code>Formula</code>, <code>TAG</code>, <code>PRC</code>, <code>PDC</code>, <code>BAT</code>, <code>TOT</code>, <code>TAS</code>, <code>DEF</code>, <code>LKP</code>, <code>FOR</code>, and <code>EXTINV</code>.</p> <code>design</code> <code>Design</code> <p>The design the row is in.</p> <code>sheet</code> <code>Sheet</code> <p>The sheet the row is in.</p> <code>name</code> <code>str | None</code> <p>The name of the row. Optional. Default is None.</p> <code>inventory_id</code> <code>str | None</code> <p>The inventory ID of the row. Optional. Default is None.</p> <code>manufacturer</code> <code>str | None</code> <p>The manufacturer of the row. Optional. Default is None.</p> <code>row_unique_id</code> <code>str</code> <p>The unique ID of the row. Read-only.</p> <code>cells</code> <code>list[Cell]</code> <p>The cells in the row. Read-only.</p> <p>Methods:</p> Name Description <code>recolor_cells</code>"},{"location":"resources/sheets/#albert.resources.sheets.Row.row_id","title":"row_id","text":"<pre><code>row_id: str = Field(alias='rowId')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row.type","title":"type","text":"<pre><code>type: CellType\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row.design","title":"design","text":"<pre><code>design: Design\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row.sheet","title":"sheet","text":"<pre><code>sheet: Sheet\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row.name","title":"name","text":"<pre><code>name: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: str | None = Field(default=None, alias='id')\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row.manufacturer","title":"manufacturer","text":"<pre><code>manufacturer: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row.row_unique_id","title":"row_unique_id","text":"<pre><code>row_unique_id\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row.cells","title":"cells","text":"<pre><code>cells: list[Cell]\n</code></pre>"},{"location":"resources/sheets/#albert.resources.sheets.Row.recolor_cells","title":"recolor_cells","text":"<pre><code>recolor_cells(color: CellColor)\n</code></pre> Source code in <code>src/albert/resources/sheets.py</code> <pre><code>def recolor_cells(self, color: CellColor):\n    new_cells = []\n    for c in self.cells:\n        cell_copy = c.model_copy(update={\"format\": {\"bgColor\": color.value}})\n        cell_copy.format = {\"bgColor\": color.value}\n        new_cells.append(cell_copy)\n    return self.sheet.update_cells(cells=new_cells)\n</code></pre>"},{"location":"resources/storage_classes/","title":"Storage Classes","text":""},{"location":"resources/storage_classes/#albert.resources.storage_classes","title":"albert.resources.storage_classes","text":""},{"location":"resources/storage_classes/#albert.resources.storage_classes.StorageCompatibilityMatrix","title":"StorageCompatibilityMatrix","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"Allowed\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Allowed\"\n    },\n    \"NotAllowed\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Notallowed\"\n    },\n    \"Warnings\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": {\n            \"items\": {\n              \"type\": \"string\"\n            },\n            \"type\": \"array\"\n          },\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"title\": \"Warnings\"\n    }\n  },\n  \"title\": \"StorageCompatibilityMatrix\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>allowed</code>                 (<code>list[str] | None</code>)             </li> <li> <code>not_allowed</code>                 (<code>list[str] | None</code>)             </li> <li> <code>warnings</code>                 (<code>dict[str, list[str]] | None</code>)             </li> </ul>"},{"location":"resources/storage_classes/#albert.resources.storage_classes.StorageCompatibilityMatrix.allowed","title":"allowed","text":"<pre><code>allowed: list[str] | None\n</code></pre>"},{"location":"resources/storage_classes/#albert.resources.storage_classes.StorageCompatibilityMatrix.not_allowed","title":"not_allowed","text":"<pre><code>not_allowed: list[str] | None\n</code></pre>"},{"location":"resources/storage_classes/#albert.resources.storage_classes.StorageCompatibilityMatrix.warnings","title":"warnings","text":"<pre><code>warnings: dict[str, list[str]] | None\n</code></pre>"},{"location":"resources/storage_classes/#albert.resources.storage_classes.StorageClass","title":"StorageClass","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"StorageCompatibilityMatrix\": {\n      \"properties\": {\n        \"Allowed\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Allowed\"\n        },\n        \"NotAllowed\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Notallowed\"\n        },\n        \"Warnings\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"items\": {\n                  \"type\": \"string\"\n                },\n                \"type\": \"array\"\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Warnings\"\n        }\n      },\n      \"title\": \"StorageCompatibilityMatrix\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"storageClassName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Storageclassname\"\n    },\n    \"storageClassNumber\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Storageclassnumber\"\n    },\n    \"StorageCompatibility\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/StorageCompatibilityMatrix\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"title\": \"StorageClass\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>storage_class_name</code>                 (<code>str | None</code>)             </li> <li> <code>storage_class_number</code>                 (<code>str | None</code>)             </li> <li> <code>storage_compatibility</code>                 (<code>StorageCompatibilityMatrix | None</code>)             </li> </ul>"},{"location":"resources/storage_classes/#albert.resources.storage_classes.StorageClass.storage_class_name","title":"storage_class_name","text":"<pre><code>storage_class_name: str | None = None\n</code></pre>"},{"location":"resources/storage_classes/#albert.resources.storage_classes.StorageClass.storage_class_number","title":"storage_class_number","text":"<pre><code>storage_class_number: str | None = None\n</code></pre>"},{"location":"resources/storage_classes/#albert.resources.storage_classes.StorageClass.storage_compatibility","title":"storage_compatibility","text":"<pre><code>storage_compatibility: StorageCompatibilityMatrix | None = (\n    None\n)\n</code></pre>"},{"location":"resources/storage_locations/","title":"Storage Locations","text":""},{"location":"resources/storage_locations/#albert.resources.storage_locations","title":"albert.resources.storage_locations","text":""},{"location":"resources/storage_locations/#albert.resources.storage_locations.StorageLocation","title":"StorageLocation","text":"<p>               Bases: <code>BaseResource</code></p> <p>A storage location entity. For example, a specific flammables cabinet or a storage room.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the storage location.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the storage location. Set when the storage location is retrieved from Albert.</p> <code>location</code> <code>Location</code> <p>The location entity link of the storage location.</p>"},{"location":"resources/storage_locations/#albert.resources.storage_locations.StorageLocation.name","title":"name","text":"<pre><code>name: str = Field(\n    alias=\"name\", min_length=2, max_length=255\n)\n</code></pre>"},{"location":"resources/storage_locations/#albert.resources.storage_locations.StorageLocation.id","title":"id","text":"<pre><code>id: str | None = Field(alias='albertId', default=None)\n</code></pre>"},{"location":"resources/storage_locations/#albert.resources.storage_locations.StorageLocation.location","title":"location","text":"<pre><code>location: SerializeAsEntityLink[Location] = Field(\n    alias=\"Location\"\n)\n</code></pre>"},{"location":"resources/substances/","title":"Substances","text":""},{"location":"resources/substances/#albert.resources.substance","title":"albert.resources.substance","text":""},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo","title":"ToxicityInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>ToxicityInfo is a Pydantic model representing toxicity information.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>str | None</code> <p>The result of the toxicity test.</p> <code>roe</code> <code>str | None</code> <p>The reference exposure level.</p> <code>unit</code> <code>str | None</code> <p>The unit of the toxicity test.</p> <code>method</code> <code>str | None</code> <p>The method of the toxicity test.</p> <code>value</code> <code>float | None</code> <p>The value of the toxicity test.</p> <code>species</code> <code>str | None</code> <p>The species of the toxicity test.</p> <code>sex</code> <code>str | None</code> <p>The sex of the toxicity test.</p> <code>exposure_time</code> <code>str | None</code> <p>The exposure time of the toxicity test.</p> <code>type</code> <code>str | None</code> <p>The type of the toxicity test.</p> <code>value_type</code> <code>str | None</code> <p>The value type of the toxicity test.</p> <code>temperature</code> <code>str | None</code> <p>The temperature of the toxicity test.</p> Show JSON schema: <pre><code>{\n  \"description\": \"ToxicityInfo is a Pydantic model representing toxicity information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the toxicity test.\\nroe : str | None\\n    The reference exposure level.\\nunit : str | None\\n    The unit of the toxicity test.\\nmethod: str | None\\n    The method of the toxicity test.\\nvalue: float | None\\n    The value of the toxicity test.\\nspecies: str | None\\n    The species of the toxicity test.\\nsex: str | None\\n    The sex of the toxicity test.\\nexposure_time: str | None\\n    The exposure time of the toxicity test.\\ntype: str | None\\n    The type of the toxicity test.\\nvalue_type: str | None\\n    The value type of the toxicity test.\\ntemperature: str | None\\n    The temperature of the toxicity test.\",\n  \"properties\": {\n    \"result\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Result\"\n    },\n    \"roe\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Roe\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    },\n    \"method\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Method\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"species\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Species\"\n    },\n    \"sex\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sex\"\n    },\n    \"exposureTime\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exposuretime\"\n    },\n    \"type\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Type\"\n    },\n    \"valueType\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Valuetype\"\n    },\n    \"temperature\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Temperature\"\n    }\n  },\n  \"title\": \"ToxicityInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>result</code>                 (<code>str | None</code>)             </li> <li> <code>roe</code>                 (<code>str | None</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> <li> <code>method</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>species</code>                 (<code>str | None</code>)             </li> <li> <code>sex</code>                 (<code>str | None</code>)             </li> <li> <code>exposure_time</code>                 (<code>str | None</code>)             </li> <li> <code>type</code>                 (<code>str | None</code>)             </li> <li> <code>value_type</code>                 (<code>str | None</code>)             </li> <li> <code>temperature</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.result","title":"result","text":"<pre><code>result: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.roe","title":"roe","text":"<pre><code>roe: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.unit","title":"unit","text":"<pre><code>unit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.method","title":"method","text":"<pre><code>method: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.species","title":"species","text":"<pre><code>species: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.sex","title":"sex","text":"<pre><code>sex: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.exposure_time","title":"exposure_time","text":"<pre><code>exposure_time: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.type","title":"type","text":"<pre><code>type: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.value_type","title":"value_type","text":"<pre><code>value_type: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ToxicityInfo.temperature","title":"temperature","text":"<pre><code>temperature: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BioAccumulativeInfo","title":"BioAccumulativeInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>BioAccumulativeInfo is a Pydantic model representing bioaccumulative information.</p> <p>Attributes:</p> Name Type Description <code>bcf_value</code> <code>str | None</code> <p>The bioaccumulative factor value.</p> <code>temperature</code> <code>str | None</code> <p>The temperature of the bioaccumulative test.</p> <code>exposure_time</code> <code>str | None</code> <p>The exposure time of the bioaccumulative test.</p> <code>method</code> <code>str | None</code> <p>The method of the bioaccumulative test.</p> <code>species</code> <code>str | None</code> <p>The species of the bioaccumulative test.</p> Show JSON schema: <pre><code>{\n  \"description\": \"BioAccumulativeInfo is a Pydantic model representing bioaccumulative information.\\n\\nAttributes\\n----------\\nbcf_value : str | None\\n    The bioaccumulative factor value.\\ntemperature : str | None\\n    The temperature of the bioaccumulative test.\\nexposure_time : str | None\\n    The exposure time of the bioaccumulative test.\\nmethod : str | None\\n    The method of the bioaccumulative test.\\nspecies : str | None\\n    The species of the bioaccumulative test.\",\n  \"properties\": {\n    \"bcfValue\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Bcfvalue\"\n    },\n    \"temperature\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Temperature\"\n    },\n    \"exposureTime\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exposuretime\"\n    },\n    \"method\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Method\"\n    },\n    \"species\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Species\"\n    }\n  },\n  \"title\": \"BioAccumulativeInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>bcf_value</code>                 (<code>str | None</code>)             </li> <li> <code>temperature</code>                 (<code>str | None</code>)             </li> <li> <code>exposure_time</code>                 (<code>str | None</code>)             </li> <li> <code>method</code>                 (<code>str | None</code>)             </li> <li> <code>species</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.BioAccumulativeInfo.bcf_value","title":"bcf_value","text":"<pre><code>bcf_value: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BioAccumulativeInfo.temperature","title":"temperature","text":"<pre><code>temperature: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BioAccumulativeInfo.exposure_time","title":"exposure_time","text":"<pre><code>exposure_time: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BioAccumulativeInfo.method","title":"method","text":"<pre><code>method: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BioAccumulativeInfo.species","title":"species","text":"<pre><code>species: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointValue","title":"BoilingPointValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>BoilingPointValue is a Pydantic model representing a boiling point value.</p> <p>Attributes:</p> Name Type Description <code>min_value</code> <code>str | None</code> <p>The minimum boiling point value.</p> <code>max_value</code> <code>str | None</code> <p>The maximum boiling point value.</p> <code>unit</code> <code>str | None</code> <p>The unit of the boiling point value.</p> Show JSON schema: <pre><code>{\n  \"description\": \"BoilingPointValue is a Pydantic model representing a boiling point value.\\n\\nAttributes\\n----------\\nmin_value : str | None\\n    The minimum boiling point value.\\nmax_value : str | None\\n    The maximum boiling point value.\\nunit : str | None\\n    The unit of the boiling point value.\",\n  \"properties\": {\n    \"minValue\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Minvalue\"\n    },\n    \"maxValue\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Maxvalue\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    }\n  },\n  \"title\": \"BoilingPointValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>min_value</code>                 (<code>str | None</code>)             </li> <li> <code>max_value</code>                 (<code>str | None</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointValue.min_value","title":"min_value","text":"<pre><code>min_value: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointValue.max_value","title":"max_value","text":"<pre><code>max_value: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointValue.unit","title":"unit","text":"<pre><code>unit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointSource","title":"BoilingPointSource","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>BoilingPointSource is a Pydantic model representing a boiling point source.</p> <p>Attributes:</p> Name Type Description <code>note_code</code> <code>str | None</code> <p>The note code of the boiling point source.</p> <code>note</code> <code>str | None</code> <p>The note of the boiling point source.</p> <code>note_field</code> <code>str | None</code> <p>The note field of the boiling point source.</p> Show JSON schema: <pre><code>{\n  \"description\": \"BoilingPointSource is a Pydantic model representing a boiling point source.\\n\\nAttributes\\n----------\\nnote_code : str | None\\n    The note code of the boiling point source.\\nnote : str | None\\n    The note of the boiling point source.\\nnote_field : str | None\\n    The note field of the boiling point source.\",\n  \"properties\": {\n    \"noteCode\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Notecode\"\n    },\n    \"note\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Note\"\n    },\n    \"noteField\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Notefield\"\n    }\n  },\n  \"title\": \"BoilingPointSource\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>note_code</code>                 (<code>str | None</code>)             </li> <li> <code>note</code>                 (<code>str | None</code>)             </li> <li> <code>note_field</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointSource.note_code","title":"note_code","text":"<pre><code>note_code: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointSource.note","title":"note","text":"<pre><code>note: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointSource.note_field","title":"note_field","text":"<pre><code>note_field: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointInfo","title":"BoilingPointInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>BoilingPointInfo is a Pydantic model representing boiling point information.</p> <p>Attributes:</p> Name Type Description <code>source</code> <code>list[BoilingPointSource] | None</code> <p>The source of the boiling point information.</p> <code>values</code> <code>list[BoilingPointValue] | None</code> <p>The values of the boiling point information.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BoilingPointSource\": {\n      \"description\": \"BoilingPointSource is a Pydantic model representing a boiling point source.\\n\\nAttributes\\n----------\\nnote_code : str | None\\n    The note code of the boiling point source.\\nnote : str | None\\n    The note of the boiling point source.\\nnote_field : str | None\\n    The note field of the boiling point source.\",\n      \"properties\": {\n        \"noteCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Notecode\"\n        },\n        \"note\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Note\"\n        },\n        \"noteField\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Notefield\"\n        }\n      },\n      \"title\": \"BoilingPointSource\",\n      \"type\": \"object\"\n    },\n    \"BoilingPointValue\": {\n      \"description\": \"BoilingPointValue is a Pydantic model representing a boiling point value.\\n\\nAttributes\\n----------\\nmin_value : str | None\\n    The minimum boiling point value.\\nmax_value : str | None\\n    The maximum boiling point value.\\nunit : str | None\\n    The unit of the boiling point value.\",\n      \"properties\": {\n        \"minValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minvalue\"\n        },\n        \"maxValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Maxvalue\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"BoilingPointValue\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"BoilingPointInfo is a Pydantic model representing boiling point information.\\n\\nAttributes\\n----------\\nsource : list[BoilingPointSource] | None\\n    The source of the boiling point information.\\nvalues : list[BoilingPointValue] | None\\n    The values of the boiling point information.\",\n  \"properties\": {\n    \"source\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/BoilingPointSource\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Source\"\n    },\n    \"values\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/BoilingPointValue\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Values\"\n    }\n  },\n  \"title\": \"BoilingPointInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>source</code>                 (<code>list[BoilingPointSource] | None</code>)             </li> <li> <code>values</code>                 (<code>list[BoilingPointValue] | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointInfo.source","title":"source","text":"<pre><code>source: list[BoilingPointSource] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.BoilingPointInfo.values","title":"values","text":"<pre><code>values: list[BoilingPointValue] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DegradabilityInfo","title":"DegradabilityInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>DegradabilityInfo is a Pydantic model representing information about the degradability of a substance.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>str | None</code> <p>The result of the degradability test.</p> <code>unit</code> <code>str | None</code> <p>The unit of measurement for the degradability test.</p> <code>exposure_time</code> <code>str | None</code> <p>The exposure time of the degradability test.</p> <code>method</code> <code>str | None</code> <p>The method used for the degradability test.</p> <code>test_type</code> <code>str | None</code> <p>The type of the degradability test.</p> <code>degradability</code> <code>str | None</code> <p>The degradability classification.</p> <code>value</code> <code>str | None</code> <p>The value of the degradability test.</p> Show JSON schema: <pre><code>{\n  \"description\": \"DegradabilityInfo is a Pydantic model representing information about the degradability of a substance.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the degradability test.\\nunit : str | None\\n    The unit of measurement for the degradability test.\\nexposure_time : str | None\\n    The exposure time of the degradability test.\\nmethod : str | None\\n    The method used for the degradability test.\\ntest_type : str | None\\n    The type of the degradability test.\\ndegradability : str | None\\n    The degradability classification.\\nvalue : str | None\\n    The value of the degradability test.\",\n  \"properties\": {\n    \"result\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Result\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    },\n    \"exposureTime\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exposuretime\"\n    },\n    \"method\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Method\"\n    },\n    \"testType\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Testtype\"\n    },\n    \"degradability\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Degradability\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    }\n  },\n  \"title\": \"DegradabilityInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>result</code>                 (<code>str | None</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> <li> <code>exposure_time</code>                 (<code>str | None</code>)             </li> <li> <code>method</code>                 (<code>str | None</code>)             </li> <li> <code>test_type</code>                 (<code>str | None</code>)             </li> <li> <code>degradability</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.DegradabilityInfo.result","title":"result","text":"<pre><code>result: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DegradabilityInfo.unit","title":"unit","text":"<pre><code>unit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DegradabilityInfo.exposure_time","title":"exposure_time","text":"<pre><code>exposure_time: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DegradabilityInfo.method","title":"method","text":"<pre><code>method: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DegradabilityInfo.test_type","title":"test_type","text":"<pre><code>test_type: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DegradabilityInfo.degradability","title":"degradability","text":"<pre><code>degradability: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DegradabilityInfo.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DNELInfo","title":"DNELInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>DNELInfo is a Pydantic model representing the Derived No Effect Level (DNEL) information.</p> <p>Attributes:</p> Name Type Description <code>roe</code> <code>str | None</code> <p>The reference exposure level.</p> <code>health_effect</code> <code>str | None</code> <p>The health effect associated with the exposure.</p> <code>exposure_time</code> <code>str | None</code> <p>The exposure time for the DNEL.</p> <code>application_area</code> <code>str | None</code> <p>The area of application for the DNEL.</p> <code>value</code> <code>str | None</code> <p>The DNEL value.</p> <code>remarks</code> <code>str | None</code> <p>Any additional remarks regarding the DNEL.</p> Show JSON schema: <pre><code>{\n  \"description\": \"DNELInfo is a Pydantic model representing the Derived No Effect Level (DNEL) information.\\n\\nAttributes\\n----------\\nroe : str | None\\n    The reference exposure level.\\nhealth_effect : str | None\\n    The health effect associated with the exposure.\\nexposure_time : str | None\\n    The exposure time for the DNEL.\\napplication_area : str | None\\n    The area of application for the DNEL.\\nvalue : str | None\\n    The DNEL value.\\nremarks : str | None\\n    Any additional remarks regarding the DNEL.\",\n  \"properties\": {\n    \"roe\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Roe\"\n    },\n    \"healthEffect\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Healtheffect\"\n    },\n    \"exposureTime\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exposuretime\"\n    },\n    \"applicationArea\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Applicationarea\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"remarks\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Remarks\"\n    }\n  },\n  \"title\": \"DNELInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>roe</code>                 (<code>str | None</code>)             </li> <li> <code>health_effect</code>                 (<code>str | None</code>)             </li> <li> <code>exposure_time</code>                 (<code>str | None</code>)             </li> <li> <code>application_area</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> <li> <code>remarks</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.DNELInfo.roe","title":"roe","text":"<pre><code>roe: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DNELInfo.health_effect","title":"health_effect","text":"<pre><code>health_effect: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DNELInfo.exposure_time","title":"exposure_time","text":"<pre><code>exposure_time: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DNELInfo.application_area","title":"application_area","text":"<pre><code>application_area: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DNELInfo.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.DNELInfo.remarks","title":"remarks","text":"<pre><code>remarks: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration","title":"LethalDoseConcentration","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>LethalDoseConcentration is a Pydantic model representing lethal dose and concentration information.</p> <p>Attributes:</p> Name Type Description <code>duration</code> <code>str | None</code> <p>The duration of the exposure.</p> <code>unit</code> <code>str | None</code> <p>The unit of measurement for the lethal dose.</p> <code>type</code> <code>str | None</code> <p>The type of the lethal dose.</p> <code>species</code> <code>str | None</code> <p>The species tested.</p> <code>value</code> <code>float | None</code> <p>The lethal dose value.</p> <code>sex</code> <code>str | None</code> <p>The sex of the species tested.</p> <code>exposure_time</code> <code>str | None</code> <p>The exposure time for the lethal dose test.</p> <code>method</code> <code>str | None</code> <p>The method used for the lethal dose test.</p> <code>test_atmosphere</code> <code>str | None</code> <p>The atmosphere in which the test was conducted.</p> Show JSON schema: <pre><code>{\n  \"description\": \"LethalDoseConcentration is a Pydantic model representing lethal dose and concentration information.\\n\\nAttributes\\n----------\\nduration : str | None\\n    The duration of the exposure.\\nunit : str | None\\n    The unit of measurement for the lethal dose.\\ntype : str | None\\n    The type of the lethal dose.\\nspecies : str | None\\n    The species tested.\\nvalue : float | None\\n    The lethal dose value.\\nsex : str | None\\n    The sex of the species tested.\\nexposure_time : str | None\\n    The exposure time for the lethal dose test.\\nmethod : str | None\\n    The method used for the lethal dose test.\\ntest_atmosphere : str | None\\n    The atmosphere in which the test was conducted.\",\n  \"properties\": {\n    \"duration\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Duration\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    },\n    \"type\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Type\"\n    },\n    \"species\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Species\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"sex\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sex\"\n    },\n    \"exposureTime\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exposuretime\"\n    },\n    \"method\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Method\"\n    },\n    \"testAtmosphere\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Testatmosphere\"\n    }\n  },\n  \"title\": \"LethalDoseConcentration\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>duration</code>                 (<code>str | None</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> <li> <code>type</code>                 (<code>str | None</code>)             </li> <li> <code>species</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>sex</code>                 (<code>str | None</code>)             </li> <li> <code>exposure_time</code>                 (<code>str | None</code>)             </li> <li> <code>method</code>                 (<code>str | None</code>)             </li> <li> <code>test_atmosphere</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration.duration","title":"duration","text":"<pre><code>duration: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration.unit","title":"unit","text":"<pre><code>unit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration.type","title":"type","text":"<pre><code>type: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration.species","title":"species","text":"<pre><code>species: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration.sex","title":"sex","text":"<pre><code>sex: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration.exposure_time","title":"exposure_time","text":"<pre><code>exposure_time: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration.method","title":"method","text":"<pre><code>method: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.LethalDoseConcentration.test_atmosphere","title":"test_atmosphere","text":"<pre><code>test_atmosphere: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ExposureControl","title":"ExposureControl","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>ExposureControl is a Pydantic model representing exposure control measures.</p> <p>Attributes:</p> Name Type Description <code>type</code> <code>str | None</code> <p>The type of exposure control.</p> <code>value</code> <code>float | None</code> <p>The value associated with the exposure control.</p> <code>unit</code> <code>str | None</code> <p>The unit of measurement for the exposure control.</p> Show JSON schema: <pre><code>{\n  \"description\": \"ExposureControl is a Pydantic model representing exposure control measures.\\n\\nAttributes\\n----------\\ntype : str | None\\n    The type of exposure control.\\nvalue : float | None\\n    The value associated with the exposure control.\\nunit : str | None\\n    The unit of measurement for the exposure control.\",\n  \"properties\": {\n    \"type\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Type\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    }\n  },\n  \"title\": \"ExposureControl\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.ExposureControl.type","title":"type","text":"<pre><code>type: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ExposureControl.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.ExposureControl.unit","title":"unit","text":"<pre><code>unit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.Hazard","title":"Hazard","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Hazard is a Pydantic model representing hazard information.</p> <p>Attributes:</p> Name Type Description <code>h_code</code> <code>str | None</code> <p>The hazard code.</p> <code>category</code> <code>str | None</code> <p>The category of the hazard.</p> <code>class_</code> <code>str | None</code> <p>The class of the hazard.</p> <code>sub_category</code> <code>str | None</code> <p>The sub-category of the hazard.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Hazard is a Pydantic model representing hazard information.\\n\\nAttributes\\n----------\\nh_code : str | None\\n    The hazard code.\\ncategory : str | None\\n    The category of the hazard.\\nclass_ : str | None\\n    The class of the hazard.\\nsub_category : str | None\\n    The sub-category of the hazard.\",\n  \"properties\": {\n    \"hCode\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Hcode\"\n    },\n    \"category\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Category\"\n    },\n    \"class\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Class\"\n    },\n    \"subCategory\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Subcategory\"\n    }\n  },\n  \"title\": \"Hazard\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>h_code</code>                 (<code>str | None</code>)             </li> <li> <code>category</code>                 (<code>int | str | None</code>)             </li> <li> <code>class_</code>                 (<code>str | None</code>)             </li> <li> <code>sub_category</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.Hazard.h_code","title":"h_code","text":"<pre><code>h_code: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.Hazard.category","title":"category","text":"<pre><code>category: int | str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.Hazard.class_","title":"class_","text":"<pre><code>class_: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.Hazard.sub_category","title":"sub_category","text":"<pre><code>sub_category: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceName","title":"SubstanceName","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>SubstanceName is a Pydantic model representing the name of a substance.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str | None</code> <p>The name of the substance.</p> <code>language_code</code> <code>str | None</code> <p>The language code for the substance name.</p> <code>cloaked_name</code> <code>str | None</code> <p>The cloaked name of the substance, if applicable.</p> Show JSON schema: <pre><code>{\n  \"description\": \"SubstanceName is a Pydantic model representing the name of a substance.\\n\\nAttributes\\n----------\\nname : str | None\\n    The name of the substance.\\nlanguage_code : str | None\\n    The language code for the substance name.\\ncloaked_name : str | None\\n    The cloaked name of the substance, if applicable.\",\n  \"properties\": {\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"language_code\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Language Code\"\n    },\n    \"cloakedName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cloakedname\"\n    }\n  },\n  \"title\": \"SubstanceName\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>language_code</code>                 (<code>str | None</code>)             </li> <li> <code>cloaked_name</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.SubstanceName.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceName.language_code","title":"language_code","text":"<pre><code>language_code: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceName.cloaked_name","title":"cloaked_name","text":"<pre><code>cloaked_name: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SpecificConcentration","title":"SpecificConcentration","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>SpecificConcentration is a Pydantic model representing specific concentration information.</p> <p>Attributes:</p> Name Type Description <code>specific_conc</code> <code>str | None</code> <p>The specific concentration value.</p> <code>sub_category</code> <code>str | None</code> <p>The sub-category of the specific concentration.</p> <code>category</code> <code>int | None</code> <p>The category of the specific concentration.</p> <code>h_code</code> <code>str | None</code> <p>The hazard code associated with the specific concentration.</p> <code>class_</code> <code>str | None</code> <p>The class of the specific concentration.</p> Show JSON schema: <pre><code>{\n  \"description\": \"SpecificConcentration is a Pydantic model representing specific concentration information.\\n\\nAttributes\\n----------\\nspecific_conc : str | None\\n    The specific concentration value.\\nsub_category : str | None\\n    The sub-category of the specific concentration.\\ncategory : int | None\\n    The category of the specific concentration.\\nh_code : str | None\\n    The hazard code associated with the specific concentration.\\nclass_ : str | None\\n    The class of the specific concentration.\",\n  \"properties\": {\n    \"specific_conc\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Specific Conc\"\n    },\n    \"subCategory\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Subcategory\"\n    },\n    \"category\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Category\"\n    },\n    \"hCode\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Hcode\"\n    },\n    \"class\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Class\"\n    }\n  },\n  \"title\": \"SpecificConcentration\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>specific_conc</code>                 (<code>str | None</code>)             </li> <li> <code>sub_category</code>                 (<code>str | None</code>)             </li> <li> <code>category</code>                 (<code>int | None</code>)             </li> <li> <code>h_code</code>                 (<code>str | None</code>)             </li> <li> <code>class_</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.SpecificConcentration.specific_conc","title":"specific_conc","text":"<pre><code>specific_conc: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SpecificConcentration.sub_category","title":"sub_category","text":"<pre><code>sub_category: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SpecificConcentration.category","title":"category","text":"<pre><code>category: int | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SpecificConcentration.h_code","title":"h_code","text":"<pre><code>h_code: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SpecificConcentration.class_","title":"class_","text":"<pre><code>class_: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.MolecularWeightValue","title":"MolecularWeightValue","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>MolecularWeightValue is a Pydantic model representing a molecular weight value.</p> <p>Attributes:</p> Name Type Description <code>min_value</code> <code>str | None</code> <p>The minimum molecular weight value.</p> <code>max_value</code> <code>str | None</code> <p>The maximum molecular weight value.</p> <code>unit</code> <code>str | None</code> <p>The unit of measurement for the molecular weight.</p> Show JSON schema: <pre><code>{\n  \"description\": \"MolecularWeightValue is a Pydantic model representing a molecular weight value.\\n\\nAttributes\\n----------\\nmin_value : str | None\\n    The minimum molecular weight value.\\nmax_value : str | None\\n    The maximum molecular weight value.\\nunit : str | None\\n    The unit of measurement for the molecular weight.\",\n  \"properties\": {\n    \"minValue\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Minvalue\"\n    },\n    \"maxValue\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Maxvalue\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    }\n  },\n  \"title\": \"MolecularWeightValue\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>min_value</code>                 (<code>str | None</code>)             </li> <li> <code>max_value</code>                 (<code>str | None</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.MolecularWeightValue.min_value","title":"min_value","text":"<pre><code>min_value: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.MolecularWeightValue.max_value","title":"max_value","text":"<pre><code>max_value: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.MolecularWeightValue.unit","title":"unit","text":"<pre><code>unit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.MolecularWeight","title":"MolecularWeight","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>MolecularWeight is a Pydantic model representing molecular weight information.</p> <p>Attributes:</p> Name Type Description <code>values</code> <code>list[MolecularWeightValue] | None</code> <p>The list of molecular weight values.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"MolecularWeightValue\": {\n      \"description\": \"MolecularWeightValue is a Pydantic model representing a molecular weight value.\\n\\nAttributes\\n----------\\nmin_value : str | None\\n    The minimum molecular weight value.\\nmax_value : str | None\\n    The maximum molecular weight value.\\nunit : str | None\\n    The unit of measurement for the molecular weight.\",\n      \"properties\": {\n        \"minValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minvalue\"\n        },\n        \"maxValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Maxvalue\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"MolecularWeightValue\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"MolecularWeight is a Pydantic model representing molecular weight information.\\n\\nAttributes\\n----------\\nvalues : list[MolecularWeightValue] | None\\n    The list of molecular weight values.\",\n  \"properties\": {\n    \"values\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/MolecularWeightValue\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Values\"\n    }\n  },\n  \"title\": \"MolecularWeight\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>values</code>                 (<code>list[MolecularWeightValue] | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.MolecularWeight.values","title":"values","text":"<pre><code>values: list[MolecularWeightValue] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.RSLSanitizer","title":"RSLSanitizer","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>RSLSanitizer is a Pydantic model representing sanitizer information.</p> <p>Attributes:</p> Name Type Description <code>value</code> <code>float | None</code> <p>The value of the sanitizer.</p> <code>unit</code> <code>str | None</code> <p>The unit of measurement for the sanitizer.</p> Show JSON schema: <pre><code>{\n  \"description\": \"RSLSanitizer is a Pydantic model representing sanitizer information.\\n\\nAttributes\\n----------\\nvalue : float | None\\n    The value of the sanitizer.\\nunit : str | None\\n    The unit of measurement for the sanitizer.\",\n  \"properties\": {\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    }\n  },\n  \"title\": \"RSLSanitizer\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.RSLSanitizer.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.RSLSanitizer.unit","title":"unit","text":"<pre><code>unit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.RSL","title":"RSL","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>RSL is a Pydantic model representing the regulatory substance list (RSL) information.</p> <p>Attributes:</p> Name Type Description <code>sanitizer</code> <code>RSLSanitizer | None</code> <p>The sanitizer information associated with the RSL.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"RSLSanitizer\": {\n      \"description\": \"RSLSanitizer is a Pydantic model representing sanitizer information.\\n\\nAttributes\\n----------\\nvalue : float | None\\n    The value of the sanitizer.\\nunit : str | None\\n    The unit of measurement for the sanitizer.\",\n      \"properties\": {\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"RSLSanitizer\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"RSL is a Pydantic model representing the regulatory substance list (RSL) information.\\n\\nAttributes\\n----------\\nsanitizer : RSLSanitizer | None\\n    The sanitizer information associated with the RSL.\",\n  \"properties\": {\n    \"sanitizer\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/RSLSanitizer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    }\n  },\n  \"title\": \"RSL\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>sanitizer</code>                 (<code>RSLSanitizer | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.RSL.sanitizer","title":"sanitizer","text":"<pre><code>sanitizer: RSLSanitizer | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SkinCorrosionInfo","title":"SkinCorrosionInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>SkinCorrosionInfo is a Pydantic model representing skin corrosion information.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>str | None</code> <p>The result of the skin corrosion test.</p> <code>roe</code> <code>str | None</code> <p>The reference exposure level.</p> <code>unit</code> <code>str | None</code> <p>The unit of measurement for the skin corrosion test.</p> <code>method</code> <code>str | None</code> <p>The method used for the skin corrosion test.</p> <code>value</code> <code>float | None</code> <p>The value of the skin corrosion test.</p> <code>species</code> <code>str | None</code> <p>The species tested for skin corrosion.</p> Show JSON schema: <pre><code>{\n  \"description\": \"SkinCorrosionInfo is a Pydantic model representing skin corrosion information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the skin corrosion test.\\nroe : str | None\\n    The reference exposure level.\\nunit : str | None\\n    The unit of measurement for the skin corrosion test.\\nmethod : str | None\\n    The method used for the skin corrosion test.\\nvalue : float | None\\n    The value of the skin corrosion test.\\nspecies : str | None\\n    The species tested for skin corrosion.\",\n  \"properties\": {\n    \"result\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Result\"\n    },\n    \"roe\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Roe\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    },\n    \"method\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Method\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"species\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Species\"\n    }\n  },\n  \"title\": \"SkinCorrosionInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>result</code>                 (<code>str | None</code>)             </li> <li> <code>roe</code>                 (<code>str | None</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> <li> <code>method</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>species</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.SkinCorrosionInfo.result","title":"result","text":"<pre><code>result: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SkinCorrosionInfo.roe","title":"roe","text":"<pre><code>roe: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SkinCorrosionInfo.unit","title":"unit","text":"<pre><code>unit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SkinCorrosionInfo.method","title":"method","text":"<pre><code>method: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SkinCorrosionInfo.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SkinCorrosionInfo.species","title":"species","text":"<pre><code>species: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SeriousEyeDamageInfo","title":"SeriousEyeDamageInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>SeriousEyeDamageInfo is a Pydantic model representing serious eye damage information.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>str | None</code> <p>The result of the serious eye damage test.</p> <code>roe</code> <code>str | None</code> <p>The reference exposure level.</p> <code>unit</code> <code>str | None</code> <p>The unit of measurement for the serious eye damage test.</p> <code>method</code> <code>str | None</code> <p>The method used for the serious eye damage test.</p> <code>value</code> <code>float | None</code> <p>The value of the serious eye damage test.</p> <code>species</code> <code>str | None</code> <p>The species tested for serious eye damage.</p> Show JSON schema: <pre><code>{\n  \"description\": \"SeriousEyeDamageInfo is a Pydantic model representing serious eye damage information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the serious eye damage test.\\nroe : str | None\\n    The reference exposure level.\\nunit : str | None\\n    The unit of measurement for the serious eye damage test.\\nmethod : str | None\\n    The method used for the serious eye damage test.\\nvalue : float | None\\n    The value of the serious eye damage test.\\nspecies : str | None\\n    The species tested for serious eye damage.\",\n  \"properties\": {\n    \"result\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Result\"\n    },\n    \"roe\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Roe\"\n    },\n    \"unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    },\n    \"method\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Method\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"species\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Species\"\n    }\n  },\n  \"title\": \"SeriousEyeDamageInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>result</code>                 (<code>str | None</code>)             </li> <li> <code>roe</code>                 (<code>str | None</code>)             </li> <li> <code>unit</code>                 (<code>str | None</code>)             </li> <li> <code>method</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>float | None</code>)             </li> <li> <code>species</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.SeriousEyeDamageInfo.result","title":"result","text":"<pre><code>result: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SeriousEyeDamageInfo.roe","title":"roe","text":"<pre><code>roe: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SeriousEyeDamageInfo.unit","title":"unit","text":"<pre><code>unit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SeriousEyeDamageInfo.method","title":"method","text":"<pre><code>method: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SeriousEyeDamageInfo.value","title":"value","text":"<pre><code>value: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SeriousEyeDamageInfo.species","title":"species","text":"<pre><code>species: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.RespiratorySkinSensInfo","title":"RespiratorySkinSensInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>RespiratorySkinSensInfo is a Pydantic model representing respiratory and skin sensitization information.</p> <p>Attributes:</p> Name Type Description <code>result</code> <code>str | None</code> <p>The result of the respiratory skin sensitization test.</p> <code>roe</code> <code>str | None</code> <p>The reference exposure level.</p> <code>method</code> <code>str | None</code> <p>The method used for the respiratory skin sensitization test.</p> <code>species</code> <code>str | None</code> <p>The species tested for respiratory skin sensitization.</p> Show JSON schema: <pre><code>{\n  \"description\": \"RespiratorySkinSensInfo is a Pydantic model representing respiratory and skin sensitization information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the respiratory skin sensitization test.\\nroe : str | None\\n    The reference exposure level.\\nmethod : str | None\\n    The method used for the respiratory skin sensitization test.\\nspecies : str | None\\n    The species tested for respiratory skin sensitization.\",\n  \"properties\": {\n    \"result\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Result\"\n    },\n    \"roe\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Roe\"\n    },\n    \"method\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Method\"\n    },\n    \"species\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Species\"\n    }\n  },\n  \"title\": \"RespiratorySkinSensInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>result</code>                 (<code>str | None</code>)             </li> <li> <code>roe</code>                 (<code>str | None</code>)             </li> <li> <code>method</code>                 (<code>str | None</code>)             </li> <li> <code>species</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.RespiratorySkinSensInfo.result","title":"result","text":"<pre><code>result: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.RespiratorySkinSensInfo.roe","title":"roe","text":"<pre><code>roe: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.RespiratorySkinSensInfo.method","title":"method","text":"<pre><code>method: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.RespiratorySkinSensInfo.species","title":"species","text":"<pre><code>species: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo","title":"SubstanceInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>SubstanceInfo is a Pydantic model representing information about a chemical substance.</p> <p>Attributes:</p> Name Type Description <code>acute_dermal_tox_info</code> <code>list[ToxicityInfo] | None</code> <p>Information about acute dermal toxicity.</p> <code>acute_inhalation_tox_info</code> <code>list[ToxicityInfo] | None</code> <p>Information about acute inhalation toxicity.</p> <code>acute_oral_tox_info</code> <code>list[ToxicityInfo] | None</code> <p>Information about acute oral toxicity.</p> <code>acute_tox_info</code> <code>list[ToxicityInfo] | None</code> <p>General acute toxicity information.</p> <code>bio_accumulative_info</code> <code>list[BioAccumulativeInfo] | None</code> <p>Information about bioaccumulation.</p> <code>boiling_point_info</code> <code>list[BoilingPointInfo] | None</code> <p>Information about boiling points.</p> <code>cas_id</code> <code>str</code> <p>The CAS ID of the substance.</p> <code>classification</code> <code>str | None</code> <p>The classification of the substance.</p> <code>classification_type</code> <code>str</code> <p>The type of classification.</p> <code>degradability_info</code> <code>list[DegradabilityInfo] | None</code> <p>Information about degradability.</p> <code>dnel_info</code> <code>list[DNELInfo] | None</code> <p>Information about the Derived No Effect Level (DNEL).</p> <code>ec_list_no</code> <code>str</code> <p>The EC list number.</p> <code>exposure_controls_acgih</code> <code>list[ExposureControl] | None</code> <p>ACGIH exposure controls.</p> <code>hazards</code> <code>list[Hazard] | None</code> <p>List of hazards associated with the substance.</p> <code>iarc_carcinogen</code> <code>str | None</code> <p>IARC carcinogen classification.</p> <code>ntp_carcinogen</code> <code>str | None</code> <p>NTP carcinogen classification.</p> <code>osha_carcinogen</code> <code>bool | None</code> <p>OSHA carcinogen classification.</p> <code>health_effects</code> <code>str | None</code> <p>Information about health effects.</p> <code>name</code> <code>list[SubstanceName] | None</code> <p>Names of the substance.</p> <code>page_number</code> <code>int | None</code> <p>Page number for reference.</p> <code>aicis_notified</code> <code>bool | None</code> <p>Indicates if AICIS has been notified.</p> <code>approved_legal_entities</code> <code>Any | None</code> <p>Approved legal entities for the substance.</p> <code>aspiration_tox_info</code> <code>list[Any] | None</code> <p>Information about aspiration toxicity.</p> <code>basel_conv_list</code> <code>bool | None</code> <p>Indicates if the substance is on the Basel Convention list.</p> <code>bei_info</code> <code>list[Any] | None</code> <p>Information related to BEI.</p> <code>caa_cfr40</code> <code>bool | None</code> <p>Indicates compliance with CAA CFR 40.</p> <code>caa_hpa</code> <code>bool | None</code> <p>Indicates compliance with CAA HPA.</p> <code>canada_inventory_status</code> <code>str | None</code> <p>Status in the Canadian inventory.</p> <code>carcinogen_info</code> <code>list[Any] | None</code> <p>Information about carcinogenicity.</p> <code>chemical_category</code> <code>list[str] | None</code> <p>Categories of the chemical.</p> <code>dermal_acute_toxicity</code> <code>float | None</code> <p>Acute dermal toxicity value.</p> <code>inhalation_acute_toxicity</code> <code>float | None</code> <p>Acute inhalation toxicity value.</p> <code>oral_acute_toxicity</code> <code>float | None</code> <p>Acute oral toxicity value.</p> <code>lethal_dose_and_concentrations</code> <code>list[LethalDoseConcentration] | None</code> <p>Information about lethal doses and concentrations.</p> <code>m_factor</code> <code>int | None</code> <p>M factor for acute toxicity.</p> <code>m_factor_chronic</code> <code>int | None</code> <p>M factor for chronic toxicity.</p> <code>molecular_weight</code> <code>list[MolecularWeight] | None</code> <p>Molecular weight information.</p> <code>rsl</code> <code>RSL | None</code> <p>Risk-based screening level.</p> <code>specific_conc_eu</code> <code>list[SpecificConcentration] | None</code> <p>Specific concentration information for the EU.</p> <code>specific_conc_source</code> <code>str | None</code> <p>Source of specific concentration information.</p> <code>sustainability_status_lbc</code> <code>str | None</code> <p>Sustainability status under LBC.</p> <code>tsca_8b</code> <code>bool | None</code> <p>Indicates compliance with TSCA 8(b).</p> <code>cdsa_list</code> <code>bool | None</code> <p>Indicates if the substance is on the CDSA list.</p> <code>cn_csdc_regulations</code> <code>bool | None</code> <p>Compliance with CN CSDC regulations.</p> <code>cn_pcod_list</code> <code>bool | None</code> <p>Indicates if the substance is on the CN PCOD list.</p> <code>cn_priority_list</code> <code>bool | None</code> <p>Indicates if the substance is on the CN priority list.</p> <code>ec_notified</code> <code>str | None</code> <p>Notification status in the EC.</p> <code>eu_annex_14_substances_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU Annex 14 list.</p> <code>eu_annex_17_restrictions_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU Annex 17 restrictions list.</p> <code>eu_annex_17_substances_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU Annex 17 substances list.</p> <code>eu_candidate_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU candidate list.</p> <code>eu_dang_chem_annex_1_part_1_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU dangerous chemicals Annex 1 Part 1 list.</p> <code>eu_dang_chem_annex_1_part_2_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU dangerous chemicals Annex 1 Part 2 list.</p> <code>eu_dang_chem_annex_1_part_3_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU dangerous chemicals Annex 1 Part 3 list.</p> <code>eu_dang_chem_annex_5_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU dangerous chemicals Annex 5 list.</p> <code>eu_directive_ec_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU directive EC list.</p> <code>eu_explosive_precursors_annex_1_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU explosive precursors Annex 1 list.</p> <code>eu_explosive_precursors_annex_2_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU explosive precursors Annex 2 list.</p> <code>eu_ozone_depletion_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU ozone depletion list.</p> <code>eu_pollutant_annex_2_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU pollutant Annex 2 list.</p> <code>eu_pop_list</code> <code>bool | None</code> <p>Indicates if the substance is on the EU POP list.</p> <code>export_control_list_phrases</code> <code>bool | None</code> <p>Indicates if the substance is on the export control list.</p> <code>green_gas_list</code> <code>bool | None</code> <p>Indicates if the substance is on the green gas list.</p> <code>iecsc_notified</code> <code>bool | None</code> <p>Indicates if the substance is IECSc notified.</p> <code>index_no</code> <code>str | None</code> <p>Index number for the substance.</p> <code>jpencs_notified</code> <code>bool | None</code> <p>Indicates if the substance is JPENCS notified.</p> <code>jpishl_notified</code> <code>bool | None</code> <p>Indicates if the substance is JPISHL notified.</p> <code>koecl_notified</code> <code>bool | None</code> <p>Indicates if the substance is KOECL notified.</p> <code>kyoto_protocol</code> <code>bool | None</code> <p>Indicates compliance with the Kyoto Protocol.</p> <code>massachusetts_rtk</code> <code>bool | None</code> <p>Indicates if the substance is on the Massachusetts RTK list.</p> <code>montreal_protocol</code> <code>bool | None</code> <p>Indicates compliance with the Montreal Protocol.</p> <code>new_jersey_rtk</code> <code>bool | None</code> <p>Indicates if the substance is on the New Jersey RTK list.</p> <code>new_york_rtk</code> <code>bool | None</code> <p>Indicates if the substance is on the New York RTK list.</p> <code>nzioc_notified</code> <code>bool | None</code> <p>Indicates if the substance is NZIOC notified.</p> <code>pcr_regulated</code> <code>bool | None</code> <p>Indicates if the substance is PCR regulated.</p> <code>pennsylvania_rtk</code> <code>bool | None</code> <p>Indicates if the substance is on the Pennsylvania RTK list.</p> <code>peroxide_function_groups</code> <code>int | None</code> <p>Number of peroxide function groups.</p> <code>piccs_notified</code> <code>bool | None</code> <p>Indicates if the substance is PICCS notified.</p> <code>rhode_island_rtk</code> <code>bool | None</code> <p>Indicates if the substance is on the Rhode Island RTK list.</p> <code>rotterdam_conv_list</code> <code>bool | None</code> <p>Indicates if the substance is on the Rotterdam Convention list.</p> <code>sdwa</code> <code>bool | None</code> <p>Indicates compliance with the SDWA.</p> <code>source</code> <code>str | None</code> <p>Source of the substance information.</p> <code>specific_concentration_limit</code> <code>str | None</code> <p>Specific concentration limit for the substance.</p> <code>stockholm_conv_list</code> <code>bool | None</code> <p>Indicates if the substance is on the Stockholm Convention list.</p> <code>stot_affected_organs</code> <code>str | None</code> <p>Organs affected by STOT.</p> <code>stot_route_of_exposure</code> <code>str | None</code> <p>Route of exposure for STOT.</p> <code>tcsi_notified</code> <code>bool | None</code> <p>Indicates if the substance is TCSI notified.</p> <code>trade_secret</code> <code>str | None</code> <p>Information about trade secrets.</p> <code>tw_ghs_clas_list</code> <code>bool | None</code> <p>Indicates if the substance is on the TW GHS classification list.</p> <code>tw_handle_priority_chem</code> <code>bool | None</code> <p>Indicates if the substance is a priority chemical.</p> <code>tw_handle_toxic_chem</code> <code>bool | None</code> <p>Indicates if the substance is a toxic chemical.</p> <code>tw_ind_waste_standards</code> <code>bool | None</code> <p>Indicates compliance with TW industrial waste standards.</p> <code>vinic_notified</code> <code>bool | None</code> <p>Indicates if the substance is VINIC notified.</p> <code>exposure_controls_osha</code> <code>list[ExposureControl] | None</code> <p>OSHA exposure controls.</p> <code>exposure_controls_aiha</code> <code>list[ExposureControl] | None</code> <p>AIHA exposure controls.</p> <code>exposure_controls_niosh</code> <code>list[ExposureControl] | None</code> <p>NIOSH exposure controls.</p> <code>snur</code> <code>bool | dict | None</code> <p>Significant new use rule information.</p> <code>tsca_12b_concentration_limit</code> <code>float | None</code> <p>TSCA 12(b) concentration limit.</p> <code>cercla_rq</code> <code>float | None</code> <p>CERCLA reportable quantity.</p> <code>california_prop_65</code> <code>list[str] | None</code> <p>Information related to California Prop 65.</p> <code>sara_302</code> <code>bool | None</code> <p>Indicates compliance with SARA 302.</p> <code>sara_313_concentration_limit</code> <code>float | None</code> <p>SARA 313 concentration limit.</p> <code>cfr_marine_pollutant</code> <code>dict | None</code> <p>Information about marine pollutants under CFR.</p> <code>cfr_reportable_quantity</code> <code>dict | None</code> <p>Information about reportable quantities under CFR.</p> <code>rohs_concentration</code> <code>float | None</code> <p>ROHS concentration limit.</p> <code>skin_corrosion_info</code> <code>list[SkinCorrosionInfo] | None</code> <p>Information about skin corrosion.</p> <code>serious_eye_damage_info</code> <code>list[SeriousEyeDamageInfo] | None</code> <p>Information about serious eye damage.</p> <code>respiratory_skin_sens_info</code> <code>list[RespiratorySkinSensInfo] | None</code> <p>Information about respiratory skin sensitization.</p> <code>is_known</code> <code>bool</code> <p>Indicates if the substance is known (i.e. has known regulatory or hazard information in the database) (note this is an alias for the isCas field which behaves in a non intuitive way in the API so we have opted to use is_known for usability instead)</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BioAccumulativeInfo\": {\n      \"description\": \"BioAccumulativeInfo is a Pydantic model representing bioaccumulative information.\\n\\nAttributes\\n----------\\nbcf_value : str | None\\n    The bioaccumulative factor value.\\ntemperature : str | None\\n    The temperature of the bioaccumulative test.\\nexposure_time : str | None\\n    The exposure time of the bioaccumulative test.\\nmethod : str | None\\n    The method of the bioaccumulative test.\\nspecies : str | None\\n    The species of the bioaccumulative test.\",\n      \"properties\": {\n        \"bcfValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Bcfvalue\"\n        },\n        \"temperature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Temperature\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        }\n      },\n      \"title\": \"BioAccumulativeInfo\",\n      \"type\": \"object\"\n    },\n    \"BoilingPointInfo\": {\n      \"description\": \"BoilingPointInfo is a Pydantic model representing boiling point information.\\n\\nAttributes\\n----------\\nsource : list[BoilingPointSource] | None\\n    The source of the boiling point information.\\nvalues : list[BoilingPointValue] | None\\n    The values of the boiling point information.\",\n      \"properties\": {\n        \"source\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/BoilingPointSource\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Source\"\n        },\n        \"values\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/BoilingPointValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Values\"\n        }\n      },\n      \"title\": \"BoilingPointInfo\",\n      \"type\": \"object\"\n    },\n    \"BoilingPointSource\": {\n      \"description\": \"BoilingPointSource is a Pydantic model representing a boiling point source.\\n\\nAttributes\\n----------\\nnote_code : str | None\\n    The note code of the boiling point source.\\nnote : str | None\\n    The note of the boiling point source.\\nnote_field : str | None\\n    The note field of the boiling point source.\",\n      \"properties\": {\n        \"noteCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Notecode\"\n        },\n        \"note\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Note\"\n        },\n        \"noteField\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Notefield\"\n        }\n      },\n      \"title\": \"BoilingPointSource\",\n      \"type\": \"object\"\n    },\n    \"BoilingPointValue\": {\n      \"description\": \"BoilingPointValue is a Pydantic model representing a boiling point value.\\n\\nAttributes\\n----------\\nmin_value : str | None\\n    The minimum boiling point value.\\nmax_value : str | None\\n    The maximum boiling point value.\\nunit : str | None\\n    The unit of the boiling point value.\",\n      \"properties\": {\n        \"minValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minvalue\"\n        },\n        \"maxValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Maxvalue\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"BoilingPointValue\",\n      \"type\": \"object\"\n    },\n    \"DNELInfo\": {\n      \"description\": \"DNELInfo is a Pydantic model representing the Derived No Effect Level (DNEL) information.\\n\\nAttributes\\n----------\\nroe : str | None\\n    The reference exposure level.\\nhealth_effect : str | None\\n    The health effect associated with the exposure.\\nexposure_time : str | None\\n    The exposure time for the DNEL.\\napplication_area : str | None\\n    The area of application for the DNEL.\\nvalue : str | None\\n    The DNEL value.\\nremarks : str | None\\n    Any additional remarks regarding the DNEL.\",\n      \"properties\": {\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"healthEffect\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Healtheffect\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"applicationArea\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Applicationarea\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"remarks\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Remarks\"\n        }\n      },\n      \"title\": \"DNELInfo\",\n      \"type\": \"object\"\n    },\n    \"DegradabilityInfo\": {\n      \"description\": \"DegradabilityInfo is a Pydantic model representing information about the degradability of a substance.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the degradability test.\\nunit : str | None\\n    The unit of measurement for the degradability test.\\nexposure_time : str | None\\n    The exposure time of the degradability test.\\nmethod : str | None\\n    The method used for the degradability test.\\ntest_type : str | None\\n    The type of the degradability test.\\ndegradability : str | None\\n    The degradability classification.\\nvalue : str | None\\n    The value of the degradability test.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"testType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Testtype\"\n        },\n        \"degradability\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Degradability\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"DegradabilityInfo\",\n      \"type\": \"object\"\n    },\n    \"ExposureControl\": {\n      \"description\": \"ExposureControl is a Pydantic model representing exposure control measures.\\n\\nAttributes\\n----------\\ntype : str | None\\n    The type of exposure control.\\nvalue : float | None\\n    The value associated with the exposure control.\\nunit : str | None\\n    The unit of measurement for the exposure control.\",\n      \"properties\": {\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Type\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"ExposureControl\",\n      \"type\": \"object\"\n    },\n    \"Hazard\": {\n      \"description\": \"Hazard is a Pydantic model representing hazard information.\\n\\nAttributes\\n----------\\nh_code : str | None\\n    The hazard code.\\ncategory : str | None\\n    The category of the hazard.\\nclass_ : str | None\\n    The class of the hazard.\\nsub_category : str | None\\n    The sub-category of the hazard.\",\n      \"properties\": {\n        \"hCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Hcode\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Category\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Class\"\n        },\n        \"subCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Subcategory\"\n        }\n      },\n      \"title\": \"Hazard\",\n      \"type\": \"object\"\n    },\n    \"LethalDoseConcentration\": {\n      \"description\": \"LethalDoseConcentration is a Pydantic model representing lethal dose and concentration information.\\n\\nAttributes\\n----------\\nduration : str | None\\n    The duration of the exposure.\\nunit : str | None\\n    The unit of measurement for the lethal dose.\\ntype : str | None\\n    The type of the lethal dose.\\nspecies : str | None\\n    The species tested.\\nvalue : float | None\\n    The lethal dose value.\\nsex : str | None\\n    The sex of the species tested.\\nexposure_time : str | None\\n    The exposure time for the lethal dose test.\\nmethod : str | None\\n    The method used for the lethal dose test.\\ntest_atmosphere : str | None\\n    The atmosphere in which the test was conducted.\",\n      \"properties\": {\n        \"duration\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Duration\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Type\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"sex\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sex\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"testAtmosphere\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Testatmosphere\"\n        }\n      },\n      \"title\": \"LethalDoseConcentration\",\n      \"type\": \"object\"\n    },\n    \"MolecularWeight\": {\n      \"description\": \"MolecularWeight is a Pydantic model representing molecular weight information.\\n\\nAttributes\\n----------\\nvalues : list[MolecularWeightValue] | None\\n    The list of molecular weight values.\",\n      \"properties\": {\n        \"values\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/MolecularWeightValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Values\"\n        }\n      },\n      \"title\": \"MolecularWeight\",\n      \"type\": \"object\"\n    },\n    \"MolecularWeightValue\": {\n      \"description\": \"MolecularWeightValue is a Pydantic model representing a molecular weight value.\\n\\nAttributes\\n----------\\nmin_value : str | None\\n    The minimum molecular weight value.\\nmax_value : str | None\\n    The maximum molecular weight value.\\nunit : str | None\\n    The unit of measurement for the molecular weight.\",\n      \"properties\": {\n        \"minValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minvalue\"\n        },\n        \"maxValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Maxvalue\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"MolecularWeightValue\",\n      \"type\": \"object\"\n    },\n    \"RSL\": {\n      \"description\": \"RSL is a Pydantic model representing the regulatory substance list (RSL) information.\\n\\nAttributes\\n----------\\nsanitizer : RSLSanitizer | None\\n    The sanitizer information associated with the RSL.\",\n      \"properties\": {\n        \"sanitizer\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/RSLSanitizer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"title\": \"RSL\",\n      \"type\": \"object\"\n    },\n    \"RSLSanitizer\": {\n      \"description\": \"RSLSanitizer is a Pydantic model representing sanitizer information.\\n\\nAttributes\\n----------\\nvalue : float | None\\n    The value of the sanitizer.\\nunit : str | None\\n    The unit of measurement for the sanitizer.\",\n      \"properties\": {\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"RSLSanitizer\",\n      \"type\": \"object\"\n    },\n    \"RespiratorySkinSensInfo\": {\n      \"description\": \"RespiratorySkinSensInfo is a Pydantic model representing respiratory and skin sensitization information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the respiratory skin sensitization test.\\nroe : str | None\\n    The reference exposure level.\\nmethod : str | None\\n    The method used for the respiratory skin sensitization test.\\nspecies : str | None\\n    The species tested for respiratory skin sensitization.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        }\n      },\n      \"title\": \"RespiratorySkinSensInfo\",\n      \"type\": \"object\"\n    },\n    \"SeriousEyeDamageInfo\": {\n      \"description\": \"SeriousEyeDamageInfo is a Pydantic model representing serious eye damage information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the serious eye damage test.\\nroe : str | None\\n    The reference exposure level.\\nunit : str | None\\n    The unit of measurement for the serious eye damage test.\\nmethod : str | None\\n    The method used for the serious eye damage test.\\nvalue : float | None\\n    The value of the serious eye damage test.\\nspecies : str | None\\n    The species tested for serious eye damage.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        }\n      },\n      \"title\": \"SeriousEyeDamageInfo\",\n      \"type\": \"object\"\n    },\n    \"SkinCorrosionInfo\": {\n      \"description\": \"SkinCorrosionInfo is a Pydantic model representing skin corrosion information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the skin corrosion test.\\nroe : str | None\\n    The reference exposure level.\\nunit : str | None\\n    The unit of measurement for the skin corrosion test.\\nmethod : str | None\\n    The method used for the skin corrosion test.\\nvalue : float | None\\n    The value of the skin corrosion test.\\nspecies : str | None\\n    The species tested for skin corrosion.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        }\n      },\n      \"title\": \"SkinCorrosionInfo\",\n      \"type\": \"object\"\n    },\n    \"SpecificConcentration\": {\n      \"description\": \"SpecificConcentration is a Pydantic model representing specific concentration information.\\n\\nAttributes\\n----------\\nspecific_conc : str | None\\n    The specific concentration value.\\nsub_category : str | None\\n    The sub-category of the specific concentration.\\ncategory : int | None\\n    The category of the specific concentration.\\nh_code : str | None\\n    The hazard code associated with the specific concentration.\\nclass_ : str | None\\n    The class of the specific concentration.\",\n      \"properties\": {\n        \"specific_conc\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Specific Conc\"\n        },\n        \"subCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Subcategory\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Category\"\n        },\n        \"hCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Hcode\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Class\"\n        }\n      },\n      \"title\": \"SpecificConcentration\",\n      \"type\": \"object\"\n    },\n    \"SubstanceName\": {\n      \"description\": \"SubstanceName is a Pydantic model representing the name of a substance.\\n\\nAttributes\\n----------\\nname : str | None\\n    The name of the substance.\\nlanguage_code : str | None\\n    The language code for the substance name.\\ncloaked_name : str | None\\n    The cloaked name of the substance, if applicable.\",\n      \"properties\": {\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"language_code\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Language Code\"\n        },\n        \"cloakedName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cloakedname\"\n        }\n      },\n      \"title\": \"SubstanceName\",\n      \"type\": \"object\"\n    },\n    \"ToxicityInfo\": {\n      \"description\": \"ToxicityInfo is a Pydantic model representing toxicity information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the toxicity test.\\nroe : str | None\\n    The reference exposure level.\\nunit : str | None\\n    The unit of the toxicity test.\\nmethod: str | None\\n    The method of the toxicity test.\\nvalue: float | None\\n    The value of the toxicity test.\\nspecies: str | None\\n    The species of the toxicity test.\\nsex: str | None\\n    The sex of the toxicity test.\\nexposure_time: str | None\\n    The exposure time of the toxicity test.\\ntype: str | None\\n    The type of the toxicity test.\\nvalue_type: str | None\\n    The value type of the toxicity test.\\ntemperature: str | None\\n    The temperature of the toxicity test.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        },\n        \"sex\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sex\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Type\"\n        },\n        \"valueType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuetype\"\n        },\n        \"temperature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Temperature\"\n        }\n      },\n      \"title\": \"ToxicityInfo\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"SubstanceInfo is a Pydantic model representing information about a chemical substance.\\n\\nAttributes\\n----------\\nacute_dermal_tox_info : list[ToxicityInfo] | None\\n    Information about acute dermal toxicity.\\nacute_inhalation_tox_info : list[ToxicityInfo] | None\\n    Information about acute inhalation toxicity.\\nacute_oral_tox_info : list[ToxicityInfo] | None\\n    Information about acute oral toxicity.\\nacute_tox_info : list[ToxicityInfo] | None\\n    General acute toxicity information.\\nbio_accumulative_info : list[BioAccumulativeInfo] | None\\n    Information about bioaccumulation.\\nboiling_point_info : list[BoilingPointInfo] | None\\n    Information about boiling points.\\ncas_id : str\\n    The CAS ID of the substance.\\nclassification : str | None\\n    The classification of the substance.\\nclassification_type : str\\n    The type of classification.\\ndegradability_info : list[DegradabilityInfo] | None\\n    Information about degradability.\\ndnel_info : list[DNELInfo] | None\\n    Information about the Derived No Effect Level (DNEL).\\nec_list_no : str\\n    The EC list number.\\nexposure_controls_acgih : list[ExposureControl] | None\\n    ACGIH exposure controls.\\nhazards : list[Hazard] | None\\n    List of hazards associated with the substance.\\niarc_carcinogen : str | None\\n    IARC carcinogen classification.\\nntp_carcinogen : str | None\\n    NTP carcinogen classification.\\nosha_carcinogen : bool | None\\n    OSHA carcinogen classification.\\nhealth_effects : str | None\\n    Information about health effects.\\nname : list[SubstanceName] | None\\n    Names of the substance.\\npage_number : int | None\\n    Page number for reference.\\naicis_notified : bool | None\\n    Indicates if AICIS has been notified.\\napproved_legal_entities : Any | None\\n    Approved legal entities for the substance.\\naspiration_tox_info : list[Any] | None\\n    Information about aspiration toxicity.\\nbasel_conv_list : bool | None\\n    Indicates if the substance is on the Basel Convention list.\\nbei_info : list[Any] | None\\n    Information related to BEI.\\ncaa_cfr40 : bool | None\\n    Indicates compliance with CAA CFR 40.\\ncaa_hpa : bool | None\\n    Indicates compliance with CAA HPA.\\ncanada_inventory_status : str | None\\n    Status in the Canadian inventory.\\ncarcinogen_info : list[Any] | None\\n    Information about carcinogenicity.\\nchemical_category : list[str] | None\\n    Categories of the chemical.\\ndermal_acute_toxicity : float | None\\n    Acute dermal toxicity value.\\ninhalation_acute_toxicity : float | None\\n    Acute inhalation toxicity value.\\noral_acute_toxicity : float | None\\n    Acute oral toxicity value.\\nlethal_dose_and_concentrations : list[LethalDoseConcentration] | None\\n    Information about lethal doses and concentrations.\\nm_factor : int | None\\n    M factor for acute toxicity.\\nm_factor_chronic : int | None\\n    M factor for chronic toxicity.\\nmolecular_weight : list[MolecularWeight] | None\\n    Molecular weight information.\\nrsl : RSL | None\\n    Risk-based screening level.\\nspecific_conc_eu : list[SpecificConcentration] | None\\n    Specific concentration information for the EU.\\nspecific_conc_source : str | None\\n    Source of specific concentration information.\\nsustainability_status_lbc : str | None\\n    Sustainability status under LBC.\\ntsca_8b : bool | None\\n    Indicates compliance with TSCA 8(b).\\ncdsa_list : bool | None\\n    Indicates if the substance is on the CDSA list.\\ncn_csdc_regulations : bool | None\\n    Compliance with CN CSDC regulations.\\ncn_pcod_list : bool | None\\n    Indicates if the substance is on the CN PCOD list.\\ncn_priority_list : bool | None\\n    Indicates if the substance is on the CN priority list.\\nec_notified : str | None\\n    Notification status in the EC.\\neu_annex_14_substances_list : bool | None\\n    Indicates if the substance is on the EU Annex 14 list.\\neu_annex_17_restrictions_list : bool | None\\n    Indicates if the substance is on the EU Annex 17 restrictions list.\\neu_annex_17_substances_list : bool | None\\n    Indicates if the substance is on the EU Annex 17 substances list.\\neu_candidate_list : bool | None\\n    Indicates if the substance is on the EU candidate list.\\neu_dang_chem_annex_1_part_1_list : bool | None\\n    Indicates if the substance is on the EU dangerous chemicals Annex 1 Part 1 list.\\neu_dang_chem_annex_1_part_2_list : bool | None\\n    Indicates if the substance is on the EU dangerous chemicals Annex 1 Part 2 list.\\neu_dang_chem_annex_1_part_3_list : bool | None\\n    Indicates if the substance is on the EU dangerous chemicals Annex 1 Part 3 list.\\neu_dang_chem_annex_5_list : bool | None\\n    Indicates if the substance is on the EU dangerous chemicals Annex 5 list.\\neu_directive_ec_list : bool | None\\n    Indicates if the substance is on the EU directive EC list.\\neu_explosive_precursors_annex_1_list : bool | None\\n    Indicates if the substance is on the EU explosive precursors Annex 1 list.\\neu_explosive_precursors_annex_2_list : bool | None\\n    Indicates if the substance is on the EU explosive precursors Annex 2 list.\\neu_ozone_depletion_list : bool | None\\n    Indicates if the substance is on the EU ozone depletion list.\\neu_pollutant_annex_2_list : bool | None\\n    Indicates if the substance is on the EU pollutant Annex 2 list.\\neu_pop_list : bool | None\\n    Indicates if the substance is on the EU POP list.\\nexport_control_list_phrases : bool | None\\n    Indicates if the substance is on the export control list.\\ngreen_gas_list : bool | None\\n    Indicates if the substance is on the green gas list.\\niecsc_notified : bool | None\\n    Indicates if the substance is IECSc notified.\\nindex_no : str | None\\n    Index number for the substance.\\njpencs_notified : bool | None\\n    Indicates if the substance is JPENCS notified.\\njpishl_notified : bool | None\\n    Indicates if the substance is JPISHL notified.\\nkoecl_notified : bool | None\\n    Indicates if the substance is KOECL notified.\\nkyoto_protocol : bool | None\\n    Indicates compliance with the Kyoto Protocol.\\nmassachusetts_rtk : bool | None\\n    Indicates if the substance is on the Massachusetts RTK list.\\nmontreal_protocol : bool | None\\n    Indicates compliance with the Montreal Protocol.\\nnew_jersey_rtk : bool | None\\n    Indicates if the substance is on the New Jersey RTK list.\\nnew_york_rtk : bool | None\\n    Indicates if the substance is on the New York RTK list.\\nnzioc_notified : bool | None\\n    Indicates if the substance is NZIOC notified.\\npcr_regulated : bool | None\\n    Indicates if the substance is PCR regulated.\\npennsylvania_rtk : bool | None\\n    Indicates if the substance is on the Pennsylvania RTK list.\\nperoxide_function_groups : int | None\\n    Number of peroxide function groups.\\npiccs_notified : bool | None\\n    Indicates if the substance is PICCS notified.\\nrhode_island_rtk : bool | None\\n    Indicates if the substance is on the Rhode Island RTK list.\\nrotterdam_conv_list : bool | None\\n    Indicates if the substance is on the Rotterdam Convention list.\\nsdwa : bool | None\\n    Indicates compliance with the SDWA.\\nsource : str | None\\n    Source of the substance information.\\nspecific_concentration_limit : str | None\\n    Specific concentration limit for the substance.\\nstockholm_conv_list : bool | None\\n    Indicates if the substance is on the Stockholm Convention list.\\nstot_affected_organs : str | None\\n    Organs affected by STOT.\\nstot_route_of_exposure : str | None\\n    Route of exposure for STOT.\\ntcsi_notified : bool | None\\n    Indicates if the substance is TCSI notified.\\ntrade_secret : str | None\\n    Information about trade secrets.\\ntw_ghs_clas_list : bool | None\\n    Indicates if the substance is on the TW GHS classification list.\\ntw_handle_priority_chem : bool | None\\n    Indicates if the substance is a priority chemical.\\ntw_handle_toxic_chem : bool | None\\n    Indicates if the substance is a toxic chemical.\\ntw_ind_waste_standards : bool | None\\n    Indicates compliance with TW industrial waste standards.\\nvinic_notified : bool | None\\n    Indicates if the substance is VINIC notified.\\nexposure_controls_osha : list[ExposureControl] | None\\n    OSHA exposure controls.\\nexposure_controls_aiha : list[ExposureControl] | None\\n    AIHA exposure controls.\\nexposure_controls_niosh : list[ExposureControl] | None\\n    NIOSH exposure controls.\\nsnur : bool | dict | None\\n    Significant new use rule information.\\ntsca_12b_concentration_limit : float | None\\n    TSCA 12(b) concentration limit.\\ncercla_rq : float | None\\n    CERCLA reportable quantity.\\ncalifornia_prop_65 : list[str] | None\\n    Information related to California Prop 65.\\nsara_302 : bool | None\\n    Indicates compliance with SARA 302.\\nsara_313_concentration_limit : float | None\\n    SARA 313 concentration limit.\\ncfr_marine_pollutant : dict | None\\n    Information about marine pollutants under CFR.\\ncfr_reportable_quantity : dict | None\\n    Information about reportable quantities under CFR.\\nrohs_concentration : float | None\\n    ROHS concentration limit.\\nskin_corrosion_info : list[SkinCorrosionInfo] | None\\n    Information about skin corrosion.\\nserious_eye_damage_info : list[SeriousEyeDamageInfo] | None\\n    Information about serious eye damage.\\nrespiratory_skin_sens_info : list[RespiratorySkinSensInfo] | None\\n    Information about respiratory skin sensitization.\\nis_known : bool\\n    Indicates if the substance is known (i.e. has known regulatory or hazard information in the database)\\n    (note this is an alias for the isCas field which behaves in a non intuitive way in the API so we have opted to use is_known for usability instead)\",\n  \"properties\": {\n    \"type\": {\n      \"const\": \"Substance\",\n      \"default\": \"Substance\",\n      \"title\": \"Type\",\n      \"type\": \"string\"\n    },\n    \"acuteDermalToxInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ToxicityInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Acutedermaltoxinfo\"\n    },\n    \"acuteInhalationToxInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ToxicityInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Acuteinhalationtoxinfo\"\n    },\n    \"acuteOralToxInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ToxicityInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Acuteoraltoxinfo\"\n    },\n    \"acuteToxInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ToxicityInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Acutetoxinfo\"\n    },\n    \"bioAccumulativeInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/BioAccumulativeInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Bioaccumulativeinfo\"\n    },\n    \"boilingpointInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/BoilingPointInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Boilingpointinfo\"\n    },\n    \"casID\": {\n      \"title\": \"Casid\",\n      \"type\": \"string\"\n    },\n    \"classification\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Classification\"\n    },\n    \"classificationType\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Classificationtype\"\n    },\n    \"degradabilityInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/DegradabilityInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Degradabilityinfo\"\n    },\n    \"dnelInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/DNELInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Dnelinfo\"\n    },\n    \"ecListNo\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Eclistno\"\n    },\n    \"exposureControlsACGIH\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ExposureControl\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exposurecontrolsacgih\"\n    },\n    \"hazards\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/Hazard\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Hazards\"\n    },\n    \"iarcCarcinogen\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Iarccarcinogen\"\n    },\n    \"ntpCarcinogen\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Ntpcarcinogen\"\n    },\n    \"oshaCarcinogen\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Oshacarcinogen\"\n    },\n    \"healthEffects\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Healtheffects\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/SubstanceName\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"pageNumber\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Pagenumber\"\n    },\n    \"aicisNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Aicisnotified\"\n    },\n    \"approvedLegalEntities\": {\n      \"anyOf\": [\n        {},\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Approvedlegalentities\"\n    },\n    \"aspirationToxInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {},\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Aspirationtoxinfo\"\n    },\n    \"baselConvList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Baselconvlist\"\n    },\n    \"beiInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {},\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Beiinfo\"\n    },\n    \"caaCFR40\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Caacfr40\"\n    },\n    \"caaHPA\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Caahpa\"\n    },\n    \"canadaInventoryStatus\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Canadainventorystatus\"\n    },\n    \"carcinogenInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {},\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Carcinogeninfo\"\n    },\n    \"chemicalCategory\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Chemicalcategory\"\n    },\n    \"dermalAcuteToxicity\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Dermalacutetoxicity\"\n    },\n    \"inhalationAcuteToxicity\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Inhalationacutetoxicity\"\n    },\n    \"oralAcuteToxicity\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Oralacutetoxicity\"\n    },\n    \"lethalDoseAndConcentrations\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/LethalDoseConcentration\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lethaldoseandconcentrations\"\n    },\n    \"mFactor\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Mfactor\"\n    },\n    \"mFactorChronic\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Mfactorchronic\"\n    },\n    \"molecularWeight\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/MolecularWeight\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Molecularweight\"\n    },\n    \"rsl\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/RSL\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"specificConcEU\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/SpecificConcentration\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Specificconceu\"\n    },\n    \"specificConcSource\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Specificconcsource\"\n    },\n    \"sustainabilityStatusLBC\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sustainabilitystatuslbc\"\n    },\n    \"tsca8B\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Tsca8B\"\n    },\n    \"cdsaList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cdsalist\"\n    },\n    \"cnCSDCRegulations\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cncsdcregulations\"\n    },\n    \"cnPCODList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cnpcodlist\"\n    },\n    \"cnPriorityList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cnprioritylist\"\n    },\n    \"ecNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Ecnotified\"\n    },\n    \"euAnnex14SubstancesList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Euannex14Substanceslist\"\n    },\n    \"euAnnex17RestrictionsList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Euannex17Restrictionslist\"\n    },\n    \"euAnnex17SubstancesList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Euannex17Substanceslist\"\n    },\n    \"euCandidateList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Eucandidatelist\"\n    },\n    \"euDangChemAnnex1Part1List\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Eudangchemannex1Part1List\"\n    },\n    \"euDangChemAnnex1Part2List\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Eudangchemannex1Part2List\"\n    },\n    \"euDangChemAnnex1Part3List\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Eudangchemannex1Part3List\"\n    },\n    \"euDangChemAnnex5List\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Eudangchemannex5List\"\n    },\n    \"euDirectiveEcList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Eudirectiveeclist\"\n    },\n    \"euExplosivePrecursorsAnnex1List\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Euexplosiveprecursorsannex1List\"\n    },\n    \"euExplosivePrecursorsAnnex2List\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Euexplosiveprecursorsannex2List\"\n    },\n    \"euOzoneDepletionList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Euozonedepletionlist\"\n    },\n    \"euPollutantAnnex2List\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Eupollutantannex2List\"\n    },\n    \"euPopList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Eupoplist\"\n    },\n    \"exportControlListPhrases\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exportcontrollistphrases\"\n    },\n    \"greenGasList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Greengaslist\"\n    },\n    \"iecscNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Iecscnotified\"\n    },\n    \"indexNo\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Indexno\"\n    },\n    \"jpencsNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Jpencsnotified\"\n    },\n    \"jpishlNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Jpishlnotified\"\n    },\n    \"koeclNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Koeclnotified\"\n    },\n    \"kyotoProtocol\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Kyotoprotocol\"\n    },\n    \"massachusettsRTK\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Massachusettsrtk\"\n    },\n    \"montrealProtocol\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Montrealprotocol\"\n    },\n    \"newJerseyRTK\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Newjerseyrtk\"\n    },\n    \"newYorkRTK\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Newyorkrtk\"\n    },\n    \"nziocNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Nziocnotified\"\n    },\n    \"pcrRegulated\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Pcrregulated\"\n    },\n    \"pennsylvaniaRTK\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Pennsylvaniartk\"\n    },\n    \"peroxideFunctionGroups\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Peroxidefunctiongroups\"\n    },\n    \"piccsNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Piccsnotified\"\n    },\n    \"rhodeIslandRTK\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rhodeislandrtk\"\n    },\n    \"rotterdamConvList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rotterdamconvlist\"\n    },\n    \"sdwa\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sdwa\"\n    },\n    \"source\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Source\"\n    },\n    \"specificConcentrationLimit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Specificconcentrationlimit\"\n    },\n    \"stockholmConvList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Stockholmconvlist\"\n    },\n    \"stotAffectedOrgans\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Stotaffectedorgans\"\n    },\n    \"stotRouteOfExposure\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Stotrouteofexposure\"\n    },\n    \"tcsiNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Tcsinotified\"\n    },\n    \"tradeSecret\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Tradesecret\"\n    },\n    \"twGHSClasList\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Twghsclaslist\"\n    },\n    \"twHandlePriorityChem\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Twhandleprioritychem\"\n    },\n    \"twHandleToxicChem\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Twhandletoxicchem\"\n    },\n    \"twIndWasteStandards\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Twindwastestandards\"\n    },\n    \"vinicNotified\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Vinicnotified\"\n    },\n    \"exposureControlsOSHA\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ExposureControl\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exposurecontrolsosha\"\n    },\n    \"exposureControlsAIHA\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ExposureControl\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exposurecontrolsaiha\"\n    },\n    \"exposureControlsNIOSH\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/ExposureControl\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Exposurecontrolsniosh\"\n    },\n    \"snur\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Snur\"\n    },\n    \"tsca12BConcentrationLimit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Tsca12Bconcentrationlimit\"\n    },\n    \"cerclaRQ\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cerclarq\"\n    },\n    \"californiaProp65\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Californiaprop65\"\n    },\n    \"sara302\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sara302\"\n    },\n    \"sara313ConcentrationLimit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Sara313Concentrationlimit\"\n    },\n    \"CFRmarinePollutant\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cfrmarinepollutant\"\n    },\n    \"CFRreportableQuantity\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Cfrreportablequantity\"\n    },\n    \"rohsConcentration\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rohsconcentration\"\n    },\n    \"skinCorrosionInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/SkinCorrosionInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Skincorrosioninfo\"\n    },\n    \"seriousEyeDamageInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/SeriousEyeDamageInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Seriouseyedamageinfo\"\n    },\n    \"respiratorySkinSensInfo\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/RespiratorySkinSensInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Respiratoryskinsensinfo\"\n    },\n    \"isCas\": {\n      \"default\": true,\n      \"title\": \"Iscas\",\n      \"type\": \"boolean\"\n    }\n  },\n  \"required\": [\n    \"casID\"\n  ],\n  \"title\": \"SubstanceInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>type</code>                 (<code>Literal['Substance']</code>)             </li> <li> <code>acute_dermal_tox_info</code>                 (<code>list[ToxicityInfo] | None</code>)             </li> <li> <code>acute_inhalation_tox_info</code>                 (<code>list[ToxicityInfo] | None</code>)             </li> <li> <code>acute_oral_tox_info</code>                 (<code>list[ToxicityInfo] | None</code>)             </li> <li> <code>acute_tox_info</code>                 (<code>list[ToxicityInfo] | None</code>)             </li> <li> <code>bio_accumulative_info</code>                 (<code>list[BioAccumulativeInfo] | None</code>)             </li> <li> <code>boilingpoint_info</code>                 (<code>list[BoilingPointInfo] | None</code>)             </li> <li> <code>cas_id</code>                 (<code>str</code>)             </li> <li> <code>classification</code>                 (<code>str | None</code>)             </li> <li> <code>classification_type</code>                 (<code>str | None</code>)             </li> <li> <code>degradability_info</code>                 (<code>list[DegradabilityInfo] | None</code>)             </li> <li> <code>dnel_info</code>                 (<code>list[DNELInfo] | None</code>)             </li> <li> <code>ec_list_no</code>                 (<code>str | None</code>)             </li> <li> <code>exposure_controls_acgih</code>                 (<code>list[ExposureControl] | None</code>)             </li> <li> <code>hazards</code>                 (<code>list[Hazard] | None</code>)             </li> <li> <code>iarc_carcinogen</code>                 (<code>str | None</code>)             </li> <li> <code>ntp_carcinogen</code>                 (<code>str | None</code>)             </li> <li> <code>osha_carcinogen</code>                 (<code>bool | None</code>)             </li> <li> <code>health_effects</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>list[SubstanceName] | None</code>)             </li> <li> <code>page_number</code>                 (<code>int | None</code>)             </li> <li> <code>aicis_notified</code>                 (<code>bool | None</code>)             </li> <li> <code>approved_legal_entities</code>                 (<code>Any | None</code>)             </li> <li> <code>aspiration_tox_info</code>                 (<code>list[Any] | None</code>)             </li> <li> <code>basel_conv_list</code>                 (<code>bool | None</code>)             </li> <li> <code>bei_info</code>                 (<code>list[Any] | None</code>)             </li> <li> <code>caa_cfr_40</code>                 (<code>bool | None</code>)             </li> <li> <code>caa_hpa</code>                 (<code>bool | None</code>)             </li> <li> <code>canada_inventory_status</code>                 (<code>str | None</code>)             </li> <li> <code>carcinogen_info</code>                 (<code>list[Any] | None</code>)             </li> <li> <code>chemical_category</code>                 (<code>list[str] | None</code>)             </li> <li> <code>dermal_acute_toxicity</code>                 (<code>float | None</code>)             </li> <li> <code>inhalation_acute_toxicity</code>                 (<code>float | None</code>)             </li> <li> <code>oral_acute_toxicity</code>                 (<code>float | None</code>)             </li> <li> <code>lethal_dose_and_concentrations</code>                 (<code>list[LethalDoseConcentration] | None</code>)             </li> <li> <code>m_factor</code>                 (<code>int | None</code>)             </li> <li> <code>m_factor_chronic</code>                 (<code>int | None</code>)             </li> <li> <code>molecular_weight</code>                 (<code>list[MolecularWeight] | None</code>)             </li> <li> <code>rsl</code>                 (<code>RSL | None</code>)             </li> <li> <code>specific_conc_eu</code>                 (<code>list[SpecificConcentration] | None</code>)             </li> <li> <code>specific_conc_source</code>                 (<code>str | None</code>)             </li> <li> <code>sustainability_status_lbc</code>                 (<code>str | None</code>)             </li> <li> <code>tsca_8b</code>                 (<code>bool | None</code>)             </li> <li> <code>cdsa_list</code>                 (<code>bool | None</code>)             </li> <li> <code>cn_csd_c_regulations</code>                 (<code>bool | None</code>)             </li> <li> <code>cn_pcod_list</code>                 (<code>bool | None</code>)             </li> <li> <code>cn_priority_list</code>                 (<code>bool | None</code>)             </li> <li> <code>ec_notified</code>                 (<code>str | None</code>)             </li> <li> <code>eu_annex_14_substances_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_annex_17_restrictions_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_annex_17_substances_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_candidate_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_dang_chem_annex_1_part_1_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_dang_chem_annex_1_part_2_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_dang_chem_annex_1_part_3_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_dang_chem_annex_5_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_directive_ec_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_explosive_precursors_annex_1_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_explosive_precursors_annex_2_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_ozone_depletion_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_pollutant_annex_2_list</code>                 (<code>bool | None</code>)             </li> <li> <code>eu_pop_list</code>                 (<code>bool | None</code>)             </li> <li> <code>export_control_list_phrases</code>                 (<code>bool | None</code>)             </li> <li> <code>green_gas_list</code>                 (<code>bool | None</code>)             </li> <li> <code>iecsc_notified</code>                 (<code>bool | None</code>)             </li> <li> <code>index_no</code>                 (<code>str | None</code>)             </li> <li> <code>jpencs_notified</code>                 (<code>bool | None</code>)             </li> <li> <code>jpishl_notified</code>                 (<code>bool | None</code>)             </li> <li> <code>koecl_notified</code>                 (<code>bool | None</code>)             </li> <li> <code>kyoto_protocol</code>                 (<code>bool | None</code>)             </li> <li> <code>massachusetts_rtk</code>                 (<code>bool | None</code>)             </li> <li> <code>montreal_protocol</code>                 (<code>bool | None</code>)             </li> <li> <code>new_jersey_rtk</code>                 (<code>bool | None</code>)             </li> <li> <code>new_york_rtk</code>                 (<code>bool | None</code>)             </li> <li> <code>nzioc_notified</code>                 (<code>bool | None</code>)             </li> <li> <code>pcr_regulated</code>                 (<code>bool | None</code>)             </li> <li> <code>pennsylvania_rtk</code>                 (<code>bool | None</code>)             </li> <li> <code>peroxide_function_groups</code>                 (<code>int | None</code>)             </li> <li> <code>piccs_notified</code>                 (<code>bool | None</code>)             </li> <li> <code>rhode_island_rtk</code>                 (<code>bool | None</code>)             </li> <li> <code>rotterdam_conv_list</code>                 (<code>bool | None</code>)             </li> <li> <code>sdwa</code>                 (<code>bool | None</code>)             </li> <li> <code>source</code>                 (<code>str | None</code>)             </li> <li> <code>specific_concentration_limit</code>                 (<code>str | None</code>)             </li> <li> <code>stockholm_conv_list</code>                 (<code>bool | None</code>)             </li> <li> <code>stot_affected_organs</code>                 (<code>str | None</code>)             </li> <li> <code>stot_route_of_exposure</code>                 (<code>str | None</code>)             </li> <li> <code>tcsi_notified</code>                 (<code>bool | None</code>)             </li> <li> <code>trade_secret</code>                 (<code>bool | None</code>)             </li> <li> <code>tw_ghs_clas_list</code>                 (<code>bool | None</code>)             </li> <li> <code>tw_handle_priority_chem</code>                 (<code>bool | None</code>)             </li> <li> <code>tw_handle_toxic_chem</code>                 (<code>bool | None</code>)             </li> <li> <code>tw_ind_waste_standards</code>                 (<code>bool | None</code>)             </li> <li> <code>vinic_notified</code>                 (<code>bool | None</code>)             </li> <li> <code>exposure_controls_osha</code>                 (<code>list[ExposureControl] | None</code>)             </li> <li> <code>exposure_controls_aiha</code>                 (<code>list[ExposureControl] | None</code>)             </li> <li> <code>exposure_controls_niosh</code>                 (<code>list[ExposureControl] | None</code>)             </li> <li> <code>snur</code>                 (<code>bool | dict | None</code>)             </li> <li> <code>tsca_12b_concentration_limit</code>                 (<code>float | None</code>)             </li> <li> <code>cercla_rq</code>                 (<code>float | None</code>)             </li> <li> <code>california_prop_65</code>                 (<code>list[str] | None</code>)             </li> <li> <code>sara_302</code>                 (<code>bool | None</code>)             </li> <li> <code>sara_313_concentration_limit</code>                 (<code>float | None</code>)             </li> <li> <code>cfr_marine_pollutant</code>                 (<code>dict | None</code>)             </li> <li> <code>cfr_reportable_quantity</code>                 (<code>dict | None</code>)             </li> <li> <code>rohs_concentration</code>                 (<code>float | None</code>)             </li> <li> <code>skin_corrosion_info</code>                 (<code>list[SkinCorrosionInfo] | None</code>)             </li> <li> <code>serious_eye_damage_info</code>                 (<code>list[SeriousEyeDamageInfo] | None</code>)             </li> <li> <code>respiratory_skin_sens_info</code>                 (<code>list[RespiratorySkinSensInfo] | None</code>)             </li> <li> <code>is_known</code>                 (<code>bool</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.type","title":"type","text":"<pre><code>type: Literal['Substance'] = 'Substance'\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.acute_dermal_tox_info","title":"acute_dermal_tox_info","text":"<pre><code>acute_dermal_tox_info: list[ToxicityInfo] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.acute_inhalation_tox_info","title":"acute_inhalation_tox_info","text":"<pre><code>acute_inhalation_tox_info: list[ToxicityInfo] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.acute_oral_tox_info","title":"acute_oral_tox_info","text":"<pre><code>acute_oral_tox_info: list[ToxicityInfo] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.acute_tox_info","title":"acute_tox_info","text":"<pre><code>acute_tox_info: list[ToxicityInfo] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.bio_accumulative_info","title":"bio_accumulative_info","text":"<pre><code>bio_accumulative_info: list[BioAccumulativeInfo] | None = (\n    None\n)\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.boilingpoint_info","title":"boilingpoint_info","text":"<pre><code>boilingpoint_info: list[BoilingPointInfo] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.cas_id","title":"cas_id","text":"<pre><code>cas_id: str\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.classification","title":"classification","text":"<pre><code>classification: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.classification_type","title":"classification_type","text":"<pre><code>classification_type: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.degradability_info","title":"degradability_info","text":"<pre><code>degradability_info: list[DegradabilityInfo] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.dnel_info","title":"dnel_info","text":"<pre><code>dnel_info: list[DNELInfo] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.ec_list_no","title":"ec_list_no","text":"<pre><code>ec_list_no: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.exposure_controls_acgih","title":"exposure_controls_acgih","text":"<pre><code>exposure_controls_acgih: list[ExposureControl] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.hazards","title":"hazards","text":"<pre><code>hazards: list[Hazard] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.iarc_carcinogen","title":"iarc_carcinogen","text":"<pre><code>iarc_carcinogen: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.ntp_carcinogen","title":"ntp_carcinogen","text":"<pre><code>ntp_carcinogen: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.osha_carcinogen","title":"osha_carcinogen","text":"<pre><code>osha_carcinogen: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.health_effects","title":"health_effects","text":"<pre><code>health_effects: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.name","title":"name","text":"<pre><code>name: list[SubstanceName] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.page_number","title":"page_number","text":"<pre><code>page_number: int | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.aicis_notified","title":"aicis_notified","text":"<pre><code>aicis_notified: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.approved_legal_entities","title":"approved_legal_entities","text":"<pre><code>approved_legal_entities: Any | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.aspiration_tox_info","title":"aspiration_tox_info","text":"<pre><code>aspiration_tox_info: list[Any] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.basel_conv_list","title":"basel_conv_list","text":"<pre><code>basel_conv_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.bei_info","title":"bei_info","text":"<pre><code>bei_info: list[Any] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.caa_cfr_40","title":"caa_cfr_40","text":"<pre><code>caa_cfr_40: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.caa_hpa","title":"caa_hpa","text":"<pre><code>caa_hpa: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.canada_inventory_status","title":"canada_inventory_status","text":"<pre><code>canada_inventory_status: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.carcinogen_info","title":"carcinogen_info","text":"<pre><code>carcinogen_info: list[Any] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.chemical_category","title":"chemical_category","text":"<pre><code>chemical_category: list[str] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.dermal_acute_toxicity","title":"dermal_acute_toxicity","text":"<pre><code>dermal_acute_toxicity: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.inhalation_acute_toxicity","title":"inhalation_acute_toxicity","text":"<pre><code>inhalation_acute_toxicity: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.oral_acute_toxicity","title":"oral_acute_toxicity","text":"<pre><code>oral_acute_toxicity: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.lethal_dose_and_concentrations","title":"lethal_dose_and_concentrations","text":"<pre><code>lethal_dose_and_concentrations: (\n    list[LethalDoseConcentration] | None\n) = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.m_factor","title":"m_factor","text":"<pre><code>m_factor: int | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.m_factor_chronic","title":"m_factor_chronic","text":"<pre><code>m_factor_chronic: int | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.molecular_weight","title":"molecular_weight","text":"<pre><code>molecular_weight: list[MolecularWeight] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.rsl","title":"rsl","text":"<pre><code>rsl: RSL | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.specific_conc_eu","title":"specific_conc_eu","text":"<pre><code>specific_conc_eu: list[SpecificConcentration] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.specific_conc_source","title":"specific_conc_source","text":"<pre><code>specific_conc_source: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.sustainability_status_lbc","title":"sustainability_status_lbc","text":"<pre><code>sustainability_status_lbc: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.tsca_8b","title":"tsca_8b","text":"<pre><code>tsca_8b: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.cdsa_list","title":"cdsa_list","text":"<pre><code>cdsa_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.cn_csd_c_regulations","title":"cn_csd_c_regulations","text":"<pre><code>cn_csd_c_regulations: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.cn_pcod_list","title":"cn_pcod_list","text":"<pre><code>cn_pcod_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.cn_priority_list","title":"cn_priority_list","text":"<pre><code>cn_priority_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.ec_notified","title":"ec_notified","text":"<pre><code>ec_notified: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_annex_14_substances_list","title":"eu_annex_14_substances_list","text":"<pre><code>eu_annex_14_substances_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_annex_17_restrictions_list","title":"eu_annex_17_restrictions_list","text":"<pre><code>eu_annex_17_restrictions_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_annex_17_substances_list","title":"eu_annex_17_substances_list","text":"<pre><code>eu_annex_17_substances_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_candidate_list","title":"eu_candidate_list","text":"<pre><code>eu_candidate_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_dang_chem_annex_1_part_1_list","title":"eu_dang_chem_annex_1_part_1_list","text":"<pre><code>eu_dang_chem_annex_1_part_1_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_dang_chem_annex_1_part_2_list","title":"eu_dang_chem_annex_1_part_2_list","text":"<pre><code>eu_dang_chem_annex_1_part_2_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_dang_chem_annex_1_part_3_list","title":"eu_dang_chem_annex_1_part_3_list","text":"<pre><code>eu_dang_chem_annex_1_part_3_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_dang_chem_annex_5_list","title":"eu_dang_chem_annex_5_list","text":"<pre><code>eu_dang_chem_annex_5_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_directive_ec_list","title":"eu_directive_ec_list","text":"<pre><code>eu_directive_ec_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_explosive_precursors_annex_1_list","title":"eu_explosive_precursors_annex_1_list","text":"<pre><code>eu_explosive_precursors_annex_1_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_explosive_precursors_annex_2_list","title":"eu_explosive_precursors_annex_2_list","text":"<pre><code>eu_explosive_precursors_annex_2_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_ozone_depletion_list","title":"eu_ozone_depletion_list","text":"<pre><code>eu_ozone_depletion_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_pollutant_annex_2_list","title":"eu_pollutant_annex_2_list","text":"<pre><code>eu_pollutant_annex_2_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.eu_pop_list","title":"eu_pop_list","text":"<pre><code>eu_pop_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.export_control_list_phrases","title":"export_control_list_phrases","text":"<pre><code>export_control_list_phrases: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.green_gas_list","title":"green_gas_list","text":"<pre><code>green_gas_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.iecsc_notified","title":"iecsc_notified","text":"<pre><code>iecsc_notified: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.index_no","title":"index_no","text":"<pre><code>index_no: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.jpencs_notified","title":"jpencs_notified","text":"<pre><code>jpencs_notified: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.jpishl_notified","title":"jpishl_notified","text":"<pre><code>jpishl_notified: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.koecl_notified","title":"koecl_notified","text":"<pre><code>koecl_notified: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.kyoto_protocol","title":"kyoto_protocol","text":"<pre><code>kyoto_protocol: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.massachusetts_rtk","title":"massachusetts_rtk","text":"<pre><code>massachusetts_rtk: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.montreal_protocol","title":"montreal_protocol","text":"<pre><code>montreal_protocol: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.new_jersey_rtk","title":"new_jersey_rtk","text":"<pre><code>new_jersey_rtk: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.new_york_rtk","title":"new_york_rtk","text":"<pre><code>new_york_rtk: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.nzioc_notified","title":"nzioc_notified","text":"<pre><code>nzioc_notified: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.pcr_regulated","title":"pcr_regulated","text":"<pre><code>pcr_regulated: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.pennsylvania_rtk","title":"pennsylvania_rtk","text":"<pre><code>pennsylvania_rtk: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.peroxide_function_groups","title":"peroxide_function_groups","text":"<pre><code>peroxide_function_groups: int | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.piccs_notified","title":"piccs_notified","text":"<pre><code>piccs_notified: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.rhode_island_rtk","title":"rhode_island_rtk","text":"<pre><code>rhode_island_rtk: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.rotterdam_conv_list","title":"rotterdam_conv_list","text":"<pre><code>rotterdam_conv_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.sdwa","title":"sdwa","text":"<pre><code>sdwa: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.source","title":"source","text":"<pre><code>source: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.specific_concentration_limit","title":"specific_concentration_limit","text":"<pre><code>specific_concentration_limit: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.stockholm_conv_list","title":"stockholm_conv_list","text":"<pre><code>stockholm_conv_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.stot_affected_organs","title":"stot_affected_organs","text":"<pre><code>stot_affected_organs: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.stot_route_of_exposure","title":"stot_route_of_exposure","text":"<pre><code>stot_route_of_exposure: str | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.tcsi_notified","title":"tcsi_notified","text":"<pre><code>tcsi_notified: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.trade_secret","title":"trade_secret","text":"<pre><code>trade_secret: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.tw_ghs_clas_list","title":"tw_ghs_clas_list","text":"<pre><code>tw_ghs_clas_list: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.tw_handle_priority_chem","title":"tw_handle_priority_chem","text":"<pre><code>tw_handle_priority_chem: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.tw_handle_toxic_chem","title":"tw_handle_toxic_chem","text":"<pre><code>tw_handle_toxic_chem: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.tw_ind_waste_standards","title":"tw_ind_waste_standards","text":"<pre><code>tw_ind_waste_standards: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.vinic_notified","title":"vinic_notified","text":"<pre><code>vinic_notified: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.exposure_controls_osha","title":"exposure_controls_osha","text":"<pre><code>exposure_controls_osha: list[ExposureControl] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.exposure_controls_aiha","title":"exposure_controls_aiha","text":"<pre><code>exposure_controls_aiha: list[ExposureControl] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.exposure_controls_niosh","title":"exposure_controls_niosh","text":"<pre><code>exposure_controls_niosh: list[ExposureControl] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.snur","title":"snur","text":"<pre><code>snur: bool | dict | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.tsca_12b_concentration_limit","title":"tsca_12b_concentration_limit","text":"<pre><code>tsca_12b_concentration_limit: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.cercla_rq","title":"cercla_rq","text":"<pre><code>cercla_rq: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.california_prop_65","title":"california_prop_65","text":"<pre><code>california_prop_65: list[str] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.sara_302","title":"sara_302","text":"<pre><code>sara_302: bool | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.sara_313_concentration_limit","title":"sara_313_concentration_limit","text":"<pre><code>sara_313_concentration_limit: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.cfr_marine_pollutant","title":"cfr_marine_pollutant","text":"<pre><code>cfr_marine_pollutant: dict | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.cfr_reportable_quantity","title":"cfr_reportable_quantity","text":"<pre><code>cfr_reportable_quantity: dict | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.rohs_concentration","title":"rohs_concentration","text":"<pre><code>rohs_concentration: float | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.skin_corrosion_info","title":"skin_corrosion_info","text":"<pre><code>skin_corrosion_info: list[SkinCorrosionInfo] | None = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.serious_eye_damage_info","title":"serious_eye_damage_info","text":"<pre><code>serious_eye_damage_info: (\n    list[SeriousEyeDamageInfo] | None\n) = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.respiratory_skin_sens_info","title":"respiratory_skin_sens_info","text":"<pre><code>respiratory_skin_sens_info: (\n    list[RespiratorySkinSensInfo] | None\n) = None\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceInfo.is_known","title":"is_known","text":"<pre><code>is_known: bool = True\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceResponse","title":"SubstanceResponse","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>SubstanceResponse is a Pydantic model representing the response containing substance information.</p> <p>Attributes:</p> Name Type Description <code>substances</code> <code>list[Substance]</code> <p>A list of substances.</p> <code>substance_errors</code> <code>list[Any] | None</code> <p>A list of errors related to substances, if any.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BioAccumulativeInfo\": {\n      \"description\": \"BioAccumulativeInfo is a Pydantic model representing bioaccumulative information.\\n\\nAttributes\\n----------\\nbcf_value : str | None\\n    The bioaccumulative factor value.\\ntemperature : str | None\\n    The temperature of the bioaccumulative test.\\nexposure_time : str | None\\n    The exposure time of the bioaccumulative test.\\nmethod : str | None\\n    The method of the bioaccumulative test.\\nspecies : str | None\\n    The species of the bioaccumulative test.\",\n      \"properties\": {\n        \"bcfValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Bcfvalue\"\n        },\n        \"temperature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Temperature\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        }\n      },\n      \"title\": \"BioAccumulativeInfo\",\n      \"type\": \"object\"\n    },\n    \"BoilingPointInfo\": {\n      \"description\": \"BoilingPointInfo is a Pydantic model representing boiling point information.\\n\\nAttributes\\n----------\\nsource : list[BoilingPointSource] | None\\n    The source of the boiling point information.\\nvalues : list[BoilingPointValue] | None\\n    The values of the boiling point information.\",\n      \"properties\": {\n        \"source\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/BoilingPointSource\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Source\"\n        },\n        \"values\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/BoilingPointValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Values\"\n        }\n      },\n      \"title\": \"BoilingPointInfo\",\n      \"type\": \"object\"\n    },\n    \"BoilingPointSource\": {\n      \"description\": \"BoilingPointSource is a Pydantic model representing a boiling point source.\\n\\nAttributes\\n----------\\nnote_code : str | None\\n    The note code of the boiling point source.\\nnote : str | None\\n    The note of the boiling point source.\\nnote_field : str | None\\n    The note field of the boiling point source.\",\n      \"properties\": {\n        \"noteCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Notecode\"\n        },\n        \"note\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Note\"\n        },\n        \"noteField\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Notefield\"\n        }\n      },\n      \"title\": \"BoilingPointSource\",\n      \"type\": \"object\"\n    },\n    \"BoilingPointValue\": {\n      \"description\": \"BoilingPointValue is a Pydantic model representing a boiling point value.\\n\\nAttributes\\n----------\\nmin_value : str | None\\n    The minimum boiling point value.\\nmax_value : str | None\\n    The maximum boiling point value.\\nunit : str | None\\n    The unit of the boiling point value.\",\n      \"properties\": {\n        \"minValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minvalue\"\n        },\n        \"maxValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Maxvalue\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"BoilingPointValue\",\n      \"type\": \"object\"\n    },\n    \"DNELInfo\": {\n      \"description\": \"DNELInfo is a Pydantic model representing the Derived No Effect Level (DNEL) information.\\n\\nAttributes\\n----------\\nroe : str | None\\n    The reference exposure level.\\nhealth_effect : str | None\\n    The health effect associated with the exposure.\\nexposure_time : str | None\\n    The exposure time for the DNEL.\\napplication_area : str | None\\n    The area of application for the DNEL.\\nvalue : str | None\\n    The DNEL value.\\nremarks : str | None\\n    Any additional remarks regarding the DNEL.\",\n      \"properties\": {\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"healthEffect\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Healtheffect\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"applicationArea\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Applicationarea\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"remarks\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Remarks\"\n        }\n      },\n      \"title\": \"DNELInfo\",\n      \"type\": \"object\"\n    },\n    \"DegradabilityInfo\": {\n      \"description\": \"DegradabilityInfo is a Pydantic model representing information about the degradability of a substance.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the degradability test.\\nunit : str | None\\n    The unit of measurement for the degradability test.\\nexposure_time : str | None\\n    The exposure time of the degradability test.\\nmethod : str | None\\n    The method used for the degradability test.\\ntest_type : str | None\\n    The type of the degradability test.\\ndegradability : str | None\\n    The degradability classification.\\nvalue : str | None\\n    The value of the degradability test.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"testType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Testtype\"\n        },\n        \"degradability\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Degradability\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"DegradabilityInfo\",\n      \"type\": \"object\"\n    },\n    \"ExposureControl\": {\n      \"description\": \"ExposureControl is a Pydantic model representing exposure control measures.\\n\\nAttributes\\n----------\\ntype : str | None\\n    The type of exposure control.\\nvalue : float | None\\n    The value associated with the exposure control.\\nunit : str | None\\n    The unit of measurement for the exposure control.\",\n      \"properties\": {\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Type\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"ExposureControl\",\n      \"type\": \"object\"\n    },\n    \"Hazard\": {\n      \"description\": \"Hazard is a Pydantic model representing hazard information.\\n\\nAttributes\\n----------\\nh_code : str | None\\n    The hazard code.\\ncategory : str | None\\n    The category of the hazard.\\nclass_ : str | None\\n    The class of the hazard.\\nsub_category : str | None\\n    The sub-category of the hazard.\",\n      \"properties\": {\n        \"hCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Hcode\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Category\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Class\"\n        },\n        \"subCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Subcategory\"\n        }\n      },\n      \"title\": \"Hazard\",\n      \"type\": \"object\"\n    },\n    \"LethalDoseConcentration\": {\n      \"description\": \"LethalDoseConcentration is a Pydantic model representing lethal dose and concentration information.\\n\\nAttributes\\n----------\\nduration : str | None\\n    The duration of the exposure.\\nunit : str | None\\n    The unit of measurement for the lethal dose.\\ntype : str | None\\n    The type of the lethal dose.\\nspecies : str | None\\n    The species tested.\\nvalue : float | None\\n    The lethal dose value.\\nsex : str | None\\n    The sex of the species tested.\\nexposure_time : str | None\\n    The exposure time for the lethal dose test.\\nmethod : str | None\\n    The method used for the lethal dose test.\\ntest_atmosphere : str | None\\n    The atmosphere in which the test was conducted.\",\n      \"properties\": {\n        \"duration\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Duration\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Type\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"sex\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sex\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"testAtmosphere\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Testatmosphere\"\n        }\n      },\n      \"title\": \"LethalDoseConcentration\",\n      \"type\": \"object\"\n    },\n    \"MolecularWeight\": {\n      \"description\": \"MolecularWeight is a Pydantic model representing molecular weight information.\\n\\nAttributes\\n----------\\nvalues : list[MolecularWeightValue] | None\\n    The list of molecular weight values.\",\n      \"properties\": {\n        \"values\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/MolecularWeightValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Values\"\n        }\n      },\n      \"title\": \"MolecularWeight\",\n      \"type\": \"object\"\n    },\n    \"MolecularWeightValue\": {\n      \"description\": \"MolecularWeightValue is a Pydantic model representing a molecular weight value.\\n\\nAttributes\\n----------\\nmin_value : str | None\\n    The minimum molecular weight value.\\nmax_value : str | None\\n    The maximum molecular weight value.\\nunit : str | None\\n    The unit of measurement for the molecular weight.\",\n      \"properties\": {\n        \"minValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minvalue\"\n        },\n        \"maxValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Maxvalue\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"MolecularWeightValue\",\n      \"type\": \"object\"\n    },\n    \"RSL\": {\n      \"description\": \"RSL is a Pydantic model representing the regulatory substance list (RSL) information.\\n\\nAttributes\\n----------\\nsanitizer : RSLSanitizer | None\\n    The sanitizer information associated with the RSL.\",\n      \"properties\": {\n        \"sanitizer\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/RSLSanitizer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"title\": \"RSL\",\n      \"type\": \"object\"\n    },\n    \"RSLSanitizer\": {\n      \"description\": \"RSLSanitizer is a Pydantic model representing sanitizer information.\\n\\nAttributes\\n----------\\nvalue : float | None\\n    The value of the sanitizer.\\nunit : str | None\\n    The unit of measurement for the sanitizer.\",\n      \"properties\": {\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        }\n      },\n      \"title\": \"RSLSanitizer\",\n      \"type\": \"object\"\n    },\n    \"RespiratorySkinSensInfo\": {\n      \"description\": \"RespiratorySkinSensInfo is a Pydantic model representing respiratory and skin sensitization information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the respiratory skin sensitization test.\\nroe : str | None\\n    The reference exposure level.\\nmethod : str | None\\n    The method used for the respiratory skin sensitization test.\\nspecies : str | None\\n    The species tested for respiratory skin sensitization.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        }\n      },\n      \"title\": \"RespiratorySkinSensInfo\",\n      \"type\": \"object\"\n    },\n    \"SeriousEyeDamageInfo\": {\n      \"description\": \"SeriousEyeDamageInfo is a Pydantic model representing serious eye damage information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the serious eye damage test.\\nroe : str | None\\n    The reference exposure level.\\nunit : str | None\\n    The unit of measurement for the serious eye damage test.\\nmethod : str | None\\n    The method used for the serious eye damage test.\\nvalue : float | None\\n    The value of the serious eye damage test.\\nspecies : str | None\\n    The species tested for serious eye damage.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        }\n      },\n      \"title\": \"SeriousEyeDamageInfo\",\n      \"type\": \"object\"\n    },\n    \"SkinCorrosionInfo\": {\n      \"description\": \"SkinCorrosionInfo is a Pydantic model representing skin corrosion information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the skin corrosion test.\\nroe : str | None\\n    The reference exposure level.\\nunit : str | None\\n    The unit of measurement for the skin corrosion test.\\nmethod : str | None\\n    The method used for the skin corrosion test.\\nvalue : float | None\\n    The value of the skin corrosion test.\\nspecies : str | None\\n    The species tested for skin corrosion.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        }\n      },\n      \"title\": \"SkinCorrosionInfo\",\n      \"type\": \"object\"\n    },\n    \"SpecificConcentration\": {\n      \"description\": \"SpecificConcentration is a Pydantic model representing specific concentration information.\\n\\nAttributes\\n----------\\nspecific_conc : str | None\\n    The specific concentration value.\\nsub_category : str | None\\n    The sub-category of the specific concentration.\\ncategory : int | None\\n    The category of the specific concentration.\\nh_code : str | None\\n    The hazard code associated with the specific concentration.\\nclass_ : str | None\\n    The class of the specific concentration.\",\n      \"properties\": {\n        \"specific_conc\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Specific Conc\"\n        },\n        \"subCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Subcategory\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Category\"\n        },\n        \"hCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Hcode\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Class\"\n        }\n      },\n      \"title\": \"SpecificConcentration\",\n      \"type\": \"object\"\n    },\n    \"SubstanceInfo\": {\n      \"description\": \"SubstanceInfo is a Pydantic model representing information about a chemical substance.\\n\\nAttributes\\n----------\\nacute_dermal_tox_info : list[ToxicityInfo] | None\\n    Information about acute dermal toxicity.\\nacute_inhalation_tox_info : list[ToxicityInfo] | None\\n    Information about acute inhalation toxicity.\\nacute_oral_tox_info : list[ToxicityInfo] | None\\n    Information about acute oral toxicity.\\nacute_tox_info : list[ToxicityInfo] | None\\n    General acute toxicity information.\\nbio_accumulative_info : list[BioAccumulativeInfo] | None\\n    Information about bioaccumulation.\\nboiling_point_info : list[BoilingPointInfo] | None\\n    Information about boiling points.\\ncas_id : str\\n    The CAS ID of the substance.\\nclassification : str | None\\n    The classification of the substance.\\nclassification_type : str\\n    The type of classification.\\ndegradability_info : list[DegradabilityInfo] | None\\n    Information about degradability.\\ndnel_info : list[DNELInfo] | None\\n    Information about the Derived No Effect Level (DNEL).\\nec_list_no : str\\n    The EC list number.\\nexposure_controls_acgih : list[ExposureControl] | None\\n    ACGIH exposure controls.\\nhazards : list[Hazard] | None\\n    List of hazards associated with the substance.\\niarc_carcinogen : str | None\\n    IARC carcinogen classification.\\nntp_carcinogen : str | None\\n    NTP carcinogen classification.\\nosha_carcinogen : bool | None\\n    OSHA carcinogen classification.\\nhealth_effects : str | None\\n    Information about health effects.\\nname : list[SubstanceName] | None\\n    Names of the substance.\\npage_number : int | None\\n    Page number for reference.\\naicis_notified : bool | None\\n    Indicates if AICIS has been notified.\\napproved_legal_entities : Any | None\\n    Approved legal entities for the substance.\\naspiration_tox_info : list[Any] | None\\n    Information about aspiration toxicity.\\nbasel_conv_list : bool | None\\n    Indicates if the substance is on the Basel Convention list.\\nbei_info : list[Any] | None\\n    Information related to BEI.\\ncaa_cfr40 : bool | None\\n    Indicates compliance with CAA CFR 40.\\ncaa_hpa : bool | None\\n    Indicates compliance with CAA HPA.\\ncanada_inventory_status : str | None\\n    Status in the Canadian inventory.\\ncarcinogen_info : list[Any] | None\\n    Information about carcinogenicity.\\nchemical_category : list[str] | None\\n    Categories of the chemical.\\ndermal_acute_toxicity : float | None\\n    Acute dermal toxicity value.\\ninhalation_acute_toxicity : float | None\\n    Acute inhalation toxicity value.\\noral_acute_toxicity : float | None\\n    Acute oral toxicity value.\\nlethal_dose_and_concentrations : list[LethalDoseConcentration] | None\\n    Information about lethal doses and concentrations.\\nm_factor : int | None\\n    M factor for acute toxicity.\\nm_factor_chronic : int | None\\n    M factor for chronic toxicity.\\nmolecular_weight : list[MolecularWeight] | None\\n    Molecular weight information.\\nrsl : RSL | None\\n    Risk-based screening level.\\nspecific_conc_eu : list[SpecificConcentration] | None\\n    Specific concentration information for the EU.\\nspecific_conc_source : str | None\\n    Source of specific concentration information.\\nsustainability_status_lbc : str | None\\n    Sustainability status under LBC.\\ntsca_8b : bool | None\\n    Indicates compliance with TSCA 8(b).\\ncdsa_list : bool | None\\n    Indicates if the substance is on the CDSA list.\\ncn_csdc_regulations : bool | None\\n    Compliance with CN CSDC regulations.\\ncn_pcod_list : bool | None\\n    Indicates if the substance is on the CN PCOD list.\\ncn_priority_list : bool | None\\n    Indicates if the substance is on the CN priority list.\\nec_notified : str | None\\n    Notification status in the EC.\\neu_annex_14_substances_list : bool | None\\n    Indicates if the substance is on the EU Annex 14 list.\\neu_annex_17_restrictions_list : bool | None\\n    Indicates if the substance is on the EU Annex 17 restrictions list.\\neu_annex_17_substances_list : bool | None\\n    Indicates if the substance is on the EU Annex 17 substances list.\\neu_candidate_list : bool | None\\n    Indicates if the substance is on the EU candidate list.\\neu_dang_chem_annex_1_part_1_list : bool | None\\n    Indicates if the substance is on the EU dangerous chemicals Annex 1 Part 1 list.\\neu_dang_chem_annex_1_part_2_list : bool | None\\n    Indicates if the substance is on the EU dangerous chemicals Annex 1 Part 2 list.\\neu_dang_chem_annex_1_part_3_list : bool | None\\n    Indicates if the substance is on the EU dangerous chemicals Annex 1 Part 3 list.\\neu_dang_chem_annex_5_list : bool | None\\n    Indicates if the substance is on the EU dangerous chemicals Annex 5 list.\\neu_directive_ec_list : bool | None\\n    Indicates if the substance is on the EU directive EC list.\\neu_explosive_precursors_annex_1_list : bool | None\\n    Indicates if the substance is on the EU explosive precursors Annex 1 list.\\neu_explosive_precursors_annex_2_list : bool | None\\n    Indicates if the substance is on the EU explosive precursors Annex 2 list.\\neu_ozone_depletion_list : bool | None\\n    Indicates if the substance is on the EU ozone depletion list.\\neu_pollutant_annex_2_list : bool | None\\n    Indicates if the substance is on the EU pollutant Annex 2 list.\\neu_pop_list : bool | None\\n    Indicates if the substance is on the EU POP list.\\nexport_control_list_phrases : bool | None\\n    Indicates if the substance is on the export control list.\\ngreen_gas_list : bool | None\\n    Indicates if the substance is on the green gas list.\\niecsc_notified : bool | None\\n    Indicates if the substance is IECSc notified.\\nindex_no : str | None\\n    Index number for the substance.\\njpencs_notified : bool | None\\n    Indicates if the substance is JPENCS notified.\\njpishl_notified : bool | None\\n    Indicates if the substance is JPISHL notified.\\nkoecl_notified : bool | None\\n    Indicates if the substance is KOECL notified.\\nkyoto_protocol : bool | None\\n    Indicates compliance with the Kyoto Protocol.\\nmassachusetts_rtk : bool | None\\n    Indicates if the substance is on the Massachusetts RTK list.\\nmontreal_protocol : bool | None\\n    Indicates compliance with the Montreal Protocol.\\nnew_jersey_rtk : bool | None\\n    Indicates if the substance is on the New Jersey RTK list.\\nnew_york_rtk : bool | None\\n    Indicates if the substance is on the New York RTK list.\\nnzioc_notified : bool | None\\n    Indicates if the substance is NZIOC notified.\\npcr_regulated : bool | None\\n    Indicates if the substance is PCR regulated.\\npennsylvania_rtk : bool | None\\n    Indicates if the substance is on the Pennsylvania RTK list.\\nperoxide_function_groups : int | None\\n    Number of peroxide function groups.\\npiccs_notified : bool | None\\n    Indicates if the substance is PICCS notified.\\nrhode_island_rtk : bool | None\\n    Indicates if the substance is on the Rhode Island RTK list.\\nrotterdam_conv_list : bool | None\\n    Indicates if the substance is on the Rotterdam Convention list.\\nsdwa : bool | None\\n    Indicates compliance with the SDWA.\\nsource : str | None\\n    Source of the substance information.\\nspecific_concentration_limit : str | None\\n    Specific concentration limit for the substance.\\nstockholm_conv_list : bool | None\\n    Indicates if the substance is on the Stockholm Convention list.\\nstot_affected_organs : str | None\\n    Organs affected by STOT.\\nstot_route_of_exposure : str | None\\n    Route of exposure for STOT.\\ntcsi_notified : bool | None\\n    Indicates if the substance is TCSI notified.\\ntrade_secret : str | None\\n    Information about trade secrets.\\ntw_ghs_clas_list : bool | None\\n    Indicates if the substance is on the TW GHS classification list.\\ntw_handle_priority_chem : bool | None\\n    Indicates if the substance is a priority chemical.\\ntw_handle_toxic_chem : bool | None\\n    Indicates if the substance is a toxic chemical.\\ntw_ind_waste_standards : bool | None\\n    Indicates compliance with TW industrial waste standards.\\nvinic_notified : bool | None\\n    Indicates if the substance is VINIC notified.\\nexposure_controls_osha : list[ExposureControl] | None\\n    OSHA exposure controls.\\nexposure_controls_aiha : list[ExposureControl] | None\\n    AIHA exposure controls.\\nexposure_controls_niosh : list[ExposureControl] | None\\n    NIOSH exposure controls.\\nsnur : bool | dict | None\\n    Significant new use rule information.\\ntsca_12b_concentration_limit : float | None\\n    TSCA 12(b) concentration limit.\\ncercla_rq : float | None\\n    CERCLA reportable quantity.\\ncalifornia_prop_65 : list[str] | None\\n    Information related to California Prop 65.\\nsara_302 : bool | None\\n    Indicates compliance with SARA 302.\\nsara_313_concentration_limit : float | None\\n    SARA 313 concentration limit.\\ncfr_marine_pollutant : dict | None\\n    Information about marine pollutants under CFR.\\ncfr_reportable_quantity : dict | None\\n    Information about reportable quantities under CFR.\\nrohs_concentration : float | None\\n    ROHS concentration limit.\\nskin_corrosion_info : list[SkinCorrosionInfo] | None\\n    Information about skin corrosion.\\nserious_eye_damage_info : list[SeriousEyeDamageInfo] | None\\n    Information about serious eye damage.\\nrespiratory_skin_sens_info : list[RespiratorySkinSensInfo] | None\\n    Information about respiratory skin sensitization.\\nis_known : bool\\n    Indicates if the substance is known (i.e. has known regulatory or hazard information in the database)\\n    (note this is an alias for the isCas field which behaves in a non intuitive way in the API so we have opted to use is_known for usability instead)\",\n      \"properties\": {\n        \"type\": {\n          \"const\": \"Substance\",\n          \"default\": \"Substance\",\n          \"title\": \"Type\",\n          \"type\": \"string\"\n        },\n        \"acuteDermalToxInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ToxicityInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Acutedermaltoxinfo\"\n        },\n        \"acuteInhalationToxInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ToxicityInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Acuteinhalationtoxinfo\"\n        },\n        \"acuteOralToxInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ToxicityInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Acuteoraltoxinfo\"\n        },\n        \"acuteToxInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ToxicityInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Acutetoxinfo\"\n        },\n        \"bioAccumulativeInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/BioAccumulativeInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Bioaccumulativeinfo\"\n        },\n        \"boilingpointInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/BoilingPointInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Boilingpointinfo\"\n        },\n        \"casID\": {\n          \"title\": \"Casid\",\n          \"type\": \"string\"\n        },\n        \"classification\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Classification\"\n        },\n        \"classificationType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Classificationtype\"\n        },\n        \"degradabilityInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/DegradabilityInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Degradabilityinfo\"\n        },\n        \"dnelInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/DNELInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Dnelinfo\"\n        },\n        \"ecListNo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Eclistno\"\n        },\n        \"exposureControlsACGIH\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ExposureControl\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposurecontrolsacgih\"\n        },\n        \"hazards\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Hazard\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Hazards\"\n        },\n        \"iarcCarcinogen\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Iarccarcinogen\"\n        },\n        \"ntpCarcinogen\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Ntpcarcinogen\"\n        },\n        \"oshaCarcinogen\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Oshacarcinogen\"\n        },\n        \"healthEffects\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Healtheffects\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/SubstanceName\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"pageNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Pagenumber\"\n        },\n        \"aicisNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Aicisnotified\"\n        },\n        \"approvedLegalEntities\": {\n          \"anyOf\": [\n            {},\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Approvedlegalentities\"\n        },\n        \"aspirationToxInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {},\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Aspirationtoxinfo\"\n        },\n        \"baselConvList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Baselconvlist\"\n        },\n        \"beiInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {},\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Beiinfo\"\n        },\n        \"caaCFR40\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Caacfr40\"\n        },\n        \"caaHPA\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Caahpa\"\n        },\n        \"canadaInventoryStatus\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Canadainventorystatus\"\n        },\n        \"carcinogenInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {},\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Carcinogeninfo\"\n        },\n        \"chemicalCategory\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Chemicalcategory\"\n        },\n        \"dermalAcuteToxicity\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Dermalacutetoxicity\"\n        },\n        \"inhalationAcuteToxicity\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Inhalationacutetoxicity\"\n        },\n        \"oralAcuteToxicity\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Oralacutetoxicity\"\n        },\n        \"lethalDoseAndConcentrations\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/LethalDoseConcentration\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lethaldoseandconcentrations\"\n        },\n        \"mFactor\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Mfactor\"\n        },\n        \"mFactorChronic\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Mfactorchronic\"\n        },\n        \"molecularWeight\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/MolecularWeight\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Molecularweight\"\n        },\n        \"rsl\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/RSL\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"specificConcEU\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/SpecificConcentration\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Specificconceu\"\n        },\n        \"specificConcSource\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Specificconcsource\"\n        },\n        \"sustainabilityStatusLBC\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sustainabilitystatuslbc\"\n        },\n        \"tsca8B\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tsca8B\"\n        },\n        \"cdsaList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cdsalist\"\n        },\n        \"cnCSDCRegulations\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cncsdcregulations\"\n        },\n        \"cnPCODList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cnpcodlist\"\n        },\n        \"cnPriorityList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cnprioritylist\"\n        },\n        \"ecNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Ecnotified\"\n        },\n        \"euAnnex14SubstancesList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Euannex14Substanceslist\"\n        },\n        \"euAnnex17RestrictionsList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Euannex17Restrictionslist\"\n        },\n        \"euAnnex17SubstancesList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Euannex17Substanceslist\"\n        },\n        \"euCandidateList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Eucandidatelist\"\n        },\n        \"euDangChemAnnex1Part1List\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Eudangchemannex1Part1List\"\n        },\n        \"euDangChemAnnex1Part2List\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Eudangchemannex1Part2List\"\n        },\n        \"euDangChemAnnex1Part3List\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Eudangchemannex1Part3List\"\n        },\n        \"euDangChemAnnex5List\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Eudangchemannex5List\"\n        },\n        \"euDirectiveEcList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Eudirectiveeclist\"\n        },\n        \"euExplosivePrecursorsAnnex1List\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Euexplosiveprecursorsannex1List\"\n        },\n        \"euExplosivePrecursorsAnnex2List\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Euexplosiveprecursorsannex2List\"\n        },\n        \"euOzoneDepletionList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Euozonedepletionlist\"\n        },\n        \"euPollutantAnnex2List\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Eupollutantannex2List\"\n        },\n        \"euPopList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Eupoplist\"\n        },\n        \"exportControlListPhrases\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exportcontrollistphrases\"\n        },\n        \"greenGasList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Greengaslist\"\n        },\n        \"iecscNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Iecscnotified\"\n        },\n        \"indexNo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Indexno\"\n        },\n        \"jpencsNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Jpencsnotified\"\n        },\n        \"jpishlNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Jpishlnotified\"\n        },\n        \"koeclNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Koeclnotified\"\n        },\n        \"kyotoProtocol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Kyotoprotocol\"\n        },\n        \"massachusettsRTK\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Massachusettsrtk\"\n        },\n        \"montrealProtocol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Montrealprotocol\"\n        },\n        \"newJerseyRTK\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Newjerseyrtk\"\n        },\n        \"newYorkRTK\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Newyorkrtk\"\n        },\n        \"nziocNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Nziocnotified\"\n        },\n        \"pcrRegulated\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Pcrregulated\"\n        },\n        \"pennsylvaniaRTK\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Pennsylvaniartk\"\n        },\n        \"peroxideFunctionGroups\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Peroxidefunctiongroups\"\n        },\n        \"piccsNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Piccsnotified\"\n        },\n        \"rhodeIslandRTK\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rhodeislandrtk\"\n        },\n        \"rotterdamConvList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rotterdamconvlist\"\n        },\n        \"sdwa\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sdwa\"\n        },\n        \"source\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Source\"\n        },\n        \"specificConcentrationLimit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Specificconcentrationlimit\"\n        },\n        \"stockholmConvList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Stockholmconvlist\"\n        },\n        \"stotAffectedOrgans\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Stotaffectedorgans\"\n        },\n        \"stotRouteOfExposure\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Stotrouteofexposure\"\n        },\n        \"tcsiNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tcsinotified\"\n        },\n        \"tradeSecret\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tradesecret\"\n        },\n        \"twGHSClasList\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Twghsclaslist\"\n        },\n        \"twHandlePriorityChem\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Twhandleprioritychem\"\n        },\n        \"twHandleToxicChem\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Twhandletoxicchem\"\n        },\n        \"twIndWasteStandards\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Twindwastestandards\"\n        },\n        \"vinicNotified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Vinicnotified\"\n        },\n        \"exposureControlsOSHA\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ExposureControl\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposurecontrolsosha\"\n        },\n        \"exposureControlsAIHA\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ExposureControl\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposurecontrolsaiha\"\n        },\n        \"exposureControlsNIOSH\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ExposureControl\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposurecontrolsniosh\"\n        },\n        \"snur\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Snur\"\n        },\n        \"tsca12BConcentrationLimit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tsca12Bconcentrationlimit\"\n        },\n        \"cerclaRQ\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cerclarq\"\n        },\n        \"californiaProp65\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Californiaprop65\"\n        },\n        \"sara302\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sara302\"\n        },\n        \"sara313ConcentrationLimit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sara313Concentrationlimit\"\n        },\n        \"CFRmarinePollutant\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cfrmarinepollutant\"\n        },\n        \"CFRreportableQuantity\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cfrreportablequantity\"\n        },\n        \"rohsConcentration\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rohsconcentration\"\n        },\n        \"skinCorrosionInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/SkinCorrosionInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Skincorrosioninfo\"\n        },\n        \"seriousEyeDamageInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/SeriousEyeDamageInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Seriouseyedamageinfo\"\n        },\n        \"respiratorySkinSensInfo\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/RespiratorySkinSensInfo\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Respiratoryskinsensinfo\"\n        },\n        \"isCas\": {\n          \"default\": true,\n          \"title\": \"Iscas\",\n          \"type\": \"boolean\"\n        }\n      },\n      \"required\": [\n        \"casID\"\n      ],\n      \"title\": \"SubstanceInfo\",\n      \"type\": \"object\"\n    },\n    \"SubstanceName\": {\n      \"description\": \"SubstanceName is a Pydantic model representing the name of a substance.\\n\\nAttributes\\n----------\\nname : str | None\\n    The name of the substance.\\nlanguage_code : str | None\\n    The language code for the substance name.\\ncloaked_name : str | None\\n    The cloaked name of the substance, if applicable.\",\n      \"properties\": {\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"language_code\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Language Code\"\n        },\n        \"cloakedName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cloakedname\"\n        }\n      },\n      \"title\": \"SubstanceName\",\n      \"type\": \"object\"\n    },\n    \"ToxicityInfo\": {\n      \"description\": \"ToxicityInfo is a Pydantic model representing toxicity information.\\n\\nAttributes\\n----------\\nresult : str | None\\n    The result of the toxicity test.\\nroe : str | None\\n    The reference exposure level.\\nunit : str | None\\n    The unit of the toxicity test.\\nmethod: str | None\\n    The method of the toxicity test.\\nvalue: float | None\\n    The value of the toxicity test.\\nspecies: str | None\\n    The species of the toxicity test.\\nsex: str | None\\n    The sex of the toxicity test.\\nexposure_time: str | None\\n    The exposure time of the toxicity test.\\ntype: str | None\\n    The type of the toxicity test.\\nvalue_type: str | None\\n    The value type of the toxicity test.\\ntemperature: str | None\\n    The temperature of the toxicity test.\",\n      \"properties\": {\n        \"result\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Result\"\n        },\n        \"roe\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Roe\"\n        },\n        \"unit\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"method\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Method\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"species\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Species\"\n        },\n        \"sex\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sex\"\n        },\n        \"exposureTime\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Exposuretime\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Type\"\n        },\n        \"valueType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Valuetype\"\n        },\n        \"temperature\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Temperature\"\n        }\n      },\n      \"title\": \"ToxicityInfo\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"SubstanceResponse is a Pydantic model representing the response containing substance information.\\n\\nAttributes\\n----------\\nsubstances : list[Substance]\\n    A list of substances.\\nsubstance_errors : list[Any] | None\\n    A list of errors related to substances, if any.\",\n  \"properties\": {\n    \"substances\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/SubstanceInfo\"\n      },\n      \"title\": \"Substances\",\n      \"type\": \"array\"\n    },\n    \"substanceErrors\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"additionalProperties\": true,\n            \"type\": \"object\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Substanceerrors\"\n    }\n  },\n  \"required\": [\n    \"substances\"\n  ],\n  \"title\": \"SubstanceResponse\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>substances</code>                 (<code>list[SubstanceInfo]</code>)             </li> <li> <code>substance_errors</code>                 (<code>list[dict[str, Any]] | None</code>)             </li> </ul>"},{"location":"resources/substances/#albert.resources.substance.SubstanceResponse.substances","title":"substances","text":"<pre><code>substances: list[SubstanceInfo]\n</code></pre>"},{"location":"resources/substances/#albert.resources.substance.SubstanceResponse.substance_errors","title":"substance_errors","text":"<pre><code>substance_errors: list[dict[str, Any]] | None = None\n</code></pre>"},{"location":"resources/tags/","title":"Tags","text":""},{"location":"resources/tags/#albert.resources.tags","title":"albert.resources.tags","text":""},{"location":"resources/tags/#albert.resources.tags.TagEntity","title":"TagEntity","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>TagEntity is an enumeration of possible tag entities.</p> <p>Attributes:</p> Name Type Description <code>INVENTORY</code> <code>COMPANY</code>"},{"location":"resources/tags/#albert.resources.tags.TagEntity.INVENTORY","title":"INVENTORY","text":"<pre><code>INVENTORY = 'Inventory'\n</code></pre>"},{"location":"resources/tags/#albert.resources.tags.TagEntity.COMPANY","title":"COMPANY","text":"<pre><code>COMPANY = 'Company'\n</code></pre>"},{"location":"resources/tags/#albert.resources.tags.Tag","title":"Tag","text":"<p>               Bases: <code>BaseResource</code></p> <p>Tag is a Pydantic model representing a tag entity.</p> <p>Attributes:</p> Name Type Description <code>tag</code> <code>str</code> <p>The name of the tag.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the tag. Set when the tag is retrieved from Albert.</p> <p>Methods:</p> Name Description <code>from_string</code> <p>Creates a Tag object from a string.</p>"},{"location":"resources/tags/#albert.resources.tags.Tag.tag","title":"tag","text":"<pre><code>tag: str = Field(\n    alias=AliasChoices(\"name\", \"tagName\"),\n    serialization_alias=\"name\",\n)\n</code></pre>"},{"location":"resources/tags/#albert.resources.tags.Tag.id","title":"id","text":"<pre><code>id: str | None = Field(\n    None,\n    alias=AliasChoices(\"albertId\", \"tagId\"),\n    serialization_alias=\"albertId\",\n)\n</code></pre>"},{"location":"resources/tags/#albert.resources.tags.Tag.from_string","title":"from_string","text":"<pre><code>from_string(tag: str) -&gt; Tag\n</code></pre> <p>Creates a Tag object from a string.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>str</code> <p>The name of the tag.</p> required <p>Returns:</p> Type Description <code>Tag</code> <p>The Tag object created from the string.</p> Source code in <code>src/albert/resources/tags.py</code> <pre><code>@classmethod\ndef from_string(cls, tag: str) -&gt; \"Tag\":\n    \"\"\"\n    Creates a Tag object from a string.\n\n    Parameters\n    ----------\n    tag : str\n        The name of the tag.\n\n    Returns\n    -------\n    Tag\n        The Tag object created from the string.\n    \"\"\"\n    return cls(tag=tag)\n</code></pre>"},{"location":"resources/tags/#albert.resources.tags.BaseTaggedEntity","title":"BaseTaggedEntity","text":"<p>               Bases: <code>BaseResource</code></p> <p>BaseTaggedEntity is a Pydantic model that includes functionality for handling tags as either Tag objects or strings.</p> <p>Attributes:</p> Name Type Description <code>tags</code> <code>List[Tag | str] | None</code> <p>A list of Tag objects or strings representing tags.</p> <p>Methods:</p> Name Description <code>convert_tags</code>"},{"location":"resources/tags/#albert.resources.tags.BaseTaggedEntity.tags","title":"tags","text":"<pre><code>tags: list[SerializeAsEntityLink[Tag]] | None = Field(\n    None, alias=\"Tags\"\n)\n</code></pre>"},{"location":"resources/tags/#albert.resources.tags.BaseTaggedEntity.convert_tags","title":"convert_tags","text":"<pre><code>convert_tags(data: dict[str, Any]) -&gt; dict[str, Any]\n</code></pre> Source code in <code>src/albert/resources/tags.py</code> <pre><code>@model_validator(mode=\"before\")  # must happen before to keep type validation\n@classmethod\ndef convert_tags(cls, data: dict[str, Any]) -&gt; dict[str, Any]:\n    if not isinstance(data, dict):\n        return data\n    tags = data.get(\"tags\")\n    if not tags:\n        tags = data.get(\"Tags\")\n    if tags:\n        new_tags = []\n        for t in tags:\n            if isinstance(t, Tag):\n                new_tags.append(t)\n            elif isinstance(t, str):\n                new_tags.append(Tag.from_string(t))\n            elif isinstance(t, dict):\n                new_tags.append(Tag(**t))\n            else:\n                # We do not expect this else to be hit because tags should only be Tag or str\n                logger.warning(f\"Unexpected value for Tag. {t} of type {type(t)}\")\n                continue\n        data[\"tags\"] = new_tags\n    return data\n</code></pre>"},{"location":"resources/tasks/","title":"Tasks","text":""},{"location":"resources/tasks/#albert.resources.tasks","title":"albert.resources.tasks","text":"<p>Attributes:</p> Name Type Description <code>TaskUnion</code> <code>TaskAdapter</code>"},{"location":"resources/tasks/#albert.resources.tasks.TaskUnion","title":"TaskUnion","text":"<pre><code>TaskUnion = Annotated[\n    PropertyTask | BatchTask | GeneralTask,\n    Field(..., discriminator=\"category\"),\n]\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskAdapter","title":"TaskAdapter","text":"<pre><code>TaskAdapter = TypeAdapter(TaskUnion)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskCategory","title":"TaskCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>PROPERTY</code> <code>BATCH</code> <code>GENERAL</code> <code>BATCH_WITH_QC</code>"},{"location":"resources/tasks/#albert.resources.tasks.TaskCategory.PROPERTY","title":"PROPERTY","text":"<pre><code>PROPERTY = 'Property'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskCategory.BATCH","title":"BATCH","text":"<pre><code>BATCH = 'Batch'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskCategory.GENERAL","title":"GENERAL","text":"<pre><code>GENERAL = 'General'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskCategory.BATCH_WITH_QC","title":"BATCH_WITH_QC","text":"<pre><code>BATCH_WITH_QC = 'BatchWithQC'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchSizeUnit","title":"BatchSizeUnit","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>GRAMS</code> <code>KILOGRAMS</code> <code>POUNDS</code>"},{"location":"resources/tasks/#albert.resources.tasks.BatchSizeUnit.GRAMS","title":"GRAMS","text":"<pre><code>GRAMS = 'g'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchSizeUnit.KILOGRAMS","title":"KILOGRAMS","text":"<pre><code>KILOGRAMS = 'Kg'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchSizeUnit.POUNDS","title":"POUNDS","text":"<pre><code>POUNDS = 'lbs'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSourceType","title":"TaskSourceType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>TASK</code> <code>TEMPLATE</code>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSourceType.TASK","title":"TASK","text":"<pre><code>TASK = 'task'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSourceType.TEMPLATE","title":"TEMPLATE","text":"<pre><code>TEMPLATE = 'template'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSource","title":"TaskSource","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"TaskSourceType\": {\n      \"enum\": [\n        \"task\",\n        \"template\"\n      ],\n      \"title\": \"TaskSourceType\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"type\": {\n      \"$ref\": \"#/$defs/TaskSourceType\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"type\"\n  ],\n  \"title\": \"TaskSource\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>type</code>                 (<code>TaskSourceType</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSource.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSource.type","title":"type","text":"<pre><code>type: TaskSourceType\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskPriority","title":"TaskPriority","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>HIGH</code> <code>MEDIUM</code> <code>LOW</code>"},{"location":"resources/tasks/#albert.resources.tasks.TaskPriority.HIGH","title":"HIGH","text":"<pre><code>HIGH = 'High'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskPriority.MEDIUM","title":"MEDIUM","text":"<pre><code>MEDIUM = 'Medium'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskPriority.LOW","title":"LOW","text":"<pre><code>LOW = 'Low'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.HistoryEntity","title":"HistoryEntity","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>WORKFLOW</code>"},{"location":"resources/tasks/#albert.resources.tasks.HistoryEntity.WORKFLOW","title":"WORKFLOW","text":"<pre><code>WORKFLOW = 'workflow'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.IntervalId","title":"IntervalId","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"IntervalId\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.IntervalId.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockLevelInventoryInformation","title":"BlockLevelInventoryInformation","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"lotId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lotid\"\n    },\n    \"invLotUniqueId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Invlotuniqueid\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"BlockLevelInventoryInformation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>lot_id</code>                 (<code>str | None</code>)             </li> <li> <code>inv_lot_unique_id</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.BlockLevelInventoryInformation.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockLevelInventoryInformation.lot_id","title":"lot_id","text":"<pre><code>lot_id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockLevelInventoryInformation.inv_lot_unique_id","title":"inv_lot_unique_id","text":"<pre><code>inv_lot_unique_id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockState","title":"BlockState","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BlockLevelInventoryInformation\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"lotId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lotid\"\n        },\n        \"invLotUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Invlotuniqueid\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"BlockLevelInventoryInformation\",\n      \"type\": \"object\"\n    },\n    \"IntervalId\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"IntervalId\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"description\": \"The ID of the block.\",\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"expand\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Expand\"\n    },\n    \"Interval\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/IntervalId\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"description\": \"The IDs of the interval (e.g., id: ROW2XROW4)\",\n      \"title\": \"Interval\"\n    },\n    \"Inventory\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/BlockLevelInventoryInformation\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Inventory\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"BlockState\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>expanded</code>                 (<code>bool | None</code>)             </li> <li> <code>intervals</code>                 (<code>list[IntervalId] | None</code>)             </li> <li> <code>inventory</code>                 (<code>list[BlockLevelInventoryInformation] | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.BlockState.id","title":"id","text":"<pre><code>id: str\n</code></pre> <p>The ID of the block.</p>"},{"location":"resources/tasks/#albert.resources.tasks.BlockState.expanded","title":"expanded","text":"<pre><code>expanded: bool | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockState.intervals","title":"intervals","text":"<pre><code>intervals: list[IntervalId] | None = None\n</code></pre> <p>The IDs of the interval (e.g., id: ROW2XROW4)</p>"},{"location":"resources/tasks/#albert.resources.tasks.BlockState.inventory","title":"inventory","text":"<pre><code>inventory: list[BlockLevelInventoryInformation] | None = (\n    None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.PageState","title":"PageState","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"BlockLevelInventoryInformation\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"lotId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Lotid\"\n        },\n        \"invLotUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Invlotuniqueid\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"BlockLevelInventoryInformation\",\n      \"type\": \"object\"\n    },\n    \"BlockState\": {\n      \"properties\": {\n        \"id\": {\n          \"description\": \"The ID of the block.\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"expand\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Expand\"\n        },\n        \"Interval\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/IntervalId\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The IDs of the interval (e.g., id: ROW2XROW4)\",\n          \"title\": \"Interval\"\n        },\n        \"Inventory\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/BlockLevelInventoryInformation\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Inventory\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"BlockState\",\n      \"type\": \"object\"\n    },\n    \"IntervalId\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"IntervalId\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"leftPanelExpand\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Leftpanelexpand\"\n    },\n    \"Block\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/BlockState\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Block\"\n    }\n  },\n  \"title\": \"PageState\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>left_panel_expanded</code>                 (<code>bool | None</code>)             </li> <li> <code>blocks</code>                 (<code>list[BlockState] | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.PageState.left_panel_expanded","title":"left_panel_expanded","text":"<pre><code>left_panel_expanded: bool | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.PageState.blocks","title":"blocks","text":"<pre><code>blocks: list[BlockState] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Target","title":"Target","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"dataColumnUniqueId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Datacolumnuniqueid\"\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    }\n  },\n  \"title\": \"Target\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data_column_unique_id</code>                 (<code>str | None</code>)             </li> <li> <code>value</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.Target.data_column_unique_id","title":"data_column_unique_id","text":"<pre><code>data_column_unique_id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Target.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.DataTemplateAndTargets","title":"DataTemplateAndTargets","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Target\": {\n      \"properties\": {\n        \"dataColumnUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumnuniqueid\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Target\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"targets\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/Target\"\n      },\n      \"title\": \"Targets\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"targets\"\n  ],\n  \"title\": \"DataTemplateAndTargets\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>targets</code>                 (<code>list[Target]</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.DataTemplateAndTargets.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.DataTemplateAndTargets.targets","title":"targets","text":"<pre><code>targets: list[Target]\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Standard","title":"Standard","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"standardId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Standardid\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"standardOrganization\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Standardorganization\"\n    },\n    \"standardOrganizationId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Standardorganizationid\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"Standard\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>standard_id</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>standard_organization</code>                 (<code>str | None</code>)             </li> <li> <code>standard_organization_id</code>                 (<code>int | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.Standard.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Standard.standard_id","title":"standard_id","text":"<pre><code>standard_id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Standard.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Standard.standard_organization","title":"standard_organization","text":"<pre><code>standard_organization: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Standard.standard_organization_id","title":"standard_organization_id","text":"<pre><code>standard_organization_id: int | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockDataTemplateInfo","title":"BlockDataTemplateInfo","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"Standard\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"standardId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Standardid\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"standardOrganization\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Standardorganization\"\n        },\n        \"standardOrganizationId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Standardorganizationid\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"Standard\",\n      \"type\": \"object\"\n    },\n    \"Target\": {\n      \"properties\": {\n        \"dataColumnUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumnuniqueid\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Target\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"fullName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Fullname\"\n    },\n    \"Standards\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Standard\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"Targets\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/Target\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Targets\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"name\"\n  ],\n  \"title\": \"BlockDataTemplateInfo\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>full_name</code>                 (<code>str | None</code>)             </li> <li> <code>standards</code>                 (<code>Standard | None</code>)             </li> <li> <code>targets</code>                 (<code>list[Target] | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.BlockDataTemplateInfo.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockDataTemplateInfo.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockDataTemplateInfo.full_name","title":"full_name","text":"<pre><code>full_name: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockDataTemplateInfo.standards","title":"standards","text":"<pre><code>standards: Standard | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BlockDataTemplateInfo.targets","title":"targets","text":"<pre><code>targets: list[Target] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskState","title":"TaskState","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>UNCLAIMED</code> <code>NOT_STARTED</code> <code>IN_PROGRESS</code> <code>COMPLETED</code> <code>CLOSED</code> <code>CANCELLED</code>"},{"location":"resources/tasks/#albert.resources.tasks.TaskState.UNCLAIMED","title":"UNCLAIMED","text":"<pre><code>UNCLAIMED = 'Unclaimed'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskState.NOT_STARTED","title":"NOT_STARTED","text":"<pre><code>NOT_STARTED = 'Not Started'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskState.IN_PROGRESS","title":"IN_PROGRESS","text":"<pre><code>IN_PROGRESS = 'In Progress'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskState.COMPLETED","title":"COMPLETED","text":"<pre><code>COMPLETED = 'Completed'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskState.CLOSED","title":"CLOSED","text":"<pre><code>CLOSED = 'Closed'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskState.CANCELLED","title":"CANCELLED","text":"<pre><code>CANCELLED = 'Cancelled'\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskInventoryInformation","title":"TaskInventoryInformation","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>Represents the Inventory information needed for a task. For a Batch task, inventory_id and batch_size are required. For Property and general tasks, inventory_id and lot_id is recomended is required.</p> <p>Attributes:</p> Name Type Description <code>inventory_id</code> <code>str</code> <p>The inventory id of the item to be used in the task.</p> <code>lot_id</code> <code>(str, optional)</code> <p>The lot id of the item to be used in the task. Reccomended for Property and General tasks.</p> <code>lot_number</code> <code>(str, optional)</code> <p>The lot number of the item to be used in the task. Optional.</p> <code>batch_size</code> <code>float, Required for Batch tasks, otherwise optional.</code> <p>The batch size to make of the related InventoryItem. Required for Batch tasks.</p> <code>selected_lot</code> <code>bool, read only</code> <p>Whether the lot is selected for the task. Default is None.</p> Show JSON schema: <pre><code>{\n  \"description\": \"Represents the Inventory information needed for a task. For a Batch task, inventory_id and batch_size are required.\\nFor Property and general tasks, inventory_id and lot_id is recomended is required.\\n\\nAttributes\\n----------\\ninventory_id : str\\n    The inventory id of the item to be used in the task.\\nlot_id : str, optional\\n    The lot id of the item to be used in the task. Reccomended for Property and General tasks.\\nlot_number : str, optional\\n    The lot number of the item to be used in the task. Optional.\\nbatch_size : float, Required for Batch tasks, otherwise optional.\\n    The batch size to make of the related InventoryItem. Required for Batch tasks.\\nselected_lot : bool, read only\\n    Whether the lot is selected for the task. Default is None.\",\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"lotId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lotid\"\n    },\n    \"lotNumber\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lotnumber\"\n    },\n    \"invLotUniqueId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Invlotuniqueid\"\n    },\n    \"batchSize\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Batchsize\"\n    },\n    \"selectedLot\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Selectedlot\"\n    },\n    \"barcodeId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Barcodeid\"\n    },\n    \"quantityUsed\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Quantityused\"\n    }\n  },\n  \"required\": [\n    \"id\"\n  ],\n  \"title\": \"TaskInventoryInformation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>inventory_id</code>                 (<code>InventoryId</code>)             </li> <li> <code>lot_id</code>                 (<code>LotId | None</code>)             </li> <li> <code>lot_number</code>                 (<code>str | None</code>)             </li> <li> <code>inv_lot_unique_id</code>                 (<code>str | None</code>)             </li> <li> <code>batch_size</code>                 (<code>float | None</code>)             </li> <li> <code>selected_lot</code>                 (<code>bool | None</code>)             </li> <li> <code>barcode_id</code>                 (<code>str | None</code>)             </li> <li> <code>quantity_used</code>                 (<code>float | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskInventoryInformation.inventory_id","title":"inventory_id","text":"<pre><code>inventory_id: InventoryId\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskInventoryInformation.lot_id","title":"lot_id","text":"<pre><code>lot_id: LotId | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskInventoryInformation.lot_number","title":"lot_number","text":"<pre><code>lot_number: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskInventoryInformation.inv_lot_unique_id","title":"inv_lot_unique_id","text":"<pre><code>inv_lot_unique_id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskInventoryInformation.batch_size","title":"batch_size","text":"<pre><code>batch_size: float | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskInventoryInformation.barcode_id","title":"barcode_id","text":"<pre><code>barcode_id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskInventoryInformation.quantity_used","title":"quantity_used","text":"<pre><code>quantity_used: float | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskInventoryInformation.selected_lot","title":"selected_lot","text":"<pre><code>selected_lot: bool | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Block","title":"Block","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ACL\": {\n      \"description\": \"The Access Control List (ACL) for a user\",\n      \"properties\": {\n        \"id\": {\n          \"description\": \"The id of the user for which this ACL applies\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"fgc\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AccessControlLevel\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The Fine-Grain Control Level\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"ACL\",\n      \"type\": \"object\"\n    },\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    },\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"BlockDataTemplateInfo\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"fullName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Fullname\"\n        },\n        \"Standards\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Standard\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Targets\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Target\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Targets\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"name\"\n      ],\n      \"title\": \"BlockDataTemplateInfo\",\n      \"type\": \"object\"\n    },\n    \"Cas\": {\n      \"description\": \"Represents a CAS entity.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"number\": {\n          \"description\": \"The CAS number.\",\n          \"title\": \"Number\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Name of the CAS.\",\n          \"title\": \"Name\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The description or name of the CAS.\",\n          \"title\": \"Description\"\n        },\n        \"notes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Notes related to the CAS.\",\n          \"title\": \"Notes\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CasCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The category of the CAS.\"\n        },\n        \"casSmiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS SMILES notation.\",\n          \"title\": \"Cassmiles\"\n        },\n        \"inchiKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"InChIKey of the CAS.\",\n          \"title\": \"Inchikey\"\n        },\n        \"iUpacName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"IUPAC name of the CAS.\",\n          \"title\": \"Iupacname\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The AlbertID of the CAS.\",\n          \"title\": \"Albertid\"\n        },\n        \"hazards\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Hazard\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazards associated with the CAS.\",\n          \"title\": \"Hazards\"\n        },\n        \"wgk\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"German Water Hazard Class (WGK) number.\",\n          \"title\": \"Wgk\"\n        },\n        \"ecListNo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"European Community (EC) number.\",\n          \"title\": \"Eclistno\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Type of the CAS.\",\n          \"title\": \"Type\"\n        },\n        \"classificationType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Classification type of the CAS.\",\n          \"title\": \"Classificationtype\"\n        },\n        \"order\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS order.\",\n          \"title\": \"Order\"\n        },\n        \"Metadata\": {\n          \"additionalProperties\": {\n            \"anyOf\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              },\n              {\n                \"items\": {\n                  \"$ref\": \"#/$defs/EntityLink\"\n                },\n                \"type\": \"array\"\n              }\n            ]\n          },\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        }\n      },\n      \"required\": [\n        \"number\"\n      ],\n      \"title\": \"Cas\",\n      \"type\": \"object\"\n    },\n    \"CasAmount\": {\n      \"description\": \"CasAmount is a Pydantic model representing an amount of a given CAS.\\n\\nAttributes\\n----------\\nmin : float\\n    The minimum amount of the CAS in the formulation.\\nmax : float\\n    The maximum amount of the CAS in the formulation.\\ntarget: float | None\\n    The inventory value or target of the CAS in the formulation.\\nid : str | None\\n    The Albert ID of the CAS Number Resource this amount represents. Provide either a Cas or an ID.\\ncas : Cas | None\\n    The CAS object associated with this amount. Provide either a Cas or an id.\\ncas_smiles: str | None\\n    The SMILES string of the CAS Number resource. Obtained from the Cas object when provided.\\nnumber: str | None\\n    The CAS number. Obtained from the Cas object when provided.\",\n      \"properties\": {\n        \"min\": {\n          \"title\": \"Min\",\n          \"type\": \"number\"\n        },\n        \"max\": {\n          \"title\": \"Max\",\n          \"type\": \"number\"\n        },\n        \"inventoryValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Inventoryvalue\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"casCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cascategory\"\n        },\n        \"cas\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Cas\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"casSmiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cassmiles\"\n        },\n        \"number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Number\"\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CasAuditFieldsWithEmail\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"min\",\n        \"max\"\n      ],\n      \"title\": \"CasAmount\",\n      \"type\": \"object\"\n    },\n    \"CasAuditFieldsWithEmail\": {\n      \"description\": \"The audit fields for a CAS resource with email\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        },\n        \"email\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Email\"\n        }\n      },\n      \"title\": \"CasAuditFieldsWithEmail\",\n      \"type\": \"object\"\n    },\n    \"CasCategory\": {\n      \"enum\": [\n        \"User\",\n        \"Verisk\",\n        \"TSCA - Public\",\n        \"TSCA - Private\",\n        \"not TSCA\",\n        \"CAS linked to External Database\",\n        \"Unknown (Trade Secret)\",\n        \"CL_Inventory Upload\"\n      ],\n      \"title\": \"CasCategory\",\n      \"type\": \"string\"\n    },\n    \"Company\": {\n      \"description\": \"Company is a Pydantic model representing a company entity.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the company.\\nid : str | None\\n    The Albert ID of the company. Set when the company is retrieved from Albert.\\ndistance : float | None\\n    The scores of a company in a search result, optional. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"distance\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Distance\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Company\",\n      \"type\": \"object\"\n    },\n    \"DataColumn\": {\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"defalt\": {\n          \"default\": false,\n          \"title\": \"Defalt\",\n          \"type\": \"boolean\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"albertId\": {\n          \"default\": null,\n          \"title\": \"Albertid\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"DataColumn\",\n      \"type\": \"object\"\n    },\n    \"DataColumnValue\": {\n      \"properties\": {\n        \"data_column\": {\n          \"$ref\": \"#/$defs/DataColumn\",\n          \"default\": null\n        },\n        \"id\": {\n          \"default\": null,\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"hidden\": {\n          \"default\": false,\n          \"title\": \"Hidden\",\n          \"type\": \"boolean\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"calculation\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Calculation\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"validation\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ValueValidation\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Validation\"\n        }\n      },\n      \"title\": \"DataColumnValue\",\n      \"type\": \"object\"\n    },\n    \"DataTemplate\": {\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Tags\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/Tag\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tags\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"security_class\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SecurityClass\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"default\": false,\n          \"title\": \"Verified\",\n          \"type\": \"boolean\"\n        },\n        \"ACL\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/User\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Acl\"\n        },\n        \"DataColumns\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/DataColumnValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumns\"\n        },\n        \"Parameters\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ParameterValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parameters\"\n        },\n        \"DeletedParameters\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ParameterValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Deletedparameters\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"DataTemplate\",\n      \"type\": \"object\"\n    },\n    \"DataTemplateAndTargets\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"targets\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/Target\"\n          },\n          \"title\": \"Targets\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"targets\"\n      ],\n      \"title\": \"DataTemplateAndTargets\",\n      \"type\": \"object\"\n    },\n    \"DataType\": {\n      \"enum\": [\n        \"number\",\n        \"string\",\n        \"enum\"\n      ],\n      \"title\": \"DataType\",\n      \"type\": \"string\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"EnumValidationValue\": {\n      \"description\": \"Represents a value for an enum type validation.\\n\\nAttributes\\n----------\\ntext : str\\n    The text of the enum value.\\nid : str | None\\n    The ID of the enum value. If not provided, the ID will be generated upon creation.\",\n      \"properties\": {\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"originalText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originaltext\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ],\n      \"title\": \"EnumValidationValue\",\n      \"type\": \"object\"\n    },\n    \"Hazard\": {\n      \"description\": \"Represents a chemical hazard.\",\n      \"properties\": {\n        \"subCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard subcategory\",\n          \"title\": \"Subcategory\"\n        },\n        \"hCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code\",\n          \"title\": \"Hcode\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard category\",\n          \"title\": \"Category\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard classification\",\n          \"title\": \"Class\"\n        },\n        \"hCodeText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code text\",\n          \"title\": \"Hcodetext\"\n        }\n      },\n      \"title\": \"Hazard\",\n      \"type\": \"object\"\n    },\n    \"Interval\": {\n      \"description\": \"A Pydantic class representing an interval.\\n\\nAttrubutes\\n----------\\nvalue : str\\n    The value of the interval setpoint.\\nunit : Unit\\n    The unit of the related value.\",\n      \"properties\": {\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        }\n      },\n      \"title\": \"Interval\",\n      \"type\": \"object\"\n    },\n    \"IntervalCombination\": {\n      \"description\": \"A class representing the interval combinations of on a workflow.\\nThis is returned by the workflow endpoint when at least one parameter\\nin the workflow has been intervalized.\\n\\nInterval Combinations can be single intervalized parameters or cartesian prodcuts of\\ntwo intervalized parameters.\\n\\nAttributes\\n----------\\ninterval_id: IntervalId | None\\n    forign key reference to the interval id\\n    this combination is associated with\\n    It will have the form ROW# or ROW#XROW# depending on\\n    if it is a single interval or a product of two intervals\\ninterval_params: str | None\\n    The parameters participating in the interval.\\ninterval_string: str | None\\n    The string representation of the interval combination\\n    This will have the form \\\"[Parameter Name]: [Parameter Value] [Parameter Unit]\\\"\\n    for each parameter in the interval combination\",\n      \"properties\": {\n        \"interval\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Interval\"\n        },\n        \"intervalParams\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Intervalparams\"\n        },\n        \"intervalString\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Intervalstring\"\n        }\n      },\n      \"title\": \"IntervalCombination\",\n      \"type\": \"object\"\n    },\n    \"InventoryCategory\": {\n      \"enum\": [\n        \"RawMaterials\",\n        \"Consumables\",\n        \"Equipment\",\n        \"Formulas\"\n      ],\n      \"title\": \"InventoryCategory\",\n      \"type\": \"string\"\n    },\n    \"InventoryItem\": {\n      \"description\": \"An InventoryItem is a Pydantic model representing an item in the inventory. Can be a raw material, consumable, equipment, or formula.\\nNote: Formulas should be registered via the Worksheet collection / Sheet resource.\\n\\nReturns\\n-------\\nInventoryItem\\n    An InventoryItem that can be used to represent an item in the inventory. Can be a raw material, consumable, equipment, or formula.\\n\\nAttributes\\n------\\n\\nname : str\\n    The name of the InventoryItem.\\nid : str | None\\n    The Albert ID of the InventoryItem. Set when the InventoryItem is retrieved from Albert.\\ndescription : str | None\\n    The description of the InventoryItem.\\ncategory : InventoryCategory\\n    The category of the InventoryItem. Allowed values are `RawMaterials`, `Consumables`, `Equipment`, and `Formulas`.\\nunit_category : InventoryUnitCategory\\n    The unit category of the InventoryItem. Can be mass, volume, length, pressure, or units. By default, mass is used for RawMaterials and Formulas, and units is used for Equipment and Consumables.\\nsecurity_class : SecurityClass | None\\n    The security class of the InventoryItem. Optional. Can be confidential, shared, or restricted.\\ncompany : Company | str | None\\n    The company associated with the InventoryItem. Can be a Company object or a string. If a String is provided, a Company object with the name of the provided string will be first-or-created.\\nminimum : list[InventoryMinimum] | None\\n    The minimum amount of the InventoryItem that must be kept in stock at a given Location. Optional.\\nalias : str | None\\n    An alias for the InventoryItem. Optional.\\ncas : list[CasAmount] | None\\n    The CAS numbers associated with the InventoryItem. This is how a compositional breakdown can be provided. Optional.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\\n    Metadata associated with the InventoryItem. Optional. Allowed metadata fields can be found in the CustomFields documentation.\\nproject_id : str | None\\n    The project ID associated with the InventoryItem. Read Only. Required for Formulas.\\nformula_id : str | None\\n    The formula ID associated with the InventoryItem. Read Only.\\ntags : list[str|Tag] | None\\n    The tags associated with the InventoryItem. Optional. If a string is provided, a Tag object with the name of the provided string will be first-or-created.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Tags\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/Tag\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tags\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"category\": {\n          \"$ref\": \"#/$defs/InventoryCategory\"\n        },\n        \"unitCategory\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/InventoryUnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SecurityClass\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Company\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Company\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Company\"\n        },\n        \"minimum\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/InventoryMinimum\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minimum\"\n        },\n        \"alias\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Alias\"\n        },\n        \"Cas\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/CasAmount\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cas\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"parentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentid\"\n        },\n        \"ACL\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ACL\"\n          },\n          \"title\": \"Acl\",\n          \"type\": \"array\"\n        },\n        \"TaskConfig\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"additionalProperties\": true,\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Taskconfig\"\n        },\n        \"formulaId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Formulaid\"\n        },\n        \"Symbols\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"additionalProperties\": true,\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbols\"\n        },\n        \"unNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unnumber\"\n        },\n        \"recentAttachmentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Recentattachmentid\"\n        }\n      },\n      \"required\": [\n        \"category\"\n      ],\n      \"title\": \"InventoryItem\",\n      \"type\": \"object\"\n    },\n    \"InventoryMinimum\": {\n      \"description\": \"Defined the minimum amount of an InventoryItem that must be kept in stock at a given Location.\\n\\nAttributes\\n----------\\nid : str\\n    The unique identifier of the Location object associated with this InventoryMinimum.\\n    Provide either a Location or a location id.\\nlocation : Location\\n    The Location object associated with this InventoryMinimum. Provide either a Location or a location id.\\nminimum : float\\n    The minimum amount of the InventoryItem that must be kept in stock at the given Location.\",\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"minimum\": {\n          \"maximum\": 1000000000000000,\n          \"minimum\": 0,\n          \"title\": \"Minimum\",\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"minimum\"\n      ],\n      \"title\": \"InventoryMinimum\",\n      \"type\": \"object\"\n    },\n    \"InventoryUnitCategory\": {\n      \"enum\": [\n        \"mass\",\n        \"volume\",\n        \"length\",\n        \"pressure\",\n        \"units\"\n      ],\n      \"title\": \"InventoryUnitCategory\",\n      \"type\": \"string\"\n    },\n    \"Location\": {\n      \"description\": \"A location in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the location.\\nid : str | None\\n    The Albert ID of the location. Set when the location is retrieved from Albert.\\nlatitude : float\\n    The latitude of the location.\\nlongitude : float\\n    The longitude of the location.\\naddress : str\\n    The address of the location.\\ncountry : str | None\\n    The country code of the location. Must be two characters long.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"latitude\": {\n          \"title\": \"Latitude\",\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"title\": \"Longitude\",\n          \"type\": \"number\"\n        },\n        \"address\": {\n          \"title\": \"Address\",\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"anyOf\": [\n            {\n              \"maxLength\": 2,\n              \"minLength\": 2,\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Country\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"latitude\",\n        \"longitude\",\n        \"address\"\n      ],\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Operator\": {\n      \"enum\": [\n        \"between\",\n        \"lt\",\n        \"lte\",\n        \"gte\",\n        \"gt\",\n        \"eq\"\n      ],\n      \"title\": \"Operator\",\n      \"type\": \"string\"\n    },\n    \"PGType\": {\n      \"description\": \"The type of a parameter group\",\n      \"enum\": [\n        \"general\",\n        \"batch\",\n        \"property\"\n      ],\n      \"title\": \"PGType\",\n      \"type\": \"string\"\n    },\n    \"Parameter\": {\n      \"description\": \"A parameter in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the parameter. Names must be unique.\\nid : str | None\\n    The Albert ID of the parameter. Set when the parameter is retrieved from Albert.\\ncategory : ParameterCategory\\n    The category of the parameter. Allowed values are `Normal` and `Special`. Read-only.\\nrank : int\\n    The rank of the returned parameter. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"rank\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rank\"\n        },\n        \"required\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Required\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Parameter\",\n      \"type\": \"object\"\n    },\n    \"ParameterCategory\": {\n      \"description\": \"The category of a parameter\",\n      \"enum\": [\n        \"Normal\",\n        \"Special\"\n      ],\n      \"title\": \"ParameterCategory\",\n      \"type\": \"string\"\n    },\n    \"ParameterGroup\": {\n      \"description\": \"Use 'Standards' key in metadata to store standards\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Tags\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/Tag\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tags\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/PGType\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"class\": {\n          \"$ref\": \"#/$defs/SecurityClass\",\n          \"default\": \"restricted\"\n        },\n        \"ACL\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/User\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Acl\"\n        },\n        \"Metadata\": {\n          \"additionalProperties\": {\n            \"anyOf\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              },\n              {\n                \"items\": {\n                  \"$ref\": \"#/$defs/EntityLink\"\n                },\n                \"type\": \"array\"\n              }\n            ]\n          },\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        },\n        \"Parameters\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ParameterValue\"\n          },\n          \"title\": \"Parameters\",\n          \"type\": \"array\"\n        },\n        \"verified\": {\n          \"default\": false,\n          \"title\": \"Verified\",\n          \"type\": \"boolean\"\n        },\n        \"documents\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/EntityLink\"\n          },\n          \"title\": \"Documents\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"ParameterGroup\",\n      \"type\": \"object\"\n    },\n    \"ParameterGroupSetpoints\": {\n      \"description\": \"A class that represents the setpoints on a parameter group.\\n\\n\\nAttributes\\n----------\\nparameter_group : ParameterGroup\\n    The parameter group to set the setpoints on. Provide either a parameter_group or a paramerter_group_id\\nparameter_group_id : ParameterGroupId\\n    The id of the parameter group.  Provide either a parameter_group or a paramerter_group_id\\nparameter_group_name : str\\n    The name of the parameter group. This is a read-only field.\\nparameter_setpoints : list[ParameterSetpoint]\\n    The setpoints to apply to the parameter group.\",\n      \"properties\": {\n        \"parameter_group\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterGroup\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"default\": \"Pre-linked Parameters\",\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"Parameters\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ParameterSetpoint\"\n          },\n          \"title\": \"Parameters\",\n          \"type\": \"array\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        },\n        \"prgSequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Prgsequence\"\n        }\n      },\n      \"title\": \"ParameterGroupSetpoints\",\n      \"type\": \"object\"\n    },\n    \"ParameterSetpoint\": {\n      \"description\": \"A Pydantic class representing the setpoint or intervals of a parameter to use.\\nFor a single value, provide the value and unit. For multiple values, provide intervals.\\na parameter or parameter_id must be provided.\\n\\nAttributes\\n----------\\nparameter : Parameter\\n    The parameter to set the setpoint on. Provide either a parameter or a parameter_id.\\nparameter_id : ParameterId\\n    The id of the parameter. Provide either a parameter or a parameter_id.\\nvalue : str | EntityLink\\n    The value of the setpoint. If the parameter is a InventoryItem, provide the EntityLink of the InventoryItem.\\nunit : Unit\\n    The unit of the setpoint.\\nintervals : list[Interval]\\n    The intervals of the setpoint. Either the intervals or value + unit\\ncategory : ParameterCategory\\n    The category of the parameter. Special for InventoryItem (then use name to specify \\\"Equipment\\\", \\\"Consumeable\\\", etc), normal for all others\\nshort_name : str\\n    The short / display name of the parameter. Required if value is a dictionary.\\nrow_id : RowId\\n    The id of the parameter with respect to the interval row id.\",\n      \"properties\": {\n        \"parameter\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Parameter\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"Intervals\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Interval\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Intervals\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"shortName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Shortname\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        },\n        \"prgPrmRowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Prgprmrowid\"\n        }\n      },\n      \"title\": \"ParameterSetpoint\",\n      \"type\": \"object\"\n    },\n    \"ParameterValue\": {\n      \"description\": \"The value of a parameter in a parameter group.\\n\\nAttributes\\n----------\\nparameter : Parameter | None\\n    The Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.\\nid : str | None\\n    The Albert ID of the Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.\\ncategory: ParameterCategory\\n    The category of the parameter.\\nshort_name : str | None\\n    The short name of the parameter value.\\nvalue : str | None\\n    The default value of the parameter. Can be a string or an InventoryItem (if, for example, the parameter is an instrumnt choice).\\nunit : Unit | None\\n    The unit of measure for the provided parameter value.\\nname : str\\n    The name of the parameter. Read-only.\\nsequence : int\\n    The sequence of the parameter. Read-only.\",\n      \"properties\": {\n        \"parameter\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Parameter\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"shortName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Shortname\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"$ref\": \"#/$defs/InventoryItem\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"Added\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"validation\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ValueValidation\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Validation\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"originalShortName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originalshortname\"\n        },\n        \"originalName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originalname\"\n        }\n      },\n      \"title\": \"ParameterValue\",\n      \"type\": \"object\"\n    },\n    \"Role\": {\n      \"description\": \"A role in Albert. Note: Roles are not currently creatable via the SDK.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the role.\\nid : str\\n    The Albert ID of the role. Set when the role is retrieved from Albert.\\npolicies : list[Any] | None\\n    The policies associated with the role.\\ntenant : str\\n    The tenant ID of the role.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"policies\": {\n          \"anyOf\": [\n            {\n              \"items\": {},\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Policies\"\n        },\n        \"tenant\": {\n          \"title\": \"Tenant\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"tenant\"\n      ],\n      \"title\": \"Role\",\n      \"type\": \"object\"\n    },\n    \"SecurityClass\": {\n      \"description\": \"The security class of a resource\",\n      \"enum\": [\n        \"shared\",\n        \"restricted\",\n        \"confidential\",\n        \"private\"\n      ],\n      \"title\": \"SecurityClass\",\n      \"type\": \"string\"\n    },\n    \"Standard\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"standardId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Standardid\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"standardOrganization\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Standardorganization\"\n        },\n        \"standardOrganizationId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Standardorganizationid\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"Standard\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Tag\": {\n      \"description\": \"Tag is a Pydantic model representing a tag entity.\\n\\nAttributes\\n----------\\ntag : str\\n    The name of the tag.\\nid : str | None\\n    The Albert ID of the tag. Set when the tag is retrieved from Albert.\\n\\nMethods\\n-------\\nfrom_string(tag: str) -&gt; \\\"Tag\\\"\\n    Creates a Tag object from a string.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Tag\",\n      \"type\": \"object\"\n    },\n    \"Target\": {\n      \"properties\": {\n        \"dataColumnUniqueId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Datacolumnuniqueid\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        }\n      },\n      \"title\": \"Target\",\n      \"type\": \"object\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    },\n    \"User\": {\n      \"description\": \"Represents a User on the Albert Platform\\n\\nAttributes\\n----------\\nname : str\\n    The name of the user.\\nid : str | None\\n    The Albert ID of the user. Set when the user is retrieved from Albert.\\nlocation : Location | None\\n    The location of the user.\\nemail : EmailStr | None\\n    The email of the user.\\nroles : list[Role]\\n    The roles of the user.\\nuser_class : UserClass\\n    The ACL class level of the user.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Location\"\n        },\n        \"email\": {\n          \"default\": null,\n          \"format\": \"email\",\n          \"title\": \"Email\",\n          \"type\": \"string\"\n        },\n        \"Roles\": {\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/$defs/Role\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              }\n            ]\n          },\n          \"maxItems\": 1,\n          \"title\": \"Roles\",\n          \"type\": \"array\"\n        },\n        \"userClass\": {\n          \"$ref\": \"#/$defs/UserClass\",\n          \"default\": \"standard\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"User\",\n      \"type\": \"object\"\n    },\n    \"UserClass\": {\n      \"description\": \"The ACL class level of the user\",\n      \"enum\": [\n        \"guest\",\n        \"standard\",\n        \"trusted\",\n        \"privileged\",\n        \"admin\"\n      ],\n      \"title\": \"UserClass\",\n      \"type\": \"string\"\n    },\n    \"ValueValidation\": {\n      \"properties\": {\n        \"datatype\": {\n          \"$ref\": \"#/$defs/DataType\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/EnumValidationValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Min\"\n        },\n        \"max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max\"\n        },\n        \"operator\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Operator\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"datatype\"\n      ],\n      \"title\": \"ValueValidation\",\n      \"type\": \"object\"\n    },\n    \"Workflow\": {\n      \"description\": \"A Pydantic Class representing a workflow in Albert.\\n\\nWorkflows are combinations of Data Templates and Parameter groups and their associated setpoints.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the workflow.\\nparameter_group_setpoints : list[ParameterGroupSetpoints]\\n    The setpoints to apply to the parameter groups in the workflow.\\nid : str | None\\n    The AlbertID of the workflow. This is set when a workflow is retrived from the platform.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"ParameterGroups\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ParameterGroupSetpoints\"\n          },\n          \"title\": \"Parametergroups\",\n          \"type\": \"array\"\n        },\n        \"IntervalCombinations\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/IntervalCombination\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Intervalcombinations\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"blockMapping\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Blockmapping\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"ParameterGroups\"\n      ],\n      \"title\": \"Workflow\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"Workflow\": {\n      \"items\": {\n        \"anyOf\": [\n          {\n            \"$ref\": \"#/$defs/Workflow\"\n          },\n          {\n            \"$ref\": \"#/$defs/EntityLink\"\n          }\n        ]\n      },\n      \"minItems\": 1,\n      \"title\": \"Workflow\",\n      \"type\": \"array\"\n    },\n    \"Datatemplate\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/BlockDataTemplateInfo\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"$ref\": \"#/$defs/DataTemplateAndTargets\"\n        },\n        {\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/$defs/DataTemplate\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              }\n            ]\n          },\n          \"type\": \"array\"\n        }\n      ],\n      \"maxLength\": 1,\n      \"minLength\": 1,\n      \"title\": \"Datatemplate\"\n    },\n    \"parameterQuantityUsed\": {\n      \"anyOf\": [\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Parameterquantityused\"\n    }\n  },\n  \"required\": [\n    \"Workflow\",\n    \"Datatemplate\"\n  ],\n  \"title\": \"Block\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>workflow</code>                 (<code>list[SerializeAsEntityLink[Workflow]]</code>)             </li> <li> <code>data_template</code>                 (<code>list[BlockDataTemplateInfo] | DataTemplateAndTargets | list[SerializeAsEntityLink[DataTemplate]]</code>)             </li> <li> <code>parameter_quantity_used</code>                 (<code>dict | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.Block.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Block.workflow","title":"workflow","text":"<pre><code>workflow: list[SerializeAsEntityLink[Workflow]]\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Block.data_template","title":"data_template","text":"<pre><code>data_template: (\n    list[BlockDataTemplateInfo]\n    | DataTemplateAndTargets\n    | list[SerializeAsEntityLink[DataTemplate]]\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Block.parameter_quantity_used","title":"parameter_quantity_used","text":"<pre><code>parameter_quantity_used: dict | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.Block.model_dump","title":"model_dump","text":"<pre><code>model_dump(*args, **kwargs)\n</code></pre> Source code in <code>src/albert/resources/tasks.py</code> <pre><code>def model_dump(self, *args, **kwargs):\n    # Use default serialization with customized field output.\n    # Workflow and DataTemplate are both lists of length one, which is annoying to\n    data = super().model_dump(*args, **kwargs)\n    data[\"Workflow\"] = [data[\"Workflow\"]] if \"Workflow\" in data else None\n    data[\"Datatemplate\"] = [data[\"Datatemplate\"]] if \"Datatemplate\" in data else None\n    return data\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.QCTarget","title":"QCTarget","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"formulaId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Formulaid\"\n    },\n    \"target\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Target\"\n    }\n  },\n  \"title\": \"QCTarget\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>formula_id</code>                 (<code>str | None</code>)             </li> <li> <code>target</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.QCTarget.formula_id","title":"formula_id","text":"<pre><code>formula_id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.QCTarget.target","title":"target","text":"<pre><code>target: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.QCWorkflowTargets","title":"QCWorkflowTargets","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"QCTarget\": {\n      \"properties\": {\n        \"formulaId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Formulaid\"\n        },\n        \"target\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Target\"\n        }\n      },\n      \"title\": \"QCTarget\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"taskName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Taskname\"\n    },\n    \"Targets\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/QCTarget\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Targets\"\n    }\n  },\n  \"title\": \"QCWorkflowTargets\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>workflow_id</code>                 (<code>str | None</code>)             </li> <li> <code>task_name</code>                 (<code>str | None</code>)             </li> <li> <code>targets</code>                 (<code>list[QCTarget] | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.QCWorkflowTargets.workflow_id","title":"workflow_id","text":"<pre><code>workflow_id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.QCWorkflowTargets.task_name","title":"task_name","text":"<pre><code>task_name: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.QCWorkflowTargets.targets","title":"targets","text":"<pre><code>targets: list[QCTarget] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.QCTaskData","title":"QCTaskData","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"QCTarget\": {\n      \"properties\": {\n        \"formulaId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Formulaid\"\n        },\n        \"target\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Target\"\n        }\n      },\n      \"title\": \"QCTarget\",\n      \"type\": \"object\"\n    },\n    \"QCWorkflowTargets\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"taskName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Taskname\"\n        },\n        \"Targets\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/QCTarget\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Targets\"\n        }\n      },\n      \"title\": \"QCWorkflowTargets\",\n      \"type\": \"object\"\n    }\n  },\n  \"properties\": {\n    \"datatemplateId\": {\n      \"title\": \"Datatemplateid\",\n      \"type\": \"string\"\n    },\n    \"Workflows\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/QCWorkflowTargets\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Workflows\"\n    }\n  },\n  \"required\": [\n    \"datatemplateId\"\n  ],\n  \"title\": \"QCTaskData\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>data_template_id</code>                 (<code>str</code>)             </li> <li> <code>workflows</code>                 (<code>list[QCWorkflowTargets] | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.QCTaskData.data_template_id","title":"data_template_id","text":"<pre><code>data_template_id: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.QCTaskData.workflows","title":"workflows","text":"<pre><code>workflows: list[QCWorkflowTargets] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask","title":"BaseTask","text":"<p>               Bases: <code>BaseTaggedResource</code></p> <p>Base class for all task types. Use PropertyTask, BatchTask, or GeneralTask for specific task types.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str | None</code> <code>name</code> <code>str</code> <code>category</code> <code>TaskCategory</code> <code>parent_id</code> <code>str | None</code> <code>metadata</code> <code>dict[str, MetadataItem]</code> <code>sources</code> <code>list[TaskSource] | None</code> <code>inventory_information</code> <code>list[TaskInventoryInformation]</code> <code>location</code> <code>SerializeAsEntityLink[Location] | None</code> <code>priority</code> <code>TaskPriority | None</code> <code>security_class</code> <code>SecurityClass | None</code> <code>pass_fail</code> <code>bool | None</code> <code>notes</code> <code>str | None</code> <code>start_date</code> <code>str | None</code> <code>due_date</code> <code>str | None</code> <code>claimed_date</code> <code>str | None</code> <code>completed_date</code> <code>str | None</code> <code>closed_date</code> <code>str | None</code> <code>result</code> <code>str | None</code> <code>state</code> <code>TaskState | None</code> <code>project</code> <code>SerializeAsEntityLink[Project] | list[SerializeAsEntityLink[Project]] | None</code> <code>assigned_to</code> <code>SerializeAsEntityLinkWithName[User] | None</code> <code>page_state</code> <code>PageState | None</code>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.id","title":"id","text":"<pre><code>id: str | None = Field(alias='albertId', default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.category","title":"category","text":"<pre><code>category: TaskCategory\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.parent_id","title":"parent_id","text":"<pre><code>parent_id: str | None = Field(\n    alias=\"parentId\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] = Field(\n    alias=\"Metadata\", default_factory=dict\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.sources","title":"sources","text":"<pre><code>sources: list[TaskSource] | None = Field(\n    default_factory=list, alias=\"Sources\"\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.inventory_information","title":"inventory_information","text":"<pre><code>inventory_information: list[TaskInventoryInformation] = (\n    Field(alias=\"Inventories\", default=None)\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.location","title":"location","text":"<pre><code>location: SerializeAsEntityLink[Location] | None = Field(\n    default=None, alias=\"Location\"\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.priority","title":"priority","text":"<pre><code>priority: TaskPriority | None = Field(default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.security_class","title":"security_class","text":"<pre><code>security_class: SecurityClass | None = Field(\n    alias=\"class\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.pass_fail","title":"pass_fail","text":"<pre><code>pass_fail: bool | None = Field(\n    alias=\"passOrFail\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.notes","title":"notes","text":"<pre><code>notes: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.start_date","title":"start_date","text":"<pre><code>start_date: str | None = Field(\n    alias=\"startDate\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.due_date","title":"due_date","text":"<pre><code>due_date: str | None = Field(alias='dueDate', default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.claimed_date","title":"claimed_date","text":"<pre><code>claimed_date: str | None = Field(\n    alias=\"claimedDate\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.completed_date","title":"completed_date","text":"<pre><code>completed_date: str | None = Field(\n    alias=\"completedDate\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.closed_date","title":"closed_date","text":"<pre><code>closed_date: str | None = Field(\n    alias=\"closedDate\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.result","title":"result","text":"<pre><code>result: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.state","title":"state","text":"<pre><code>state: TaskState | None = Field(default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.project","title":"project","text":"<pre><code>project: (\n    SerializeAsEntityLink[Project]\n    | list[SerializeAsEntityLink[Project]]\n    | None\n) = Field(default=None, alias=\"Project\")\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.assigned_to","title":"assigned_to","text":"<pre><code>assigned_to: SerializeAsEntityLinkWithName[User] | None = (\n    Field(default=None, alias=\"AssignedTo\")\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BaseTask.page_state","title":"page_state","text":"<pre><code>page_state: PageState | None = Field(\n    alias=\"PageState\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.PropertyTask","title":"PropertyTask","text":"<p>               Bases: <code>BaseTask</code></p> <p>Represents a batch task.</p> <p>This class is used to create and manage batch tasks. It includes the base task attributes and additional attributes specific to batch tasks.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the batch task.</p> <code>inventory_information</code> <code>list[TaskInventoryInformation]</code> <p>Information about the inventory associated with the batch task.</p> <code>location</code> <code>SerializeAsEntityLink[Location]</code> <p>The location where the batch task is performed.</p> <code>parent_id</code> <code>str</code> <p>The ID of the parent project.</p> <code>blocks</code> <code>list[Block]</code> <p>A list of blocks associated with the batch task.</p> <code>id</code> <code>(str, optional)</code> <p>The ID of the batch task, by default None.</p> <code>metadata</code> <code>(dict[str, MetadataItem], optional)</code> <p>Metadata associated with the batch task, by default an empty dictionary.</p> <code>due_date</code> <code>(str, optional)</code> <p>The due date of the batch task. YYY-MM-DD format, by default None.</p> <code>notes</code> <code>(str, optional)</code> <p>Notes associated with the batch task, by default None.</p> <code>priority</code> <code>(TaskPriority, optional)</code> <p>The priority of the batch task, by default None.</p> <code>assigned_to</code> <code>(SerializeAsEntityLink[User], optional)</code> <p>The user assigned to the batch task, by default None.</p> <code>state</code> <code>(TaskState, optional)</code> <p>The state of the batch task, by default None.</p> <code>sources</code> <code>(list[TaskSource], optional)</code> <p>A list of sources associated with the batch task, by default an empty list.</p> <code>security_class</code> <code>(SecurityClass, optional)</code> <p>The security class of the batch task, by default None.</p> <code>start_date</code> <code>str, read only</code> <p>The start date of the batch task, by default None.</p> <code>claimed_date</code> <code>str, read only</code> <p>The claimed date of the batch task, by default None.</p> <code>completed_date</code> <code>str, read only</code> <p>The completed date of the batch task, by default None.</p> <code>closed_date</code> <code>str, read only</code> <p>The closed date of the batch task, by default None.</p>"},{"location":"resources/tasks/#albert.resources.tasks.PropertyTask.category","title":"category","text":"<pre><code>category: Literal[PROPERTY] = PROPERTY\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.PropertyTask.blocks","title":"blocks","text":"<pre><code>blocks: list[Block] | None = Field(\n    alias=\"Blocks\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.PropertyTask.qc_task","title":"qc_task","text":"<pre><code>qc_task: bool | None = Field(alias='qcTask', default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.PropertyTask.batch_task_id","title":"batch_task_id","text":"<pre><code>batch_task_id: str | None = Field(\n    alias=\"batchTaskId\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.PropertyTask.target","title":"target","text":"<pre><code>target: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchTask","title":"BatchTask","text":"<p>               Bases: <code>BaseTask</code></p> <p>Represents a batch task.</p> <p>This class is used to create and manage batch tasks. It includes the base task attributes and additional attributes specific to batch tasks.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the batch task.</p> <code>inventory_information</code> <code>list[TaskInventoryInformation]</code> <p>Information about the inventory associated with the batch task.</p> <code>location</code> <code>SerializeAsEntityLink[Location]</code> <p>The location where the batch task is performed.</p> <code>parent_id</code> <code>str</code> <p>The ID of the parent project.</p> <code>id</code> <code>(str, optional)</code> <p>The ID of the batch task, by default None.</p> <code>batch_size_unit</code> <code>(str, optional)</code> <p>The unit of measurement for the batch size, by default None.</p> <code>metadata</code> <code>(dict[str, MetadataItem], optional)</code> <p>Metadata associated with the batch task, by default an empty dictionary.</p> <code>workflows</code> <code>(list[SerializeAsEntityLink[Workflow]], optional)</code> <p>A list of workflows associated with the batch task, by default None.</p> <code>due_date</code> <code>(str, optional)</code> <p>The due date of the batch task. YYY-MM-DD format, by default None.</p> <code>notes</code> <code>(str, optional)</code> <p>Notes associated with the batch task, by default None.</p> <code>priority</code> <code>(TaskPriority, optional)</code> <p>The priority of the batch task, by default None.</p> <code>project</code> <code>(SerializeAsEntityLink[Project] | list[SerializeAsEntityLink[Project]], optional)</code> <p>The project(s) associated with the batch task, by default None.</p> <code>assigned_to</code> <code>(SerializeAsEntityLink[User], optional)</code> <p>The user assigned to the batch task, by default None.</p> <code>state</code> <code>(TaskState, optional)</code> <p>The state of the batch task, by default None.</p> <code>sources</code> <code>(list[TaskSource], optional)</code> <p>A list of sources associated with the batch task, by default an empty list.</p> <code>security_class</code> <code>(SecurityClass, optional)</code> <p>The security class of the batch task, by default None.</p> <code>pass_fail</code> <code>(bool, optional)</code> <p>Whether the batch task is pass/fail, by default None.</p> <code>start_date</code> <code>str, read only</code> <p>The start date of the batch task, by default None.</p> <code>claimed_date</code> <code>str, read only</code> <p>The claimed date of the batch task, by default None.</p> <code>completed_date</code> <code>str, read only</code> <p>The completed date of the batch task, by default None.</p> <code>closed_date</code> <code>str, read only</code> <p>The closed date of the batch task, by default None.</p> <code>qc_task</code> <code>(bool, optional)</code> <p>Whether the batch task is a QC task, by default None.</p> <code>batch_task_id</code> <code>(str, optional)</code> <p>The ID of the batch task, by default None.</p> <code>target</code> <code>(str, optional)</code> <p>The target of the batch task, by default None.</p> <code>qc_task_data</code> <code>(list[QCTaskData], optional)</code> <p>A list of QC task data associated with the batch task, by default None.</p>"},{"location":"resources/tasks/#albert.resources.tasks.BatchTask.category","title":"category","text":"<pre><code>category: Literal[BATCH, BATCH_WITH_QC] = BATCH\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchTask.batch_size_unit","title":"batch_size_unit","text":"<pre><code>batch_size_unit: BatchSizeUnit | None = Field(\n    alias=\"batchSizeUnit\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchTask.qc_task","title":"qc_task","text":"<pre><code>qc_task: bool | None = Field(alias='qcTask', default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchTask.batch_task_id","title":"batch_task_id","text":"<pre><code>batch_task_id: str | None = Field(\n    alias=\"batchTaskId\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchTask.target","title":"target","text":"<pre><code>target: str | None = Field(default=None)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchTask.qc_task_data","title":"qc_task_data","text":"<pre><code>qc_task_data: list[QCTaskData] | None = Field(\n    alias=\"QCTaskData\", default=None\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.BatchTask.workflows","title":"workflows","text":"<pre><code>workflows: list[SerializeAsEntityLink[Workflow]] | None = (\n    Field(alias=\"Workflow\", default=None)\n)\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.GeneralTask","title":"GeneralTask","text":"<p>               Bases: <code>BaseTask</code></p> <p>Attributes:</p> Name Type Description <code>category</code> <code>Literal[GENERAL]</code>"},{"location":"resources/tasks/#albert.resources.tasks.GeneralTask.category","title":"category","text":"<pre><code>category: Literal[GENERAL] = GENERAL\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskHistoryEvent","title":"TaskHistoryEvent","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"Location\": {\n      \"description\": \"A location in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the location.\\nid : str | None\\n    The Albert ID of the location. Set when the location is retrieved from Albert.\\nlatitude : float\\n    The latitude of the location.\\nlongitude : float\\n    The longitude of the location.\\naddress : str\\n    The address of the location.\\ncountry : str | None\\n    The country code of the location. Must be two characters long.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"latitude\": {\n          \"title\": \"Latitude\",\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"title\": \"Longitude\",\n          \"type\": \"number\"\n        },\n        \"address\": {\n          \"title\": \"Address\",\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"anyOf\": [\n            {\n              \"maxLength\": 2,\n              \"minLength\": 2,\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Country\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"latitude\",\n        \"longitude\",\n        \"address\"\n      ],\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Role\": {\n      \"description\": \"A role in Albert. Note: Roles are not currently creatable via the SDK.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the role.\\nid : str\\n    The Albert ID of the role. Set when the role is retrieved from Albert.\\npolicies : list[Any] | None\\n    The policies associated with the role.\\ntenant : str\\n    The tenant ID of the role.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"policies\": {\n          \"anyOf\": [\n            {\n              \"items\": {},\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Policies\"\n        },\n        \"tenant\": {\n          \"title\": \"Tenant\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"tenant\"\n      ],\n      \"title\": \"Role\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"User\": {\n      \"description\": \"Represents a User on the Albert Platform\\n\\nAttributes\\n----------\\nname : str\\n    The name of the user.\\nid : str | None\\n    The Albert ID of the user. Set when the user is retrieved from Albert.\\nlocation : Location | None\\n    The location of the user.\\nemail : EmailStr | None\\n    The email of the user.\\nroles : list[Role]\\n    The roles of the user.\\nuser_class : UserClass\\n    The ACL class level of the user.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Location\"\n        },\n        \"email\": {\n          \"default\": null,\n          \"format\": \"email\",\n          \"title\": \"Email\",\n          \"type\": \"string\"\n        },\n        \"Roles\": {\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/$defs/Role\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              }\n            ]\n          },\n          \"maxItems\": 1,\n          \"title\": \"Roles\",\n          \"type\": \"array\"\n        },\n        \"userClass\": {\n          \"$ref\": \"#/$defs/UserClass\",\n          \"default\": \"standard\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"User\",\n      \"type\": \"object\"\n    },\n    \"UserClass\": {\n      \"description\": \"The ACL class level of the user\",\n      \"enum\": [\n        \"guest\",\n        \"standard\",\n        \"trusted\",\n        \"privileged\",\n        \"admin\"\n      ],\n      \"title\": \"UserClass\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"state\": {\n      \"title\": \"State\",\n      \"type\": \"string\"\n    },\n    \"action\": {\n      \"title\": \"Action\",\n      \"type\": \"string\"\n    },\n    \"actionAt\": {\n      \"format\": \"date-time\",\n      \"title\": \"Actionat\",\n      \"type\": \"string\"\n    },\n    \"User\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/User\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        }\n      ],\n      \"title\": \"User\"\n    },\n    \"oldValue\": {\n      \"anyOf\": [\n        {},\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Oldvalue\"\n    },\n    \"newValue\": {\n      \"anyOf\": [\n        {},\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Newvalue\"\n    }\n  },\n  \"required\": [\n    \"state\",\n    \"action\",\n    \"actionAt\",\n    \"User\"\n  ],\n  \"title\": \"TaskHistoryEvent\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>state</code>                 (<code>str</code>)             </li> <li> <code>action</code>                 (<code>str</code>)             </li> <li> <code>action_at</code>                 (<code>datetime</code>)             </li> <li> <code>user</code>                 (<code>SerializeAsEntityLink[User]</code>)             </li> <li> <code>old_value</code>                 (<code>Any | None</code>)             </li> <li> <code>new_value</code>                 (<code>Any | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskHistoryEvent.state","title":"state","text":"<pre><code>state: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskHistoryEvent.action","title":"action","text":"<pre><code>action: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskHistoryEvent.action_at","title":"action_at","text":"<pre><code>action_at: datetime\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskHistoryEvent.user","title":"user","text":"<pre><code>user: SerializeAsEntityLink[User]\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskHistoryEvent.old_value","title":"old_value","text":"<pre><code>old_value: Any | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskHistoryEvent.new_value","title":"new_value","text":"<pre><code>new_value: Any | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskHistory","title":"TaskHistory","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"Location\": {\n      \"description\": \"A location in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the location.\\nid : str | None\\n    The Albert ID of the location. Set when the location is retrieved from Albert.\\nlatitude : float\\n    The latitude of the location.\\nlongitude : float\\n    The longitude of the location.\\naddress : str\\n    The address of the location.\\ncountry : str | None\\n    The country code of the location. Must be two characters long.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"latitude\": {\n          \"title\": \"Latitude\",\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"title\": \"Longitude\",\n          \"type\": \"number\"\n        },\n        \"address\": {\n          \"title\": \"Address\",\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"anyOf\": [\n            {\n              \"maxLength\": 2,\n              \"minLength\": 2,\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Country\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"latitude\",\n        \"longitude\",\n        \"address\"\n      ],\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Role\": {\n      \"description\": \"A role in Albert. Note: Roles are not currently creatable via the SDK.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the role.\\nid : str\\n    The Albert ID of the role. Set when the role is retrieved from Albert.\\npolicies : list[Any] | None\\n    The policies associated with the role.\\ntenant : str\\n    The tenant ID of the role.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"policies\": {\n          \"anyOf\": [\n            {\n              \"items\": {},\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Policies\"\n        },\n        \"tenant\": {\n          \"title\": \"Tenant\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"tenant\"\n      ],\n      \"title\": \"Role\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"TaskHistoryEvent\": {\n      \"properties\": {\n        \"state\": {\n          \"title\": \"State\",\n          \"type\": \"string\"\n        },\n        \"action\": {\n          \"title\": \"Action\",\n          \"type\": \"string\"\n        },\n        \"actionAt\": {\n          \"format\": \"date-time\",\n          \"title\": \"Actionat\",\n          \"type\": \"string\"\n        },\n        \"User\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/User\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            }\n          ],\n          \"title\": \"User\"\n        },\n        \"oldValue\": {\n          \"anyOf\": [\n            {},\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Oldvalue\"\n        },\n        \"newValue\": {\n          \"anyOf\": [\n            {},\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Newvalue\"\n        }\n      },\n      \"required\": [\n        \"state\",\n        \"action\",\n        \"actionAt\",\n        \"User\"\n      ],\n      \"title\": \"TaskHistoryEvent\",\n      \"type\": \"object\"\n    },\n    \"User\": {\n      \"description\": \"Represents a User on the Albert Platform\\n\\nAttributes\\n----------\\nname : str\\n    The name of the user.\\nid : str | None\\n    The Albert ID of the user. Set when the user is retrieved from Albert.\\nlocation : Location | None\\n    The location of the user.\\nemail : EmailStr | None\\n    The email of the user.\\nroles : list[Role]\\n    The roles of the user.\\nuser_class : UserClass\\n    The ACL class level of the user.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Location\"\n        },\n        \"email\": {\n          \"default\": null,\n          \"format\": \"email\",\n          \"title\": \"Email\",\n          \"type\": \"string\"\n        },\n        \"Roles\": {\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/$defs/Role\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              }\n            ]\n          },\n          \"maxItems\": 1,\n          \"title\": \"Roles\",\n          \"type\": \"array\"\n        },\n        \"userClass\": {\n          \"$ref\": \"#/$defs/UserClass\",\n          \"default\": \"standard\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"User\",\n      \"type\": \"object\"\n    },\n    \"UserClass\": {\n      \"description\": \"The ACL class level of the user\",\n      \"enum\": [\n        \"guest\",\n        \"standard\",\n        \"trusted\",\n        \"privileged\",\n        \"admin\"\n      ],\n      \"title\": \"UserClass\",\n      \"type\": \"string\"\n    }\n  },\n  \"properties\": {\n    \"Items\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/TaskHistoryEvent\"\n      },\n      \"title\": \"Items\",\n      \"type\": \"array\"\n    }\n  },\n  \"required\": [\n    \"Items\"\n  ],\n  \"title\": \"TaskHistory\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>items</code>                 (<code>list[TaskHistoryEvent]</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskHistory.items","title":"items","text":"<pre><code>items: list[TaskHistoryEvent]\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskPatchPayload","title":"TaskPatchPayload","text":"<p>               Bases: <code>PatchPayload</code></p> <p>A payload for a PATCH request to update a Task.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>The id of the Task to be updated.</p>"},{"location":"resources/tasks/#albert.resources.tasks.TaskPatchPayload.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchInventory","title":"TaskSearchInventory","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"albertIdAndName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Albertidandname\"\n    }\n  },\n  \"title\": \"TaskSearchInventory\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>albert_id_and_name</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchInventory.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchInventory.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchInventory.albert_id_and_name","title":"albert_id_and_name","text":"<pre><code>albert_id_and_name: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchDataTemplate","title":"TaskSearchDataTemplate","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"title\": \"TaskSearchDataTemplate\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchDataTemplate.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchDataTemplate.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchLot","title":"TaskSearchLot","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"number\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Number\"\n    },\n    \"selectedLot\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Selectedlot\"\n    }\n  },\n  \"title\": \"TaskSearchLot\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>number</code>                 (<code>str | None</code>)             </li> <li> <code>selected_lot</code>                 (<code>bool | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchLot.number","title":"number","text":"<pre><code>number: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchLot.selected_lot","title":"selected_lot","text":"<pre><code>selected_lot: bool | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchLocation","title":"TaskSearchLocation","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"title\": \"TaskSearchLocation\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchLocation.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchTag","title":"TaskSearchTag","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"tagName\": {\n      \"title\": \"Tagname\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"tagName\"\n  ],\n  \"title\": \"TaskSearchTag\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>tag_name</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchTag.tag_name","title":"tag_name","text":"<pre><code>tag_name: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchWorkflow","title":"TaskSearchWorkflow","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"id\": {\n      \"title\": \"Id\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"category\": {\n      \"title\": \"Category\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"id\",\n    \"category\"\n  ],\n  \"title\": \"TaskSearchWorkflow\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>id</code>                 (<code>str</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>category</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchWorkflow.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchWorkflow.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchWorkflow.category","title":"category","text":"<pre><code>category: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem","title":"TaskSearchItem","text":"<p>               Bases: <code>BaseAlbertModel</code>, <code>HydrationMixin[BaseTask]</code></p> <p>Lightweight representation of a Task returned from unhydrated search().</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"TaskSearchDataTemplate\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"TaskSearchDataTemplate\",\n      \"type\": \"object\"\n    },\n    \"TaskSearchInventory\": {\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"albertIdAndName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertidandname\"\n        }\n      },\n      \"title\": \"TaskSearchInventory\",\n      \"type\": \"object\"\n    },\n    \"TaskSearchLocation\": {\n      \"properties\": {\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"TaskSearchLocation\",\n      \"type\": \"object\"\n    },\n    \"TaskSearchLot\": {\n      \"properties\": {\n        \"number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Number\"\n        },\n        \"selectedLot\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Selectedlot\"\n        }\n      },\n      \"title\": \"TaskSearchLot\",\n      \"type\": \"object\"\n    },\n    \"TaskSearchTag\": {\n      \"properties\": {\n        \"tagName\": {\n          \"title\": \"Tagname\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"tagName\"\n      ],\n      \"title\": \"TaskSearchTag\",\n      \"type\": \"object\"\n    },\n    \"TaskSearchWorkflow\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"category\": {\n          \"title\": \"Category\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"id\",\n        \"category\"\n      ],\n      \"title\": \"TaskSearchWorkflow\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"Lightweight representation of a Task returned from unhydrated search().\",\n  \"properties\": {\n    \"albertId\": {\n      \"title\": \"Albertid\",\n      \"type\": \"string\"\n    },\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"category\": {\n      \"title\": \"Category\",\n      \"type\": \"string\"\n    },\n    \"priority\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Priority\"\n    },\n    \"state\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"State\"\n    },\n    \"assignedTo\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Assignedto\"\n    },\n    \"assignedToUserId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Assignedtouserid\"\n    },\n    \"createdByName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Createdbyname\"\n    },\n    \"createdAt\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Createdat\"\n    },\n    \"dueDate\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Duedate\"\n    },\n    \"completedDate\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Completeddate\"\n    },\n    \"startDate\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Startdate\"\n    },\n    \"closedDate\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Closeddate\"\n    },\n    \"location\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/TaskSearchLocation\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Location\"\n    },\n    \"inventory\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/TaskSearchInventory\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Inventory\"\n    },\n    \"tags\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/TaskSearchTag\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Tags\"\n    },\n    \"lot\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/TaskSearchLot\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lot\"\n    },\n    \"dataTemplate\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/TaskSearchDataTemplate\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Datatemplate\"\n    },\n    \"workflow\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/TaskSearchWorkflow\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Workflow\"\n    },\n    \"projectId\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Projectid\"\n    },\n    \"isQCTask\": {\n      \"anyOf\": [\n        {\n          \"type\": \"boolean\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Isqctask\"\n    },\n    \"parentBatchStatus\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Parentbatchstatus\"\n    }\n  },\n  \"required\": [\n    \"albertId\",\n    \"name\",\n    \"category\"\n  ],\n  \"title\": \"TaskSearchItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>_collection</code>                 (<code>BaseCollection | None</code>)             </li> <li> <code>id</code>                 (<code>TaskId</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>category</code>                 (<code>str</code>)             </li> <li> <code>priority</code>                 (<code>str | None</code>)             </li> <li> <code>state</code>                 (<code>str | None</code>)             </li> <li> <code>assigned_to</code>                 (<code>str | None</code>)             </li> <li> <code>assigned_to_user_id</code>                 (<code>str | None</code>)             </li> <li> <code>created_by_name</code>                 (<code>str | None</code>)             </li> <li> <code>created_at</code>                 (<code>str | None</code>)             </li> <li> <code>due_date</code>                 (<code>str | None</code>)             </li> <li> <code>completed_date</code>                 (<code>str | None</code>)             </li> <li> <code>start_date</code>                 (<code>str | None</code>)             </li> <li> <code>closed_date</code>                 (<code>str | None</code>)             </li> <li> <code>location</code>                 (<code>list[TaskSearchLocation] | None</code>)             </li> <li> <code>inventory</code>                 (<code>list[TaskSearchInventory] | None</code>)             </li> <li> <code>tags</code>                 (<code>list[TaskSearchTag] | None</code>)             </li> <li> <code>lot</code>                 (<code>list[TaskSearchLot] | None</code>)             </li> <li> <code>data_template</code>                 (<code>list[TaskSearchDataTemplate] | None</code>)             </li> <li> <code>workflow</code>                 (<code>list[TaskSearchWorkflow] | None</code>)             </li> <li> <code>project_id</code>                 (<code>list[str] | None</code>)             </li> <li> <code>is_qc_task</code>                 (<code>bool | None</code>)             </li> <li> <code>parent_batch_status</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.id","title":"id","text":"<pre><code>id: TaskId\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.category","title":"category","text":"<pre><code>category: str\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.priority","title":"priority","text":"<pre><code>priority: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.state","title":"state","text":"<pre><code>state: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.assigned_to","title":"assigned_to","text":"<pre><code>assigned_to: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.assigned_to_user_id","title":"assigned_to_user_id","text":"<pre><code>assigned_to_user_id: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.created_by_name","title":"created_by_name","text":"<pre><code>created_by_name: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.created_at","title":"created_at","text":"<pre><code>created_at: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.due_date","title":"due_date","text":"<pre><code>due_date: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.completed_date","title":"completed_date","text":"<pre><code>completed_date: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.start_date","title":"start_date","text":"<pre><code>start_date: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.closed_date","title":"closed_date","text":"<pre><code>closed_date: str | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.location","title":"location","text":"<pre><code>location: list[TaskSearchLocation] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.inventory","title":"inventory","text":"<pre><code>inventory: list[TaskSearchInventory] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.tags","title":"tags","text":"<pre><code>tags: list[TaskSearchTag] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.lot","title":"lot","text":"<pre><code>lot: list[TaskSearchLot] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.data_template","title":"data_template","text":"<pre><code>data_template: list[TaskSearchDataTemplate] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.workflow","title":"workflow","text":"<pre><code>workflow: list[TaskSearchWorkflow] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.project_id","title":"project_id","text":"<pre><code>project_id: list[str] | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.is_qc_task","title":"is_qc_task","text":"<pre><code>is_qc_task: bool | None = None\n</code></pre>"},{"location":"resources/tasks/#albert.resources.tasks.TaskSearchItem.parent_batch_status","title":"parent_batch_status","text":"<pre><code>parent_batch_status: str | None = None\n</code></pre>"},{"location":"resources/un_numbers/","title":"UN Numbers","text":""},{"location":"resources/un_numbers/#albert.resources.un_numbers","title":"albert.resources.un_numbers","text":""},{"location":"resources/un_numbers/#albert.resources.un_numbers.UnNumber","title":"UnNumber","text":"<p>               Bases: <code>BaseResource</code></p> <p>A UN number entity. UN Numbers are highly controlled within Albert.</p> <p>Attributes:</p> Name Type Description <code>un_number</code> <code>str</code> <p>The UN number.</p> <code>id</code> <code>str</code> <p>The Albert ID of the UN number. Set when the UN number is retrieved from Albert.</p> <code>storage_class_name</code> <code>str</code> <p>The name of the storage class.</p> <code>shipping_description</code> <code>str</code> <p>The shipping description.</p> <code>storage_class_number</code> <code>str</code> <p>The storage class number.</p> <code>un_classification</code> <code>str</code> <p>The UN classification.</p>"},{"location":"resources/un_numbers/#albert.resources.un_numbers.UnNumber.un_number","title":"un_number","text":"<pre><code>un_number: str = Field(alias='unNumber')\n</code></pre>"},{"location":"resources/un_numbers/#albert.resources.un_numbers.UnNumber.id","title":"id","text":"<pre><code>id: str = Field(alias='albertId')\n</code></pre>"},{"location":"resources/un_numbers/#albert.resources.un_numbers.UnNumber.storage_class_name","title":"storage_class_name","text":"<pre><code>storage_class_name: str = Field(alias='storageClassName')\n</code></pre>"},{"location":"resources/un_numbers/#albert.resources.un_numbers.UnNumber.shipping_description","title":"shipping_description","text":"<pre><code>shipping_description: str = Field(\n    alias=\"shippingDescription\"\n)\n</code></pre>"},{"location":"resources/un_numbers/#albert.resources.un_numbers.UnNumber.storage_class_number","title":"storage_class_number","text":"<pre><code>storage_class_number: str = Field(\n    alias=\"storageClassNumber\"\n)\n</code></pre>"},{"location":"resources/un_numbers/#albert.resources.un_numbers.UnNumber.un_classification","title":"un_classification","text":"<pre><code>un_classification: str = Field(alias='unClassification')\n</code></pre>"},{"location":"resources/units/","title":"Units","text":""},{"location":"resources/units/#albert.resources.units","title":"albert.resources.units","text":""},{"location":"resources/units/#albert.resources.units.UnitCategory","title":"UnitCategory","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>UnitCategory is an enumeration of possible unit categories.</p> <p>Attributes:</p> Name Type Description <code>LENGTH</code> <code>str</code> <p>Represents length units.</p> <code>VOLUME</code> <code>str</code> <p>Represents volume units.</p> <code>LIQUID_VOLUME</code> <code>str</code> <p>Represents liquid volume units.</p> <code>ANGLES</code> <code>str</code> <p>Represents angle units.</p> <code>TIME</code> <code>str</code> <p>Represents time units.</p> <code>FREQUENCY</code> <code>str</code> <p>Represents frequency units.</p> <code>MASS</code> <code>str</code> <p>Represents mass units.</p> <code>CURRENT</code> <code>str</code> <p>Represents electric current units.</p> <code>TEMPERATURE</code> <code>str</code> <p>Represents temperature units.</p> <code>AMOUNT</code> <code>str</code> <p>Represents amount of substance units.</p> <code>LUMINOSITY</code> <code>str</code> <p>Represents luminous intensity units.</p> <code>FORCE</code> <code>str</code> <p>Represents force units.</p> <code>ENERGY</code> <code>str</code> <p>Represents energy units.</p> <code>POWER</code> <code>str</code> <p>Represents power units.</p> <code>PRESSURE</code> <code>str</code> <p>Represents pressure units.</p> <code>ELECTRICITY_AND_MAGNETISM</code> <code>str</code> <p>Represents electricity and magnetism units.</p> <code>OTHER</code> <code>str</code> <p>Represents other units.</p> <code>WEIGHT</code> <code>str</code> <p>Represents weight units.</p>"},{"location":"resources/units/#albert.resources.units.UnitCategory.LENGTH","title":"LENGTH","text":"<pre><code>LENGTH = 'Length'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.VOLUME","title":"VOLUME","text":"<pre><code>VOLUME = 'Volume'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.LIQUID_VOLUME","title":"LIQUID_VOLUME","text":"<pre><code>LIQUID_VOLUME = 'Liquid volume'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.ANGLES","title":"ANGLES","text":"<pre><code>ANGLES = 'Angles'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.TIME","title":"TIME","text":"<pre><code>TIME = 'Time'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.FREQUENCY","title":"FREQUENCY","text":"<pre><code>FREQUENCY = 'Frequency'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.MASS","title":"MASS","text":"<pre><code>MASS = 'Mass'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.CURRENT","title":"CURRENT","text":"<pre><code>CURRENT = 'Electric current'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.TEMPERATURE","title":"TEMPERATURE","text":"<pre><code>TEMPERATURE = 'Temperature'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.AMOUNT","title":"AMOUNT","text":"<pre><code>AMOUNT = 'Amount of substance'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.LUMINOSITY","title":"LUMINOSITY","text":"<pre><code>LUMINOSITY = 'Luminous intensity'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.FORCE","title":"FORCE","text":"<pre><code>FORCE = 'Force'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.ENERGY","title":"ENERGY","text":"<pre><code>ENERGY = 'Energy'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.POWER","title":"POWER","text":"<pre><code>POWER = 'Power'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.PRESSURE","title":"PRESSURE","text":"<pre><code>PRESSURE = 'Pressure'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.ELECTRICITY_AND_MAGNETISM","title":"ELECTRICITY_AND_MAGNETISM","text":"<pre><code>ELECTRICITY_AND_MAGNETISM = 'Electricity and magnetism'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.OTHER","title":"OTHER","text":"<pre><code>OTHER = 'Other'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.WEIGHT","title":"WEIGHT","text":"<pre><code>WEIGHT = 'Weight'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.AREA","title":"AREA","text":"<pre><code>AREA = 'Area'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.SURFACE_AREA","title":"SURFACE_AREA","text":"<pre><code>SURFACE_AREA = 'Surface Area'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.BINARY","title":"BINARY","text":"<pre><code>BINARY = 'Binary'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.CAPACITANCE","title":"CAPACITANCE","text":"<pre><code>CAPACITANCE = 'Capacitance'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.SPEED","title":"SPEED","text":"<pre><code>SPEED = 'Speed'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.ELECTRICAL_CONDUCTIVITY","title":"ELECTRICAL_CONDUCTIVITY","text":"<pre><code>ELECTRICAL_CONDUCTIVITY = 'Electrical conductivity'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.ELECTRICAL_PERMITTIVITY","title":"ELECTRICAL_PERMITTIVITY","text":"<pre><code>ELECTRICAL_PERMITTIVITY = 'Electrical permitivitty'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.DENSITY","title":"DENSITY","text":"<pre><code>DENSITY = 'Density'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.UnitCategory.RESISTANCE","title":"RESISTANCE","text":"<pre><code>RESISTANCE = 'Resistance'\n</code></pre>"},{"location":"resources/units/#albert.resources.units.Unit","title":"Unit","text":"<p>               Bases: <code>BaseResource</code></p> <p>Unit is a Pydantic model representing a unit entity.</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str | None</code> <p>The Albert ID of the unit. Set when the unit is retrieved from Albert.</p> <code>name</code> <code>str</code> <p>The name of the unit.</p> <code>symbol</code> <code>str | None</code> <p>The symbol of the unit.</p> <code>synonyms</code> <code>List[str] | None</code> <p>The list of synonyms for the unit.</p> <code>category</code> <code>UnitCategory</code> <p>The category of the unit.</p> <code>verified</code> <code>bool | None</code> <p>Whether the unit is verified.</p> <code>status</code> <code>Status | None</code> <p>The status of the unit. Allowed values are <code>active</code>, and <code>inactive</code></p>"},{"location":"resources/units/#albert.resources.units.Unit.id","title":"id","text":"<pre><code>id: str | None = Field(None, alias='albertId')\n</code></pre>"},{"location":"resources/units/#albert.resources.units.Unit.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/units/#albert.resources.units.Unit.symbol","title":"symbol","text":"<pre><code>symbol: str | None = Field(None)\n</code></pre>"},{"location":"resources/units/#albert.resources.units.Unit.synonyms","title":"synonyms","text":"<pre><code>synonyms: list[str] | None = Field(\n    default_factory=list, alias=\"Synonyms\"\n)\n</code></pre>"},{"location":"resources/units/#albert.resources.units.Unit.category","title":"category","text":"<pre><code>category: UnitCategory | None = Field(None)\n</code></pre>"},{"location":"resources/units/#albert.resources.units.Unit.verified","title":"verified","text":"<pre><code>verified: bool | None = Field(\n    default=False, exclude=True, frozen=True\n)\n</code></pre>"},{"location":"resources/users/","title":"Users","text":""},{"location":"resources/users/#albert.resources.users","title":"albert.resources.users","text":""},{"location":"resources/users/#albert.resources.users.UserClass","title":"UserClass","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>The ACL class level of the user</p> <p>Attributes:</p> Name Type Description <code>GUEST</code> <code>STANDARD</code> <code>TRUSTED</code> <code>PRIVILEGED</code> <code>ADMIN</code>"},{"location":"resources/users/#albert.resources.users.UserClass.GUEST","title":"GUEST","text":"<pre><code>GUEST = 'guest'\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserClass.STANDARD","title":"STANDARD","text":"<pre><code>STANDARD = 'standard'\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserClass.TRUSTED","title":"TRUSTED","text":"<pre><code>TRUSTED = 'trusted'\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserClass.PRIVILEGED","title":"PRIVILEGED","text":"<pre><code>PRIVILEGED = 'privileged'\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserClass.ADMIN","title":"ADMIN","text":"<pre><code>ADMIN = 'admin'\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserFilterType","title":"UserFilterType","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Attributes:</p> Name Type Description <code>ROLE</code>"},{"location":"resources/users/#albert.resources.users.UserFilterType.ROLE","title":"ROLE","text":"<pre><code>ROLE = 'role'\n</code></pre>"},{"location":"resources/users/#albert.resources.users.User","title":"User","text":"<p>               Bases: <code>BaseResource</code></p> <p>Represents a User on the Albert Platform</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the user.</p> <code>id</code> <code>str | None</code> <p>The Albert ID of the user. Set when the user is retrieved from Albert.</p> <code>location</code> <code>Location | None</code> <p>The location of the user.</p> <code>email</code> <code>EmailStr | None</code> <p>The email of the user.</p> <code>roles</code> <code>list[Role]</code> <p>The roles of the user.</p> <code>user_class</code> <code>UserClass</code> <p>The ACL class level of the user.</p> <code>metadata</code> <code>dict[str, str | list[EntityLink] | EntityLink] | None</code> <p>Methods:</p> Name Description <code>to_note_mention</code> <p>Convert the user to a note mention string.</p>"},{"location":"resources/users/#albert.resources.users.User.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/users/#albert.resources.users.User.id","title":"id","text":"<pre><code>id: UserId | None = Field(None, alias='albertId')\n</code></pre>"},{"location":"resources/users/#albert.resources.users.User.location","title":"location","text":"<pre><code>location: SerializeAsEntityLink[Location] | None = Field(\n    default=None, alias=\"Location\"\n)\n</code></pre>"},{"location":"resources/users/#albert.resources.users.User.email","title":"email","text":"<pre><code>email: EmailStr = Field(default=None, alias='email')\n</code></pre>"},{"location":"resources/users/#albert.resources.users.User.roles","title":"roles","text":"<pre><code>roles: list[SerializeAsEntityLink[Role]] = Field(\n    max_length=1, default_factory=list, alias=\"Roles\"\n)\n</code></pre>"},{"location":"resources/users/#albert.resources.users.User.user_class","title":"user_class","text":"<pre><code>user_class: UserClass = Field(\n    default=STANDARD, alias=\"userClass\"\n)\n</code></pre>"},{"location":"resources/users/#albert.resources.users.User.metadata","title":"metadata","text":"<pre><code>metadata: dict[str, MetadataItem] | None = Field(\n    alias=\"Metadata\", default=None\n)\n</code></pre>"},{"location":"resources/users/#albert.resources.users.User.to_note_mention","title":"to_note_mention","text":"<pre><code>to_note_mention() -&gt; str\n</code></pre> <p>Convert the user to a note mention string.</p> <p>Returns:</p> Type Description <code>str</code> <p>The note mention string.</p> Source code in <code>src/albert/resources/users.py</code> <pre><code>def to_note_mention(self) -&gt; str:\n    \"\"\"Convert the user to a note mention string.\n\n    Returns\n    -------\n    str\n        The note mention string.\n    \"\"\"\n    return f\"@{self.name}#{self.id}#\"\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchRoleItem","title":"UserSearchRoleItem","text":"<p>               Bases: <code>BaseAlbertModel</code></p> Show JSON schema: <pre><code>{\n  \"properties\": {\n    \"roleId\": {\n      \"title\": \"Roleid\",\n      \"type\": \"string\"\n    },\n    \"roleName\": {\n      \"title\": \"Rolename\",\n      \"type\": \"string\"\n    }\n  },\n  \"required\": [\n    \"roleId\",\n    \"roleName\"\n  ],\n  \"title\": \"UserSearchRoleItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>roleId</code>                 (<code>str</code>)             </li> <li> <code>roleName</code>                 (<code>str</code>)             </li> </ul>"},{"location":"resources/users/#albert.resources.users.UserSearchRoleItem.roleId","title":"roleId","text":"<pre><code>roleId: str\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchRoleItem.roleName","title":"roleName","text":"<pre><code>roleName: str\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchItem","title":"UserSearchItem","text":"<p>               Bases: <code>BaseAlbertModel</code>, <code>HydrationMixin[User]</code></p> <p>Partial user entity as returned by the search.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"UserClass\": {\n      \"description\": \"The ACL class level of the user\",\n      \"enum\": [\n        \"guest\",\n        \"standard\",\n        \"trusted\",\n        \"privileged\",\n        \"admin\"\n      ],\n      \"title\": \"UserClass\",\n      \"type\": \"string\"\n    },\n    \"UserSearchRoleItem\": {\n      \"properties\": {\n        \"roleId\": {\n          \"title\": \"Roleid\",\n          \"type\": \"string\"\n        },\n        \"roleName\": {\n          \"title\": \"Rolename\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"roleId\",\n        \"roleName\"\n      ],\n      \"title\": \"UserSearchRoleItem\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"Partial user entity as returned by the search.\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"albertId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Albertid\"\n    },\n    \"email\": {\n      \"anyOf\": [\n        {\n          \"format\": \"email\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Email\"\n    },\n    \"userClass\": {\n      \"$ref\": \"#/$defs/UserClass\",\n      \"default\": \"standard\"\n    },\n    \"lastLoginTime\": {\n      \"anyOf\": [\n        {\n          \"format\": \"date-time\",\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Lastlogintime\"\n    },\n    \"location\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Location\"\n    },\n    \"locationId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Locationid\"\n    },\n    \"role\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/UserSearchRoleItem\"\n      },\n      \"maxItems\": 1,\n      \"title\": \"Role\",\n      \"type\": \"array\"\n    },\n    \"subscription\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Subscription\"\n    }\n  },\n  \"required\": [\n    \"name\"\n  ],\n  \"title\": \"UserSearchItem\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>_collection</code>                 (<code>BaseCollection | None</code>)             </li> <li> <code>name</code>                 (<code>str</code>)             </li> <li> <code>id</code>                 (<code>UserId | None</code>)             </li> <li> <code>email</code>                 (<code>EmailStr | None</code>)             </li> <li> <code>user_class</code>                 (<code>UserClass</code>)             </li> <li> <code>last_login_time</code>                 (<code>datetime | None</code>)             </li> <li> <code>location</code>                 (<code>str | None</code>)             </li> <li> <code>location_id</code>                 (<code>str | None</code>)             </li> <li> <code>roles</code>                 (<code>list[UserSearchRoleItem]</code>)             </li> <li> <code>subscription</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/users/#albert.resources.users.UserSearchItem.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchItem.id","title":"id","text":"<pre><code>id: UserId | None = None\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchItem.email","title":"email","text":"<pre><code>email: EmailStr | None = None\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchItem.user_class","title":"user_class","text":"<pre><code>user_class: UserClass = STANDARD\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchItem.last_login_time","title":"last_login_time","text":"<pre><code>last_login_time: datetime | None = None\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchItem.location","title":"location","text":"<pre><code>location: str | None = None\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchItem.location_id","title":"location_id","text":"<pre><code>location_id: str | None = None\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchItem.roles","title":"roles","text":"<pre><code>roles: list[UserSearchRoleItem]\n</code></pre>"},{"location":"resources/users/#albert.resources.users.UserSearchItem.subscription","title":"subscription","text":"<pre><code>subscription: str | None = None\n</code></pre>"},{"location":"resources/workflows/","title":"Workflows","text":""},{"location":"resources/workflows/#albert.resources.workflows","title":"albert.resources.workflows","text":""},{"location":"resources/workflows/#albert.resources.workflows.IntervalParameter","title":"IntervalParameter","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>A class representing the interval parameter of a workflow. This is not a platform entity, but a helper class to make parsing the interval_combinations easier.</p> <p>Attributes:</p> Name Type Description <code>interval_param_name</code> <code>str</code> <p>The name of the interval parameter.</p> <code>interval_id</code> <code>IntervalId</code> <p>The id of the interval parameter.</p> <code>interval_value</code> <code>str</code> <p>The value of the interval parameter.</p> <code>interval_unit</code> <code>str</code> <p>The unit of the interval parameter.</p> Show JSON schema: <pre><code>{\n  \"description\": \"A class representing the interval parameter of a workflow.\\nThis is not a platform entity, but a helper class to make parsing\\nthe interval_combinations easier.\\n\\nAttributes\\n----------\\ninterval_param_name : str\\n    The name of the interval parameter.\\ninterval_id : IntervalId\\n    The id of the interval parameter.\\ninterval_value : str\\n    The value of the interval parameter.\\ninterval_unit : str\\n    The unit of the interval parameter.\",\n  \"properties\": {\n    \"interval_param_name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Interval Param Name\"\n    },\n    \"interval_id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Interval Id\"\n    },\n    \"interval_value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Interval Value\"\n    },\n    \"interval_unit\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Interval Unit\"\n    }\n  },\n  \"title\": \"IntervalParameter\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>interval_param_name</code>                 (<code>str | None</code>)             </li> <li> <code>interval_id</code>                 (<code>IntervalId | None</code>)             </li> <li> <code>interval_value</code>                 (<code>str | None</code>)             </li> <li> <code>interval_unit</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/workflows/#albert.resources.workflows.IntervalParameter.interval_param_name","title":"interval_param_name","text":"<pre><code>interval_param_name: str | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.IntervalParameter.interval_id","title":"interval_id","text":"<pre><code>interval_id: IntervalId | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.IntervalParameter.interval_value","title":"interval_value","text":"<pre><code>interval_value: str | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.IntervalParameter.interval_unit","title":"interval_unit","text":"<pre><code>interval_unit: str | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Interval","title":"Interval","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>A Pydantic class representing an interval.</p> Attrubutes <p>value : str     The value of the interval setpoint. unit : Unit     The unit of the related value.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"A Pydantic class representing an interval.\\n\\nAttrubutes\\n----------\\nvalue : str\\n    The value of the interval setpoint.\\nunit : Unit\\n    The unit of the related value.\",\n  \"properties\": {\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"Unit\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Unit\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    },\n    \"rowId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rowid\"\n    }\n  },\n  \"title\": \"Interval\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>value</code>                 (<code>str | None</code>)             </li> <li> <code>unit</code>                 (<code>SerializeAsEntityLink[Unit] | None</code>)             </li> <li> <code>row_id</code>                 (<code>RowId | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_interval</code> </li> </ul>"},{"location":"resources/workflows/#albert.resources.workflows.Interval.value","title":"value","text":"<pre><code>value: str | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Interval.unit","title":"unit","text":"<pre><code>unit: SerializeAsEntityLink[Unit] | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Interval.row_id","title":"row_id","text":"<pre><code>row_id: RowId | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Interval.validate_interval","title":"validate_interval","text":"<pre><code>validate_interval() -&gt; Interval\n</code></pre> Source code in <code>src/albert/resources/workflows.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_interval(self) -&gt; \"Interval\":\n    if not self.value:\n        raise ValueError(\"Interval: 'value' is required.\")\n    if self.unit and not getattr(self.unit, \"id\", None):\n        raise ValueError(\"Interval: 'Unit.id' is required.\")\n    return self\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.IntervalCombination","title":"IntervalCombination","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>A class representing the interval combinations of on a workflow. This is returned by the workflow endpoint when at least one parameter in the workflow has been intervalized.</p> <p>Interval Combinations can be single intervalized parameters or cartesian prodcuts of two intervalized parameters.</p> <p>Attributes:</p> Name Type Description <code>interval_id</code> <code>IntervalId | None</code> <p>forign key reference to the interval id this combination is associated with It will have the form ROW# or ROW#XROW# depending on if it is a single interval or a product of two intervals</p> <code>interval_params</code> <code>str | None</code> <p>The parameters participating in the interval.</p> <code>interval_string</code> <code>str | None</code> <p>The string representation of the interval combination This will have the form \"[Parameter Name]: [Parameter Value][Parameter Unit]\" for each parameter in the interval combination</p> Show JSON schema: <pre><code>{\n  \"description\": \"A class representing the interval combinations of on a workflow.\\nThis is returned by the workflow endpoint when at least one parameter\\nin the workflow has been intervalized.\\n\\nInterval Combinations can be single intervalized parameters or cartesian prodcuts of\\ntwo intervalized parameters.\\n\\nAttributes\\n----------\\ninterval_id: IntervalId | None\\n    forign key reference to the interval id\\n    this combination is associated with\\n    It will have the form ROW# or ROW#XROW# depending on\\n    if it is a single interval or a product of two intervals\\ninterval_params: str | None\\n    The parameters participating in the interval.\\ninterval_string: str | None\\n    The string representation of the interval combination\\n    This will have the form \\\"[Parameter Name]: [Parameter Value] [Parameter Unit]\\\"\\n    for each parameter in the interval combination\",\n  \"properties\": {\n    \"interval\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Interval\"\n    },\n    \"intervalParams\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Intervalparams\"\n    },\n    \"intervalString\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Intervalstring\"\n    }\n  },\n  \"title\": \"IntervalCombination\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>interval_id</code>                 (<code>IntervalId | None</code>)             </li> <li> <code>interval_params</code>                 (<code>str | None</code>)             </li> <li> <code>interval_string</code>                 (<code>str | None</code>)             </li> </ul>"},{"location":"resources/workflows/#albert.resources.workflows.IntervalCombination.interval_id","title":"interval_id","text":"<pre><code>interval_id: IntervalId | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.IntervalCombination.interval_params","title":"interval_params","text":"<pre><code>interval_params: str | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.IntervalCombination.interval_string","title":"interval_string","text":"<pre><code>interval_string: str | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint","title":"ParameterSetpoint","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>A Pydantic class representing the setpoint or intervals of a parameter to use. For a single value, provide the value and unit. For multiple values, provide intervals. a parameter or parameter_id must be provided.</p> <p>Attributes:</p> Name Type Description <code>parameter</code> <code>Parameter</code> <p>The parameter to set the setpoint on. Provide either a parameter or a parameter_id.</p> <code>parameter_id</code> <code>ParameterId</code> <p>The id of the parameter. Provide either a parameter or a parameter_id.</p> <code>value</code> <code>str | EntityLink</code> <p>The value of the setpoint. If the parameter is a InventoryItem, provide the EntityLink of the InventoryItem.</p> <code>unit</code> <code>Unit</code> <p>The unit of the setpoint.</p> <code>intervals</code> <code>list[Interval]</code> <p>The intervals of the setpoint. Either the intervals or value + unit</p> <code>category</code> <code>ParameterCategory</code> <p>The category of the parameter. Special for InventoryItem (then use name to specify \"Equipment\", \"Consumeable\", etc), normal for all others</p> <code>short_name</code> <code>str</code> <p>The short / display name of the parameter. Required if value is a dictionary.</p> <code>row_id</code> <code>RowId</code> <p>The id of the parameter with respect to the interval row id.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"Interval\": {\n      \"description\": \"A Pydantic class representing an interval.\\n\\nAttrubutes\\n----------\\nvalue : str\\n    The value of the interval setpoint.\\nunit : Unit\\n    The unit of the related value.\",\n      \"properties\": {\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        }\n      },\n      \"title\": \"Interval\",\n      \"type\": \"object\"\n    },\n    \"Parameter\": {\n      \"description\": \"A parameter in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the parameter. Names must be unique.\\nid : str | None\\n    The Albert ID of the parameter. Set when the parameter is retrieved from Albert.\\ncategory : ParameterCategory\\n    The category of the parameter. Allowed values are `Normal` and `Special`. Read-only.\\nrank : int\\n    The rank of the returned parameter. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"rank\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rank\"\n        },\n        \"required\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Required\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Parameter\",\n      \"type\": \"object\"\n    },\n    \"ParameterCategory\": {\n      \"description\": \"The category of a parameter\",\n      \"enum\": [\n        \"Normal\",\n        \"Special\"\n      ],\n      \"title\": \"ParameterCategory\",\n      \"type\": \"string\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    }\n  },\n  \"description\": \"A Pydantic class representing the setpoint or intervals of a parameter to use.\\nFor a single value, provide the value and unit. For multiple values, provide intervals.\\na parameter or parameter_id must be provided.\\n\\nAttributes\\n----------\\nparameter : Parameter\\n    The parameter to set the setpoint on. Provide either a parameter or a parameter_id.\\nparameter_id : ParameterId\\n    The id of the parameter. Provide either a parameter or a parameter_id.\\nvalue : str | EntityLink\\n    The value of the setpoint. If the parameter is a InventoryItem, provide the EntityLink of the InventoryItem.\\nunit : Unit\\n    The unit of the setpoint.\\nintervals : list[Interval]\\n    The intervals of the setpoint. Either the intervals or value + unit\\ncategory : ParameterCategory\\n    The category of the parameter. Special for InventoryItem (then use name to specify \\\"Equipment\\\", \\\"Consumeable\\\", etc), normal for all others\\nshort_name : str\\n    The short / display name of the parameter. Required if value is a dictionary.\\nrow_id : RowId\\n    The id of the parameter with respect to the interval row id.\",\n  \"properties\": {\n    \"parameter\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Parameter\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"value\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"additionalProperties\": true,\n          \"type\": \"object\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Value\"\n    },\n    \"Unit\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/Unit\"\n        },\n        {\n          \"$ref\": \"#/$defs/EntityLink\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Unit\"\n    },\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"Intervals\": {\n      \"anyOf\": [\n        {\n          \"items\": {\n            \"$ref\": \"#/$defs/Interval\"\n          },\n          \"type\": \"array\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Intervals\"\n    },\n    \"category\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/ParameterCategory\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"shortName\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Shortname\"\n    },\n    \"name\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Name\"\n    },\n    \"rowId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rowid\"\n    },\n    \"prgPrmRowId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Prgprmrowid\"\n    }\n  },\n  \"title\": \"ParameterSetpoint\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>parameter</code>                 (<code>Parameter | None</code>)             </li> <li> <code>value</code>                 (<code>str | dict[str, Any] | EntityLink | None</code>)             </li> <li> <code>unit</code>                 (<code>SerializeAsEntityLink[Unit] | None</code>)             </li> <li> <code>parameter_id</code>                 (<code>ParameterId | None</code>)             </li> <li> <code>intervals</code>                 (<code>list[Interval] | None</code>)             </li> <li> <code>category</code>                 (<code>ParameterCategory | None</code>)             </li> <li> <code>short_name</code>                 (<code>str | None</code>)             </li> <li> <code>name</code>                 (<code>str | None</code>)             </li> <li> <code>row_id</code>                 (<code>RowId | None</code>)             </li> <li> <code>sequence</code>                 (<code>str | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_shape</code> </li> </ul>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.parameter","title":"parameter","text":"<pre><code>parameter: Parameter | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.value","title":"value","text":"<pre><code>value: str | dict[str, Any] | EntityLink | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.unit","title":"unit","text":"<pre><code>unit: SerializeAsEntityLink[Unit] | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.parameter_id","title":"parameter_id","text":"<pre><code>parameter_id: ParameterId | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.intervals","title":"intervals","text":"<pre><code>intervals: list[Interval] | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.category","title":"category","text":"<pre><code>category: ParameterCategory | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.short_name","title":"short_name","text":"<pre><code>short_name: str | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.name","title":"name","text":"<pre><code>name: str | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.row_id","title":"row_id","text":"<pre><code>row_id: RowId | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.sequence","title":"sequence","text":"<pre><code>sequence: str | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterSetpoint.validate_shape","title":"validate_shape","text":"<pre><code>validate_shape() -&gt; ParameterSetpoint\n</code></pre> Source code in <code>src/albert/resources/workflows.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_shape(self) -&gt; \"ParameterSetpoint\":\n    def has_id(obj: Any) -&gt; bool:\n        if isinstance(obj, Mapping):\n            return bool(obj.get(\"id\"))\n        return getattr(obj, \"id\", None) not in (None, \"\")\n\n    if self.parameter:\n        if self.parameter_id is not None and self.parameter_id != self.parameter.id:\n            raise ValueError(\"Provided parameter_id does not match the parameter's id.\")\n\n        # Note: We use  __setattr__ here rather than doing the assignment\n        # because `name` and `parameter_id` are pydantic field\n        # and setting it will trigger the model validation again\n        # causing an infinite recursion error\n\n        object.__setattr__(self, \"parameter_id\", self.parameter.id)\n        if not self.name:\n            object.__setattr__(self, \"name\", self.parameter.name)\n\n    if self.parameter_id is None:\n        raise ValueError(\"Either parameter or parameter_id must be provided.\")\n\n    pid = self.parameter_id\n\n    # Special Parameters\n    if self.category == ParameterCategory.SPECIAL:\n        if self.intervals is not None:\n            raise ValueError(f\"Parameter {pid}: Special parameters cannot have 'intervals'.\")\n        if self.value is None:\n            return self  # presence-only allowed\n        if not has_id(self.value):\n            raise ValueError(\n                f\"Parameter {pid}: Special parameters require an object value with an 'id'.\"\n            )\n        return self\n\n    # Normal Parameters\n    # Exactly one of value / intervals\n    if self.value is not None and self.intervals is not None:\n        raise ValueError(f\"Parameter {pid}: provide exactly one of 'value' or 'Intervals'.\")\n\n    # If value is mapping-shaped for Normal, it must include id (e.g., enum {id,...})\n    if isinstance(self.value, Mapping) and not has_id(self.value):\n        raise ValueError(f\"Parameter {pid}: object-shaped 'value' must include an 'id'.\")\n\n    return self\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterGroupSetpoints","title":"ParameterGroupSetpoints","text":"<p>               Bases: <code>BaseAlbertModel</code></p> <p>A class that represents the setpoints on a parameter group.</p> <p>Attributes:</p> Name Type Description <code>parameter_group</code> <code>ParameterGroup</code> <p>The parameter group to set the setpoints on. Provide either a parameter_group or a paramerter_group_id</p> <code>parameter_group_id</code> <code>ParameterGroupId</code> <p>The id of the parameter group.  Provide either a parameter_group or a paramerter_group_id</p> <code>parameter_group_name</code> <code>str</code> <p>The name of the parameter group. This is a read-only field.</p> <code>parameter_setpoints</code> <code>list[ParameterSetpoint]</code> <p>The setpoints to apply to the parameter group.</p> Show JSON schema: <pre><code>{\n  \"$defs\": {\n    \"ACL\": {\n      \"description\": \"The Access Control List (ACL) for a user\",\n      \"properties\": {\n        \"id\": {\n          \"description\": \"The id of the user for which this ACL applies\",\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"fgc\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AccessControlLevel\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The Fine-Grain Control Level\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"ACL\",\n      \"type\": \"object\"\n    },\n    \"AccessControlLevel\": {\n      \"description\": \"The fine grain control\",\n      \"enum\": [\n        \"ProjectOwner\",\n        \"ProjectEditor\",\n        \"ProjectViewer\",\n        \"ProjectAllTask\",\n        \"ProjectStrictViewer\",\n        \"ProjectPropertyTask\",\n        \"InventoryOwner\",\n        \"InventoryViewer\",\n        \"CustomTemplateOwner\",\n        \"CustomTemplateViewer\"\n      ],\n      \"title\": \"AccessControlLevel\",\n      \"type\": \"string\"\n    },\n    \"AuditFields\": {\n      \"description\": \"The audit fields for a resource\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        }\n      },\n      \"title\": \"AuditFields\",\n      \"type\": \"object\"\n    },\n    \"Cas\": {\n      \"description\": \"Represents a CAS entity.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"number\": {\n          \"description\": \"The CAS number.\",\n          \"title\": \"Number\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Name of the CAS.\",\n          \"title\": \"Name\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The description or name of the CAS.\",\n          \"title\": \"Description\"\n        },\n        \"notes\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Notes related to the CAS.\",\n          \"title\": \"Notes\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CasCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The category of the CAS.\"\n        },\n        \"casSmiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS SMILES notation.\",\n          \"title\": \"Cassmiles\"\n        },\n        \"inchiKey\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"InChIKey of the CAS.\",\n          \"title\": \"Inchikey\"\n        },\n        \"iUpacName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"IUPAC name of the CAS.\",\n          \"title\": \"Iupacname\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"The AlbertID of the CAS.\",\n          \"title\": \"Albertid\"\n        },\n        \"hazards\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Hazard\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazards associated with the CAS.\",\n          \"title\": \"Hazards\"\n        },\n        \"wgk\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"German Water Hazard Class (WGK) number.\",\n          \"title\": \"Wgk\"\n        },\n        \"ecListNo\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"European Community (EC) number.\",\n          \"title\": \"Eclistno\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Type of the CAS.\",\n          \"title\": \"Type\"\n        },\n        \"classificationType\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Classification type of the CAS.\",\n          \"title\": \"Classificationtype\"\n        },\n        \"order\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"CAS order.\",\n          \"title\": \"Order\"\n        },\n        \"Metadata\": {\n          \"additionalProperties\": {\n            \"anyOf\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              },\n              {\n                \"items\": {\n                  \"$ref\": \"#/$defs/EntityLink\"\n                },\n                \"type\": \"array\"\n              }\n            ]\n          },\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        }\n      },\n      \"required\": [\n        \"number\"\n      ],\n      \"title\": \"Cas\",\n      \"type\": \"object\"\n    },\n    \"CasAmount\": {\n      \"description\": \"CasAmount is a Pydantic model representing an amount of a given CAS.\\n\\nAttributes\\n----------\\nmin : float\\n    The minimum amount of the CAS in the formulation.\\nmax : float\\n    The maximum amount of the CAS in the formulation.\\ntarget: float | None\\n    The inventory value or target of the CAS in the formulation.\\nid : str | None\\n    The Albert ID of the CAS Number Resource this amount represents. Provide either a Cas or an ID.\\ncas : Cas | None\\n    The CAS object associated with this amount. Provide either a Cas or an id.\\ncas_smiles: str | None\\n    The SMILES string of the CAS Number resource. Obtained from the Cas object when provided.\\nnumber: str | None\\n    The CAS number. Obtained from the Cas object when provided.\",\n      \"properties\": {\n        \"min\": {\n          \"title\": \"Min\",\n          \"type\": \"number\"\n        },\n        \"max\": {\n          \"title\": \"Max\",\n          \"type\": \"number\"\n        },\n        \"inventoryValue\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Inventoryvalue\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"casCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cascategory\"\n        },\n        \"cas\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Cas\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"casSmiles\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cassmiles\"\n        },\n        \"number\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Number\"\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/CasAuditFieldsWithEmail\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"min\",\n        \"max\"\n      ],\n      \"title\": \"CasAmount\",\n      \"type\": \"object\"\n    },\n    \"CasAuditFieldsWithEmail\": {\n      \"description\": \"The audit fields for a CAS resource with email\",\n      \"properties\": {\n        \"by\": {\n          \"default\": null,\n          \"title\": \"By\",\n          \"type\": \"string\"\n        },\n        \"byName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Byname\"\n        },\n        \"at\": {\n          \"anyOf\": [\n            {\n              \"format\": \"date-time\",\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"At\"\n        },\n        \"email\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Email\"\n        }\n      },\n      \"title\": \"CasAuditFieldsWithEmail\",\n      \"type\": \"object\"\n    },\n    \"CasCategory\": {\n      \"enum\": [\n        \"User\",\n        \"Verisk\",\n        \"TSCA - Public\",\n        \"TSCA - Private\",\n        \"not TSCA\",\n        \"CAS linked to External Database\",\n        \"Unknown (Trade Secret)\",\n        \"CL_Inventory Upload\"\n      ],\n      \"title\": \"CasCategory\",\n      \"type\": \"string\"\n    },\n    \"Company\": {\n      \"description\": \"Company is a Pydantic model representing a company entity.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the company.\\nid : str | None\\n    The Albert ID of the company. Set when the company is retrieved from Albert.\\ndistance : float | None\\n    The scores of a company in a search result, optional. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"distance\": {\n          \"anyOf\": [\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Distance\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Company\",\n      \"type\": \"object\"\n    },\n    \"DataType\": {\n      \"enum\": [\n        \"number\",\n        \"string\",\n        \"enum\"\n      ],\n      \"title\": \"DataType\",\n      \"type\": \"string\"\n    },\n    \"EntityLink\": {\n      \"properties\": {\n        \"id\": {\n          \"title\": \"Id\",\n          \"type\": \"string\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        }\n      },\n      \"required\": [\n        \"id\"\n      ],\n      \"title\": \"EntityLink\",\n      \"type\": \"object\"\n    },\n    \"EnumValidationValue\": {\n      \"description\": \"Represents a value for an enum type validation.\\n\\nAttributes\\n----------\\ntext : str\\n    The text of the enum value.\\nid : str | None\\n    The ID of the enum value. If not provided, the ID will be generated upon creation.\",\n      \"properties\": {\n        \"text\": {\n          \"title\": \"Text\",\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"originalText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originaltext\"\n        }\n      },\n      \"required\": [\n        \"text\"\n      ],\n      \"title\": \"EnumValidationValue\",\n      \"type\": \"object\"\n    },\n    \"Hazard\": {\n      \"description\": \"Represents a chemical hazard.\",\n      \"properties\": {\n        \"subCategory\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard subcategory\",\n          \"title\": \"Subcategory\"\n        },\n        \"hCode\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code\",\n          \"title\": \"Hcode\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"number\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard category\",\n          \"title\": \"Category\"\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard classification\",\n          \"title\": \"Class\"\n        },\n        \"hCodeText\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"description\": \"Hazard code text\",\n          \"title\": \"Hcodetext\"\n        }\n      },\n      \"title\": \"Hazard\",\n      \"type\": \"object\"\n    },\n    \"Interval\": {\n      \"description\": \"A Pydantic class representing an interval.\\n\\nAttrubutes\\n----------\\nvalue : str\\n    The value of the interval setpoint.\\nunit : Unit\\n    The unit of the related value.\",\n      \"properties\": {\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        }\n      },\n      \"title\": \"Interval\",\n      \"type\": \"object\"\n    },\n    \"InventoryCategory\": {\n      \"enum\": [\n        \"RawMaterials\",\n        \"Consumables\",\n        \"Equipment\",\n        \"Formulas\"\n      ],\n      \"title\": \"InventoryCategory\",\n      \"type\": \"string\"\n    },\n    \"InventoryItem\": {\n      \"description\": \"An InventoryItem is a Pydantic model representing an item in the inventory. Can be a raw material, consumable, equipment, or formula.\\nNote: Formulas should be registered via the Worksheet collection / Sheet resource.\\n\\nReturns\\n-------\\nInventoryItem\\n    An InventoryItem that can be used to represent an item in the inventory. Can be a raw material, consumable, equipment, or formula.\\n\\nAttributes\\n------\\n\\nname : str\\n    The name of the InventoryItem.\\nid : str | None\\n    The Albert ID of the InventoryItem. Set when the InventoryItem is retrieved from Albert.\\ndescription : str | None\\n    The description of the InventoryItem.\\ncategory : InventoryCategory\\n    The category of the InventoryItem. Allowed values are `RawMaterials`, `Consumables`, `Equipment`, and `Formulas`.\\nunit_category : InventoryUnitCategory\\n    The unit category of the InventoryItem. Can be mass, volume, length, pressure, or units. By default, mass is used for RawMaterials and Formulas, and units is used for Equipment and Consumables.\\nsecurity_class : SecurityClass | None\\n    The security class of the InventoryItem. Optional. Can be confidential, shared, or restricted.\\ncompany : Company | str | None\\n    The company associated with the InventoryItem. Can be a Company object or a string. If a String is provided, a Company object with the name of the provided string will be first-or-created.\\nminimum : list[InventoryMinimum] | None\\n    The minimum amount of the InventoryItem that must be kept in stock at a given Location. Optional.\\nalias : str | None\\n    An alias for the InventoryItem. Optional.\\ncas : list[CasAmount] | None\\n    The CAS numbers associated with the InventoryItem. This is how a compositional breakdown can be provided. Optional.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\\n    Metadata associated with the InventoryItem. Optional. Allowed metadata fields can be found in the CustomFields documentation.\\nproject_id : str | None\\n    The project ID associated with the InventoryItem. Read Only. Required for Formulas.\\nformula_id : str | None\\n    The formula ID associated with the InventoryItem. Read Only.\\ntags : list[str|Tag] | None\\n    The tags associated with the InventoryItem. Optional. If a string is provided, a Tag object with the name of the provided string will be first-or-created.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Tags\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/Tag\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tags\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"category\": {\n          \"$ref\": \"#/$defs/InventoryCategory\"\n        },\n        \"unitCategory\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/InventoryUnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"class\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/SecurityClass\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Company\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Company\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Company\"\n        },\n        \"minimum\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/InventoryMinimum\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Minimum\"\n        },\n        \"alias\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Alias\"\n        },\n        \"Cas\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/CasAmount\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Cas\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"parentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Parentid\"\n        },\n        \"ACL\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ACL\"\n          },\n          \"title\": \"Acl\",\n          \"type\": \"array\"\n        },\n        \"TaskConfig\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"additionalProperties\": true,\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Taskconfig\"\n        },\n        \"formulaId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Formulaid\"\n        },\n        \"Symbols\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"additionalProperties\": true,\n                \"type\": \"object\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbols\"\n        },\n        \"unNumber\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unnumber\"\n        },\n        \"recentAttachmentId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Recentattachmentid\"\n        }\n      },\n      \"required\": [\n        \"category\"\n      ],\n      \"title\": \"InventoryItem\",\n      \"type\": \"object\"\n    },\n    \"InventoryMinimum\": {\n      \"description\": \"Defined the minimum amount of an InventoryItem that must be kept in stock at a given Location.\\n\\nAttributes\\n----------\\nid : str\\n    The unique identifier of the Location object associated with this InventoryMinimum.\\n    Provide either a Location or a location id.\\nlocation : Location\\n    The Location object associated with this InventoryMinimum. Provide either a Location or a location id.\\nminimum : float\\n    The minimum amount of the InventoryItem that must be kept in stock at the given Location.\",\n      \"properties\": {\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"minimum\": {\n          \"maximum\": 1000000000000000,\n          \"minimum\": 0,\n          \"title\": \"Minimum\",\n          \"type\": \"number\"\n        }\n      },\n      \"required\": [\n        \"minimum\"\n      ],\n      \"title\": \"InventoryMinimum\",\n      \"type\": \"object\"\n    },\n    \"InventoryUnitCategory\": {\n      \"enum\": [\n        \"mass\",\n        \"volume\",\n        \"length\",\n        \"pressure\",\n        \"units\"\n      ],\n      \"title\": \"InventoryUnitCategory\",\n      \"type\": \"string\"\n    },\n    \"Location\": {\n      \"description\": \"A location in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the location.\\nid : str | None\\n    The Albert ID of the location. Set when the location is retrieved from Albert.\\nlatitude : float\\n    The latitude of the location.\\nlongitude : float\\n    The longitude of the location.\\naddress : str\\n    The address of the location.\\ncountry : str | None\\n    The country code of the location. Must be two characters long.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"latitude\": {\n          \"title\": \"Latitude\",\n          \"type\": \"number\"\n        },\n        \"longitude\": {\n          \"title\": \"Longitude\",\n          \"type\": \"number\"\n        },\n        \"address\": {\n          \"title\": \"Address\",\n          \"type\": \"string\"\n        },\n        \"country\": {\n          \"anyOf\": [\n            {\n              \"maxLength\": 2,\n              \"minLength\": 2,\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Country\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"latitude\",\n        \"longitude\",\n        \"address\"\n      ],\n      \"title\": \"Location\",\n      \"type\": \"object\"\n    },\n    \"Operator\": {\n      \"enum\": [\n        \"between\",\n        \"lt\",\n        \"lte\",\n        \"gte\",\n        \"gt\",\n        \"eq\"\n      ],\n      \"title\": \"Operator\",\n      \"type\": \"string\"\n    },\n    \"PGType\": {\n      \"description\": \"The type of a parameter group\",\n      \"enum\": [\n        \"general\",\n        \"batch\",\n        \"property\"\n      ],\n      \"title\": \"PGType\",\n      \"type\": \"string\"\n    },\n    \"Parameter\": {\n      \"description\": \"A parameter in Albert.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the parameter. Names must be unique.\\nid : str | None\\n    The Albert ID of the parameter. Set when the parameter is retrieved from Albert.\\ncategory : ParameterCategory\\n    The category of the parameter. Allowed values are `Normal` and `Special`. Read-only.\\nrank : int\\n    The rank of the returned parameter. Read-only.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"rank\": {\n          \"anyOf\": [\n            {\n              \"type\": \"integer\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rank\"\n        },\n        \"required\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Required\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Parameter\",\n      \"type\": \"object\"\n    },\n    \"ParameterCategory\": {\n      \"description\": \"The category of a parameter\",\n      \"enum\": [\n        \"Normal\",\n        \"Special\"\n      ],\n      \"title\": \"ParameterCategory\",\n      \"type\": \"string\"\n    },\n    \"ParameterGroup\": {\n      \"description\": \"Use 'Standards' key in metadata to store standards\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Tags\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/Tag\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Tags\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"type\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/PGType\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"description\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Description\"\n        },\n        \"class\": {\n          \"$ref\": \"#/$defs/SecurityClass\",\n          \"default\": \"restricted\"\n        },\n        \"ACL\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"anyOf\": [\n                  {\n                    \"$ref\": \"#/$defs/User\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  }\n                ]\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Acl\"\n        },\n        \"Metadata\": {\n          \"additionalProperties\": {\n            \"anyOf\": [\n              {\n                \"type\": \"number\"\n              },\n              {\n                \"type\": \"integer\"\n              },\n              {\n                \"type\": \"string\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              },\n              {\n                \"items\": {\n                  \"$ref\": \"#/$defs/EntityLink\"\n                },\n                \"type\": \"array\"\n              }\n            ]\n          },\n          \"title\": \"Metadata\",\n          \"type\": \"object\"\n        },\n        \"Parameters\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/ParameterValue\"\n          },\n          \"title\": \"Parameters\",\n          \"type\": \"array\"\n        },\n        \"verified\": {\n          \"default\": false,\n          \"title\": \"Verified\",\n          \"type\": \"boolean\"\n        },\n        \"documents\": {\n          \"items\": {\n            \"$ref\": \"#/$defs/EntityLink\"\n          },\n          \"title\": \"Documents\",\n          \"type\": \"array\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"ParameterGroup\",\n      \"type\": \"object\"\n    },\n    \"ParameterSetpoint\": {\n      \"description\": \"A Pydantic class representing the setpoint or intervals of a parameter to use.\\nFor a single value, provide the value and unit. For multiple values, provide intervals.\\na parameter or parameter_id must be provided.\\n\\nAttributes\\n----------\\nparameter : Parameter\\n    The parameter to set the setpoint on. Provide either a parameter or a parameter_id.\\nparameter_id : ParameterId\\n    The id of the parameter. Provide either a parameter or a parameter_id.\\nvalue : str | EntityLink\\n    The value of the setpoint. If the parameter is a InventoryItem, provide the EntityLink of the InventoryItem.\\nunit : Unit\\n    The unit of the setpoint.\\nintervals : list[Interval]\\n    The intervals of the setpoint. Either the intervals or value + unit\\ncategory : ParameterCategory\\n    The category of the parameter. Special for InventoryItem (then use name to specify \\\"Equipment\\\", \\\"Consumeable\\\", etc), normal for all others\\nshort_name : str\\n    The short / display name of the parameter. Required if value is a dictionary.\\nrow_id : RowId\\n    The id of the parameter with respect to the interval row id.\",\n      \"properties\": {\n        \"parameter\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Parameter\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"additionalProperties\": true,\n              \"type\": \"object\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"Intervals\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/Interval\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Intervals\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"shortName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Shortname\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"rowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Rowid\"\n        },\n        \"prgPrmRowId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Prgprmrowid\"\n        }\n      },\n      \"title\": \"ParameterSetpoint\",\n      \"type\": \"object\"\n    },\n    \"ParameterValue\": {\n      \"description\": \"The value of a parameter in a parameter group.\\n\\nAttributes\\n----------\\nparameter : Parameter | None\\n    The Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.\\nid : str | None\\n    The Albert ID of the Parameter resource this value is associated with. Provide either an id or a parameter keyword argument.\\ncategory: ParameterCategory\\n    The category of the parameter.\\nshort_name : str | None\\n    The short name of the parameter value.\\nvalue : str | None\\n    The default value of the parameter. Can be a string or an InventoryItem (if, for example, the parameter is an instrumnt choice).\\nunit : Unit | None\\n    The unit of measure for the provided parameter value.\\nname : str\\n    The name of the parameter. Read-only.\\nsequence : int\\n    The sequence of the parameter. Read-only.\",\n      \"properties\": {\n        \"parameter\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Parameter\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"id\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Id\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/ParameterCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"shortName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Shortname\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"$ref\": \"#/$defs/InventoryItem\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"Unit\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Unit\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Unit\"\n        },\n        \"Added\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"validation\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/ValueValidation\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Validation\"\n        },\n        \"name\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Name\"\n        },\n        \"sequence\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Sequence\"\n        },\n        \"originalShortName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originalshortname\"\n        },\n        \"originalName\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Originalname\"\n        }\n      },\n      \"title\": \"ParameterValue\",\n      \"type\": \"object\"\n    },\n    \"Role\": {\n      \"description\": \"A role in Albert. Note: Roles are not currently creatable via the SDK.\\n\\nAttributes\\n----------\\nname : str\\n    The name of the role.\\nid : str\\n    The Albert ID of the role. Set when the role is retrieved from Albert.\\npolicies : list[Any] | None\\n    The policies associated with the role.\\ntenant : str\\n    The tenant ID of the role.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"policies\": {\n          \"anyOf\": [\n            {\n              \"items\": {},\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Policies\"\n        },\n        \"tenant\": {\n          \"title\": \"Tenant\",\n          \"type\": \"string\"\n        }\n      },\n      \"required\": [\n        \"name\",\n        \"tenant\"\n      ],\n      \"title\": \"Role\",\n      \"type\": \"object\"\n    },\n    \"SecurityClass\": {\n      \"description\": \"The security class of a resource\",\n      \"enum\": [\n        \"shared\",\n        \"restricted\",\n        \"confidential\",\n        \"private\"\n      ],\n      \"title\": \"SecurityClass\",\n      \"type\": \"string\"\n    },\n    \"Status\": {\n      \"description\": \"The status of a resource\",\n      \"enum\": [\n        \"active\",\n        \"inactive\"\n      ],\n      \"title\": \"Status\",\n      \"type\": \"string\"\n    },\n    \"Tag\": {\n      \"description\": \"Tag is a Pydantic model representing a tag entity.\\n\\nAttributes\\n----------\\ntag : str\\n    The name of the tag.\\nid : str | None\\n    The Albert ID of the tag. Set when the tag is retrieved from Albert.\\n\\nMethods\\n-------\\nfrom_string(tag: str) -&gt; \\\"Tag\\\"\\n    Creates a Tag object from a string.\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Tag\",\n      \"type\": \"object\"\n    },\n    \"Unit\": {\n      \"description\": \"Unit is a Pydantic model representing a unit entity.\\n\\nAttributes\\n----------\\nid : str | None\\n    The Albert ID of the unit. Set when the unit is retrieved from Albert.\\nname : str\\n    The name of the unit.\\nsymbol : str | None\\n    The symbol of the unit.\\nsynonyms : List[str] | None\\n    The list of synonyms for the unit.\\ncategory : UnitCategory\\n    The category of the unit.\\nverified : bool | None\\n    Whether the unit is verified.\\nstatus : Status | None\\n    The status of the unit. Allowed values are `active`, and `inactive`\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"symbol\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Symbol\"\n        },\n        \"Synonyms\": {\n          \"anyOf\": [\n            {\n              \"items\": {\n                \"type\": \"string\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"title\": \"Synonyms\"\n        },\n        \"category\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/UnitCategory\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"verified\": {\n          \"anyOf\": [\n            {\n              \"type\": \"boolean\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": false,\n          \"title\": \"Verified\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"Unit\",\n      \"type\": \"object\"\n    },\n    \"UnitCategory\": {\n      \"description\": \"UnitCategory is an enumeration of possible unit categories.\\n\\nAttributes\\n----------\\nLENGTH : str\\n    Represents length units.\\nVOLUME : str\\n    Represents volume units.\\nLIQUID_VOLUME : str\\n    Represents liquid volume units.\\nANGLES : str\\n    Represents angle units.\\nTIME : str\\n    Represents time units.\\nFREQUENCY : str\\n    Represents frequency units.\\nMASS : str\\n    Represents mass units.\\nCURRENT : str\\n    Represents electric current units.\\nTEMPERATURE : str\\n    Represents temperature units.\\nAMOUNT : str\\n    Represents amount of substance units.\\nLUMINOSITY : str\\n    Represents luminous intensity units.\\nFORCE : str\\n    Represents force units.\\nENERGY : str\\n    Represents energy units.\\nPOWER : str\\n    Represents power units.\\nPRESSURE : str\\n    Represents pressure units.\\nELECTRICITY_AND_MAGNETISM : str\\n    Represents electricity and magnetism units.\\nOTHER : str\\n    Represents other units.\\nWEIGHT : str\\n    Represents weight units.\",\n      \"enum\": [\n        \"Length\",\n        \"Volume\",\n        \"Liquid volume\",\n        \"Angles\",\n        \"Time\",\n        \"Frequency\",\n        \"Mass\",\n        \"Electric current\",\n        \"Temperature\",\n        \"Amount of substance\",\n        \"Luminous intensity\",\n        \"Force\",\n        \"Energy\",\n        \"Power\",\n        \"Pressure\",\n        \"Electricity and magnetism\",\n        \"Other\",\n        \"Weight\",\n        \"Area\",\n        \"Surface Area\",\n        \"Binary\",\n        \"Capacitance\",\n        \"Speed\",\n        \"Electrical conductivity\",\n        \"Electrical permitivitty\",\n        \"Density\",\n        \"Resistance\"\n      ],\n      \"title\": \"UnitCategory\",\n      \"type\": \"string\"\n    },\n    \"User\": {\n      \"description\": \"Represents a User on the Albert Platform\\n\\nAttributes\\n----------\\nname : str\\n    The name of the user.\\nid : str | None\\n    The Albert ID of the user. Set when the user is retrieved from Albert.\\nlocation : Location | None\\n    The location of the user.\\nemail : EmailStr | None\\n    The email of the user.\\nroles : list[Role]\\n    The roles of the user.\\nuser_class : UserClass\\n    The ACL class level of the user.\\nmetadata : dict[str, str | list[EntityLink] | EntityLink] | None\",\n      \"properties\": {\n        \"status\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Status\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Created\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"Updated\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/AuditFields\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        },\n        \"name\": {\n          \"title\": \"Name\",\n          \"type\": \"string\"\n        },\n        \"albertId\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Albertid\"\n        },\n        \"Location\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Location\"\n            },\n            {\n              \"$ref\": \"#/$defs/EntityLink\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Location\"\n        },\n        \"email\": {\n          \"default\": null,\n          \"format\": \"email\",\n          \"title\": \"Email\",\n          \"type\": \"string\"\n        },\n        \"Roles\": {\n          \"items\": {\n            \"anyOf\": [\n              {\n                \"$ref\": \"#/$defs/Role\"\n              },\n              {\n                \"$ref\": \"#/$defs/EntityLink\"\n              }\n            ]\n          },\n          \"maxItems\": 1,\n          \"title\": \"Roles\",\n          \"type\": \"array\"\n        },\n        \"userClass\": {\n          \"$ref\": \"#/$defs/UserClass\",\n          \"default\": \"standard\"\n        },\n        \"Metadata\": {\n          \"anyOf\": [\n            {\n              \"additionalProperties\": {\n                \"anyOf\": [\n                  {\n                    \"type\": \"number\"\n                  },\n                  {\n                    \"type\": \"integer\"\n                  },\n                  {\n                    \"type\": \"string\"\n                  },\n                  {\n                    \"$ref\": \"#/$defs/EntityLink\"\n                  },\n                  {\n                    \"items\": {\n                      \"$ref\": \"#/$defs/EntityLink\"\n                    },\n                    \"type\": \"array\"\n                  }\n                ]\n              },\n              \"type\": \"object\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Metadata\"\n        }\n      },\n      \"required\": [\n        \"name\"\n      ],\n      \"title\": \"User\",\n      \"type\": \"object\"\n    },\n    \"UserClass\": {\n      \"description\": \"The ACL class level of the user\",\n      \"enum\": [\n        \"guest\",\n        \"standard\",\n        \"trusted\",\n        \"privileged\",\n        \"admin\"\n      ],\n      \"title\": \"UserClass\",\n      \"type\": \"string\"\n    },\n    \"ValueValidation\": {\n      \"properties\": {\n        \"datatype\": {\n          \"$ref\": \"#/$defs/DataType\"\n        },\n        \"value\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"items\": {\n                \"$ref\": \"#/$defs/EnumValidationValue\"\n              },\n              \"type\": \"array\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Value\"\n        },\n        \"min\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Min\"\n        },\n        \"max\": {\n          \"anyOf\": [\n            {\n              \"type\": \"string\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null,\n          \"title\": \"Max\"\n        },\n        \"operator\": {\n          \"anyOf\": [\n            {\n              \"$ref\": \"#/$defs/Operator\"\n            },\n            {\n              \"type\": \"null\"\n            }\n          ],\n          \"default\": null\n        }\n      },\n      \"required\": [\n        \"datatype\"\n      ],\n      \"title\": \"ValueValidation\",\n      \"type\": \"object\"\n    }\n  },\n  \"description\": \"A class that represents the setpoints on a parameter group.\\n\\n\\nAttributes\\n----------\\nparameter_group : ParameterGroup\\n    The parameter group to set the setpoints on. Provide either a parameter_group or a paramerter_group_id\\nparameter_group_id : ParameterGroupId\\n    The id of the parameter group.  Provide either a parameter_group or a paramerter_group_id\\nparameter_group_name : str\\n    The name of the parameter group. This is a read-only field.\\nparameter_setpoints : list[ParameterSetpoint]\\n    The setpoints to apply to the parameter group.\",\n  \"properties\": {\n    \"parameter_group\": {\n      \"anyOf\": [\n        {\n          \"$ref\": \"#/$defs/ParameterGroup\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null\n    },\n    \"id\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Id\"\n    },\n    \"name\": {\n      \"default\": \"Pre-linked Parameters\",\n      \"title\": \"Name\",\n      \"type\": \"string\"\n    },\n    \"Parameters\": {\n      \"items\": {\n        \"$ref\": \"#/$defs/ParameterSetpoint\"\n      },\n      \"title\": \"Parameters\",\n      \"type\": \"array\"\n    },\n    \"rowId\": {\n      \"anyOf\": [\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Rowid\"\n    },\n    \"prgSequence\": {\n      \"anyOf\": [\n        {\n          \"type\": \"integer\"\n        },\n        {\n          \"type\": \"null\"\n        }\n      ],\n      \"default\": null,\n      \"title\": \"Prgsequence\"\n    }\n  },\n  \"title\": \"ParameterGroupSetpoints\",\n  \"type\": \"object\"\n}\n</code></pre> <p>Fields:</p> <ul> <li> <code>parameter_group</code>                 (<code>ParameterGroup | None</code>)             </li> <li> <code>id</code>                 (<code>ParameterGroupId | DataTemplateId | None</code>)             </li> <li> <code>parameter_group_name</code>                 (<code>str</code>)             </li> <li> <code>parameter_setpoints</code>                 (<code>list[ParameterSetpoint]</code>)             </li> <li> <code>row_id</code>                 (<code>RowId | None</code>)             </li> <li> <code>sequence</code>                 (<code>int | None</code>)             </li> </ul> <p>Validators:</p> <ul> <li> <code>validate_identifiers</code> </li> </ul>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterGroupSetpoints.parameter_group","title":"parameter_group","text":"<pre><code>parameter_group: ParameterGroup | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterGroupSetpoints.id","title":"id","text":"<pre><code>id: ParameterGroupId | DataTemplateId | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterGroupSetpoints.parameter_group_name","title":"parameter_group_name","text":"<pre><code>parameter_group_name: str = 'Pre-linked Parameters'\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterGroupSetpoints.parameter_setpoints","title":"parameter_setpoints","text":"<pre><code>parameter_setpoints: list[ParameterSetpoint]\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterGroupSetpoints.row_id","title":"row_id","text":"<pre><code>row_id: RowId | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterGroupSetpoints.sequence","title":"sequence","text":"<pre><code>sequence: int | None = None\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.ParameterGroupSetpoints.validate_identifiers","title":"validate_identifiers","text":"<pre><code>validate_identifiers()\n</code></pre> Source code in <code>src/albert/resources/workflows.py</code> <pre><code>@model_validator(mode=\"after\")\ndef validate_identifiers(self):\n    if self.parameter_group is not None and getattr(self.parameter_group, \"id\", None) is None:\n        raise ValueError(\"Provided parameter_group must include a non-null `id` attribute.\")\n\n    if (\n        self.parameter_group is not None\n        and self.id is not None\n        and self.id != self.parameter_group.id\n    ):\n        raise ValueError(f\"id mismatch: expected {self.parameter_group.id!r}, got {self.id!r}\")\n\n    if self.parameter_group is not None and self.id is None:\n        object.__setattr__(self, \"id\", self.parameter_group.id)\n\n    if self.id is None:\n        # For workflows created without a PRG/DT id, intervals are not allowed.\n        for sp in self.parameter_setpoints:\n            if sp.intervals is not None:\n                raise ValueError(\n                    f\"Parameter {sp.parameter_id}: Intervals are not allowed when the Parameter Group has no 'id'.\"\n                )\n\n    return self\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Workflow","title":"Workflow","text":"<p>               Bases: <code>BaseResource</code></p> <p>A Pydantic Class representing a workflow in Albert.</p> <p>Workflows are combinations of Data Templates and Parameter groups and their associated setpoints.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the workflow.</p> <code>parameter_group_setpoints</code> <code>list[ParameterGroupSetpoints]</code> <p>The setpoints to apply to the parameter groups in the workflow.</p> <code>id</code> <code>str | None</code> <p>The AlbertID of the workflow. This is set when a workflow is retrived from the platform.</p> <p>Methods:</p> Name Description <code>model_post_init</code> <code>get_interval_id</code> <p>Get the interval ID for a set of parameter values.</p>"},{"location":"resources/workflows/#albert.resources.workflows.Workflow.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Workflow.parameter_group_setpoints","title":"parameter_group_setpoints","text":"<pre><code>parameter_group_setpoints: list[ParameterGroupSetpoints] = (\n    Field(alias=\"ParameterGroups\")\n)\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Workflow.interval_combinations","title":"interval_combinations","text":"<pre><code>interval_combinations: list[IntervalCombination] | None = (\n    Field(default=None, alias=\"IntervalCombinations\")\n)\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Workflow.id","title":"id","text":"<pre><code>id: str | None = Field(\n    alias=\"albertId\",\n    default=None,\n    validation_alias=AliasChoices(\n        \"albertId\", \"existingAlbertId\"\n    ),\n    exclude=True,\n)\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Workflow.block_mapping","title":"block_mapping","text":"<pre><code>block_mapping: str | None = Field(\n    default=None, alias=\"blockMapping\"\n)\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Workflow.model_post_init","title":"model_post_init","text":"<pre><code>model_post_init(__context) -&gt; None\n</code></pre> Source code in <code>src/albert/resources/workflows.py</code> <pre><code>def model_post_init(self, __context) -&gt; None:\n    self._populate_interval_parameters()\n</code></pre>"},{"location":"resources/workflows/#albert.resources.workflows.Workflow.get_interval_id","title":"get_interval_id","text":"<pre><code>get_interval_id(parameter_values: dict[str, any]) -&gt; str\n</code></pre> <p>Get the interval ID for a set of parameter values.</p> <p>This method matches parameter values to intervals defined in the workflow and constructs a composite interval ID. For multiple parameters, the interval IDs are joined with 'X'.</p> <p>Parameters:</p> Name Type Description Default <code>parameter_values</code> <code>dict[str, any]</code> <p>Dictionary mapping parameter names to their values. Values can be numbers or strings that match the interval values defined in the workflow.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The composite interval ID string. For a single parameter this is just the interval ID. For multiple parameters, interval IDs are joined with 'X' (e.g. \"ROW1XROW2\").</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If any parameter value does not match a defined interval in the workflow.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; workflow = Workflow(...)\n&gt;&gt;&gt; # Single parameter\n&gt;&gt;&gt; workflow.get_interval_id({\"Temperature\": 25})\n'ROW1'\n&gt;&gt;&gt; # Multiple parameters\n&gt;&gt;&gt; workflow.get_interval_id({\"Temperature\": 25, \"Time\": 60})\n'ROW1XROW2'\n&gt;&gt;&gt; # Non-matching value raises error\n&gt;&gt;&gt; workflow.get_interval_id({\"Temperature\": 999})\nAlbertException: No matching interval found for parameter 'Temperature' with value '999'\n</code></pre> Source code in <code>src/albert/resources/workflows.py</code> <pre><code>def get_interval_id(self, parameter_values: dict[str, any]) -&gt; str:\n    \"\"\"Get the interval ID for a set of parameter values.\n\n    This method matches parameter values to intervals defined in the workflow and constructs\n    a composite interval ID. For multiple parameters, the interval IDs are joined with 'X'.\n\n    Parameters\n    ----------\n    parameter_values : dict[str, any]\n        Dictionary mapping parameter names to their values. Values can be numbers or strings\n        that match the interval values defined in the workflow.\n\n    Returns\n    -------\n    str\n        The composite interval ID string. For a single parameter this is just the interval ID.\n        For multiple parameters, interval IDs are joined with 'X' (e.g. \"ROW1XROW2\").\n\n    Raises\n    ------\n    ValueError\n        If any parameter value does not match a defined interval in the workflow.\n\n    Examples\n    --------\n    &gt;&gt;&gt; workflow = Workflow(...)\n    &gt;&gt;&gt; # Single parameter\n    &gt;&gt;&gt; workflow.get_interval_id({\"Temperature\": 25})\n    'ROW1'\n    &gt;&gt;&gt; # Multiple parameters\n    &gt;&gt;&gt; workflow.get_interval_id({\"Temperature\": 25, \"Time\": 60})\n    'ROW1XROW2'\n    &gt;&gt;&gt; # Non-matching value raises error\n    &gt;&gt;&gt; workflow.get_interval_id({\"Temperature\": 999})\n    AlbertException: No matching interval found for parameter 'Temperature' with value '999'\n    \"\"\"\n    interval_id = \"\"\n    for param_name, param_value in parameter_values.items():\n        matching_interval = None\n        for workflow_interval in self._interval_parameters:\n            if workflow_interval.interval_param_name.lower() == param_name.lower() and (\n                param_value == workflow_interval.interval_value\n                or str(param_value) == workflow_interval.interval_value\n            ):\n                matching_interval = workflow_interval\n                break\n\n        if matching_interval is None:\n            raise AlbertException(\n                f\"No matching interval found for parameter '{param_name}' with value '{param_value}'\"\n            )\n\n        interval_id += (\n            f\"X{matching_interval.interval_id}\"\n            if interval_id != \"\"\n            else matching_interval.interval_id\n        )\n\n    return interval_id\n</code></pre>"},{"location":"resources/worksheets/","title":"Worksheets","text":""},{"location":"resources/worksheets/#albert.resources.worksheets","title":"albert.resources.worksheets","text":""},{"location":"resources/worksheets/#albert.resources.worksheets.Worksheet","title":"Worksheet","text":"<p>               Bases: <code>BaseSessionResource</code></p> <p>A worksheet entity.</p> <p>Attributes:</p> Name Type Description <code>sheets</code> <code>List[Sheet]</code> <p>A list of sheet entities.</p> <code>project_name</code> <code>str | None</code> <p>The name of the project.</p> <code>sheets_enabled</code> <code>bool</code> <p>Whether the sheets are enabled.</p> <code>project_id</code> <code>str</code> <p>The Albert ID of the project.</p> <p>Methods:</p> Name Description <code>add_session_to_sheets</code>"},{"location":"resources/worksheets/#albert.resources.worksheets.Worksheet.sheets","title":"sheets","text":"<pre><code>sheets: list[Sheet] = Field(\n    default_factory=list, alias=\"Sheets\"\n)\n</code></pre>"},{"location":"resources/worksheets/#albert.resources.worksheets.Worksheet.project_name","title":"project_name","text":"<pre><code>project_name: str | None = Field(\n    default=None, alias=\"projectName\"\n)\n</code></pre>"},{"location":"resources/worksheets/#albert.resources.worksheets.Worksheet.sheets_enabled","title":"sheets_enabled","text":"<pre><code>sheets_enabled: bool = Field(\n    default=True, alias=\"sheetEnabled\"\n)\n</code></pre>"},{"location":"resources/worksheets/#albert.resources.worksheets.Worksheet.project_id","title":"project_id","text":"<pre><code>project_id: str = Field(alias='projectId')\n</code></pre>"},{"location":"resources/worksheets/#albert.resources.worksheets.Worksheet.add_session_to_sheets","title":"add_session_to_sheets","text":"<pre><code>add_session_to_sheets()\n</code></pre> Source code in <code>src/albert/resources/worksheets.py</code> <pre><code>@model_validator(mode=\"after\")\ndef add_session_to_sheets(self):\n    if self.session is not None:\n        for s in self.sheets:\n            s._session = self.session\n            for d in s.designs:\n                d._session = self.session\n    return self\n</code></pre>"}]}