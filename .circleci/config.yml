version: "2.1"

orbs:
  python: circleci/python@2.1.1
  snyk: snyk/snyk@1.4.0

jobs:
  snyk-app-scan:
    docker:
      - image: cimg/python:3.10.15
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Install Python Dependencies
          command: |
            echo 'export PATH=~$PATH:~/.local/bin' >> $BASH_ENV && source $BASH_ENV
            poetry install
      - snyk/scan
  test:
    executor:
      name: python/default
      tag: "3.10.15"
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Set environment
          command: |
            echo 'export ALBERT_BASE_URL="https://app.albertinvent.com"' >> "$BASH_ENV"
      - run:
          name: Check formatting
          command: |
            poetry run ruff format . --check
      - run:
          name: Check lints
          command: |
            poetry run ruff check .
      - run:
          name: Run pytest
          command: |
            poetry run pytest

  publish:
    executor:
      name: python/default
      tag: "3.10.15"
    steps:
      - checkout
      - run:
          name: Add versioning plugin
          command: poetry self add "poetry-dynamic-versioning[plugin]"
      - run:
          name: Publish package
          command: poetry publish --build --repository albert

  validate_version_bump:
    executor:
      name: python/default
      tag: "3.10.15"
    steps:
      - checkout
      - run:
          name: Check is PR
          command: |
            if [[ -z ${CIRCLE_PULL_REQUEST} ]]; then
              echo "Not a PR, exiting job"
              circleci-agent step halt
            fi
      - run:
          name: Validate version bump
          command: |
            GITHUB_PR_URL=$(echo https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19} | sed "s/\/pull\//\/pulls\//")
            BASE_BRANCH=$(curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" ${GITHUB_PR_URL} | jq ".base.ref" | tr -d "\042")
            if [[ $BASE_BRANCH == "main" ]]; then
              echo "Validating version bump for PR into '${BASE_BRANCH}'"
              python scripts/validate_version_bump.py --base $BASE_BRANCH
            else
              echo "Skipping version bump check for non-production base branch '${BASE_BRANCH}'"
            fi

workflows:
  main:
    jobs:
      - snyk-app-scan:
          name: Snyk App Scan
          context: ds-dev
      - test:
          name: Test
          context: ds-dev
      - validate_version_bump:
          name: Validate Version Bump
          context: ds-dev
      - publish:
          name: Publish
          context: ds-dev
          requires:
            - Test
          filters:
            branches:
              only: ["main"]

